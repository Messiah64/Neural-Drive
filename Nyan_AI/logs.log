2024-09-30 20:04:53,933:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:04:53,936:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:04:53,936:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:04:53,936:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:05:03,134:INFO:PyCaret ClassificationExperiment
2024-09-30 20:05:03,134:INFO:Logging name: clf-default-name
2024-09-30 20:05:03,134:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-30 20:05:03,134:INFO:version 3.3.2
2024-09-30 20:05:03,134:INFO:Initializing setup()
2024-09-30 20:05:03,134:INFO:self.USI: 472a
2024-09-30 20:05:03,134:INFO:self._variable_keys: {'_ml_usecase', 'target_param', 'X', 'y_train', '_available_plots', 'exp_name_log', 'USI', 'X_test', 'memory', 'fix_imbalance', 'pipeline', 'fold_groups_param', 'data', 'fold_generator', 'logging_param', 'idx', 'gpu_n_jobs_param', 'html_param', 'y', 'X_train', 'log_plots_param', 'exp_id', 'gpu_param', 'fold_shuffle_param', 'y_test', 'is_multiclass', 'seed', 'n_jobs_param'}
2024-09-30 20:05:03,134:INFO:Checking environment
2024-09-30 20:05:03,134:INFO:python_version: 3.10.14
2024-09-30 20:05:03,134:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-09-30 20:05:03,134:INFO:machine: AMD64
2024-09-30 20:05:03,134:INFO:platform: Windows-10-10.0.22631-SP0
2024-09-30 20:05:03,146:INFO:Memory: svmem(total=16747855872, available=4163813376, percent=75.1, used=12584042496, free=4163813376)
2024-09-30 20:05:03,146:INFO:Physical Core: 8
2024-09-30 20:05:03,146:INFO:Logical Core: 16
2024-09-30 20:05:03,146:INFO:Checking libraries
2024-09-30 20:05:03,146:INFO:System:
2024-09-30 20:05:03,146:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-09-30 20:05:03,146:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-09-30 20:05:03,146:INFO:   machine: Windows-10-10.0.22631-SP0
2024-09-30 20:05:03,146:INFO:PyCaret required dependencies:
2024-09-30 20:05:03,182:INFO:                 pip: 24.2
2024-09-30 20:05:03,182:INFO:          setuptools: 75.1.0
2024-09-30 20:05:03,182:INFO:             pycaret: 3.3.2
2024-09-30 20:05:03,182:INFO:             IPython: 8.27.0
2024-09-30 20:05:03,182:INFO:          ipywidgets: 8.1.5
2024-09-30 20:05:03,182:INFO:                tqdm: 4.66.5
2024-09-30 20:05:03,182:INFO:               numpy: 1.26.4
2024-09-30 20:05:03,182:INFO:              pandas: 2.1.4
2024-09-30 20:05:03,182:INFO:              jinja2: 3.1.4
2024-09-30 20:05:03,182:INFO:               scipy: 1.11.4
2024-09-30 20:05:03,182:INFO:              joblib: 1.3.2
2024-09-30 20:05:03,182:INFO:             sklearn: 1.4.2
2024-09-30 20:05:03,182:INFO:                pyod: 2.0.2
2024-09-30 20:05:03,182:INFO:            imblearn: 0.12.3
2024-09-30 20:05:03,182:INFO:   category_encoders: 2.6.3
2024-09-30 20:05:03,182:INFO:            lightgbm: 4.5.0
2024-09-30 20:05:03,182:INFO:               numba: 0.60.0
2024-09-30 20:05:03,182:INFO:            requests: 2.32.3
2024-09-30 20:05:03,182:INFO:          matplotlib: 3.7.5
2024-09-30 20:05:03,182:INFO:          scikitplot: 0.3.7
2024-09-30 20:05:03,182:INFO:         yellowbrick: 1.5
2024-09-30 20:05:03,182:INFO:              plotly: 5.24.1
2024-09-30 20:05:03,182:INFO:    plotly-resampler: Not installed
2024-09-30 20:05:03,182:INFO:             kaleido: 0.2.1
2024-09-30 20:05:03,182:INFO:           schemdraw: 0.15
2024-09-30 20:05:03,182:INFO:         statsmodels: 0.14.3
2024-09-30 20:05:03,182:INFO:              sktime: 0.26.0
2024-09-30 20:05:03,182:INFO:               tbats: 1.1.3
2024-09-30 20:05:03,182:INFO:            pmdarima: 2.0.4
2024-09-30 20:05:03,182:INFO:              psutil: 6.0.0
2024-09-30 20:05:03,182:INFO:          markupsafe: 2.1.5
2024-09-30 20:05:03,186:INFO:             pickle5: Not installed
2024-09-30 20:05:03,186:INFO:         cloudpickle: 3.0.0
2024-09-30 20:05:03,186:INFO:         deprecation: 2.1.0
2024-09-30 20:05:03,186:INFO:              xxhash: 3.5.0
2024-09-30 20:05:03,186:INFO:           wurlitzer: Not installed
2024-09-30 20:05:03,186:INFO:PyCaret optional dependencies:
2024-09-30 20:05:03,251:INFO:                shap: Not installed
2024-09-30 20:05:03,251:INFO:           interpret: Not installed
2024-09-30 20:05:03,251:INFO:                umap: Not installed
2024-09-30 20:05:03,251:INFO:     ydata_profiling: Not installed
2024-09-30 20:05:03,251:INFO:  explainerdashboard: Not installed
2024-09-30 20:05:03,251:INFO:             autoviz: Not installed
2024-09-30 20:05:03,251:INFO:           fairlearn: Not installed
2024-09-30 20:05:03,251:INFO:          deepchecks: Not installed
2024-09-30 20:05:03,251:INFO:             xgboost: 2.1.1
2024-09-30 20:05:03,251:INFO:            catboost: Not installed
2024-09-30 20:05:03,251:INFO:              kmodes: Not installed
2024-09-30 20:05:03,251:INFO:             mlxtend: Not installed
2024-09-30 20:05:03,251:INFO:       statsforecast: Not installed
2024-09-30 20:05:03,251:INFO:        tune_sklearn: Not installed
2024-09-30 20:05:03,251:INFO:                 ray: Not installed
2024-09-30 20:05:03,251:INFO:            hyperopt: Not installed
2024-09-30 20:05:03,251:INFO:              optuna: Not installed
2024-09-30 20:05:03,251:INFO:               skopt: Not installed
2024-09-30 20:05:03,252:INFO:              mlflow: Not installed
2024-09-30 20:05:03,252:INFO:              gradio: Not installed
2024-09-30 20:05:03,252:INFO:             fastapi: Not installed
2024-09-30 20:05:03,252:INFO:             uvicorn: Not installed
2024-09-30 20:05:03,252:INFO:              m2cgen: Not installed
2024-09-30 20:05:03,252:INFO:           evidently: Not installed
2024-09-30 20:05:03,252:INFO:               fugue: Not installed
2024-09-30 20:05:03,252:INFO:           streamlit: Not installed
2024-09-30 20:05:03,252:INFO:             prophet: Not installed
2024-09-30 20:05:03,252:INFO:None
2024-09-30 20:05:03,252:INFO:Set up data.
2024-09-30 20:05:03,256:INFO:Set up folding strategy.
2024-09-30 20:05:03,256:INFO:Set up train/test split.
2024-09-30 20:05:03,265:INFO:Set up index.
2024-09-30 20:05:03,265:INFO:Assigning column types.
2024-09-30 20:05:03,268:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-30 20:05:03,305:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-30 20:05:03,311:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-30 20:05:03,349:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,351:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,395:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-30 20:05:03,395:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-30 20:05:03,417:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,421:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,421:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-30 20:05:03,461:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-30 20:05:03,484:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,487:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,526:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-30 20:05:03,551:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,554:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,554:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-30 20:05:03,619:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,622:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,693:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,697:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,700:INFO:Preparing preprocessing pipeline...
2024-09-30 20:05:03,700:INFO:Set up label encoding.
2024-09-30 20:05:03,700:INFO:Set up simple imputation.
2024-09-30 20:05:03,728:INFO:Finished creating preprocessing pipeline.
2024-09-30 20:05:03,731:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-09-30 20:05:03,731:INFO:Creating final display dataframe.
2024-09-30 20:05:03,826:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (5956, 4)
5        Transformed data shape         (5956, 4)
6   Transformed train set shape         (4169, 4)
7    Transformed test set shape         (1787, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              472a
2024-09-30 20:05:03,897:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,900:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,968:INFO:Soft dependency imported: xgboost: 2.1.1
2024-09-30 20:05:03,972:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-30 20:05:03,974:INFO:setup() successfully completed in 0.85s...............
2024-09-30 20:05:20,865:INFO:Initializing compare_models()
2024-09-30 20:05:20,868:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-09-30 20:05:20,868:INFO:Checking exceptions
2024-09-30 20:05:20,872:INFO:Preparing display monitor
2024-09-30 20:05:20,886:INFO:Initializing Logistic Regression
2024-09-30 20:05:20,887:INFO:Total runtime is 1.6005833943684897e-05 minutes
2024-09-30 20:05:20,887:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:20,889:INFO:Initializing create_model()
2024-09-30 20:05:20,889:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:20,889:INFO:Checking exceptions
2024-09-30 20:05:20,889:INFO:Importing libraries
2024-09-30 20:05:20,889:INFO:Copying training dataset
2024-09-30 20:05:20,894:INFO:Defining folds
2024-09-30 20:05:20,894:INFO:Declaring metric variables
2024-09-30 20:05:20,894:INFO:Importing untrained model
2024-09-30 20:05:20,894:INFO:Logistic Regression Imported successfully
2024-09-30 20:05:20,894:INFO:Starting cross validation
2024-09-30 20:05:20,894:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:25,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,765:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,765:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,768:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,777:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,781:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,786:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,786:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,786:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,786:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,791:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,792:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,808:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,812:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,816:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,821:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:25,849:INFO:Calculating mean and std
2024-09-30 20:05:25,855:INFO:Creating metrics dataframe
2024-09-30 20:05:25,858:INFO:Uploading results into container
2024-09-30 20:05:25,858:INFO:Uploading model into container now
2024-09-30 20:05:25,858:INFO:_master_model_container: 1
2024-09-30 20:05:25,861:INFO:_display_container: 2
2024-09-30 20:05:25,862:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-30 20:05:25,862:INFO:create_model() successfully completed......................................
2024-09-30 20:05:25,982:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:25,982:INFO:Creating metrics dataframe
2024-09-30 20:05:25,984:INFO:Initializing K Neighbors Classifier
2024-09-30 20:05:25,984:INFO:Total runtime is 0.08495440085728964 minutes
2024-09-30 20:05:25,984:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:25,984:INFO:Initializing create_model()
2024-09-30 20:05:25,984:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:25,984:INFO:Checking exceptions
2024-09-30 20:05:25,984:INFO:Importing libraries
2024-09-30 20:05:25,984:INFO:Copying training dataset
2024-09-30 20:05:25,990:INFO:Defining folds
2024-09-30 20:05:25,990:INFO:Declaring metric variables
2024-09-30 20:05:25,990:INFO:Importing untrained model
2024-09-30 20:05:25,990:INFO:K Neighbors Classifier Imported successfully
2024-09-30 20:05:25,990:INFO:Starting cross validation
2024-09-30 20:05:25,990:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:26,168:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,170:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,170:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,177:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,177:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,177:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,183:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,183:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,183:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,186:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,192:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:26,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,833:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,833:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,839:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,839:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,845:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,845:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,863:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,867:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,867:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,871:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,872:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,875:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,875:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,875:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,878:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,882:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:28,914:INFO:Calculating mean and std
2024-09-30 20:05:28,917:INFO:Creating metrics dataframe
2024-09-30 20:05:28,920:INFO:Uploading results into container
2024-09-30 20:05:28,921:INFO:Uploading model into container now
2024-09-30 20:05:28,921:INFO:_master_model_container: 2
2024-09-30 20:05:28,921:INFO:_display_container: 2
2024-09-30 20:05:28,921:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-30 20:05:28,921:INFO:create_model() successfully completed......................................
2024-09-30 20:05:29,013:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:29,013:INFO:Creating metrics dataframe
2024-09-30 20:05:29,013:INFO:Initializing Naive Bayes
2024-09-30 20:05:29,013:INFO:Total runtime is 0.13545210361480714 minutes
2024-09-30 20:05:29,013:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:29,016:INFO:Initializing create_model()
2024-09-30 20:05:29,016:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:29,016:INFO:Checking exceptions
2024-09-30 20:05:29,016:INFO:Importing libraries
2024-09-30 20:05:29,016:INFO:Copying training dataset
2024-09-30 20:05:29,019:INFO:Defining folds
2024-09-30 20:05:29,019:INFO:Declaring metric variables
2024-09-30 20:05:29,019:INFO:Importing untrained model
2024-09-30 20:05:29,019:INFO:Naive Bayes Imported successfully
2024-09-30 20:05:29,019:INFO:Starting cross validation
2024-09-30 20:05:29,019:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:29,066:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,075:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,081:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,082:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,082:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,090:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,090:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,094:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,094:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,097:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,097:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,101:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,103:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,112:INFO:Calculating mean and std
2024-09-30 20:05:29,112:INFO:Creating metrics dataframe
2024-09-30 20:05:29,112:INFO:Uploading results into container
2024-09-30 20:05:29,115:INFO:Uploading model into container now
2024-09-30 20:05:29,115:INFO:_master_model_container: 3
2024-09-30 20:05:29,115:INFO:_display_container: 2
2024-09-30 20:05:29,115:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-30 20:05:29,115:INFO:create_model() successfully completed......................................
2024-09-30 20:05:29,189:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:29,189:INFO:Creating metrics dataframe
2024-09-30 20:05:29,193:INFO:Initializing Decision Tree Classifier
2024-09-30 20:05:29,193:INFO:Total runtime is 0.1384379585584005 minutes
2024-09-30 20:05:29,193:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:29,193:INFO:Initializing create_model()
2024-09-30 20:05:29,193:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:29,193:INFO:Checking exceptions
2024-09-30 20:05:29,193:INFO:Importing libraries
2024-09-30 20:05:29,193:INFO:Copying training dataset
2024-09-30 20:05:29,196:INFO:Defining folds
2024-09-30 20:05:29,199:INFO:Declaring metric variables
2024-09-30 20:05:29,199:INFO:Importing untrained model
2024-09-30 20:05:29,199:INFO:Decision Tree Classifier Imported successfully
2024-09-30 20:05:29,199:INFO:Starting cross validation
2024-09-30 20:05:29,201:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:29,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,273:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,273:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,279:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,281:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,282:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,282:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,285:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,288:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,288:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,292:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,292:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,292:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,294:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,294:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,297:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,297:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,297:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,302:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,302:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,304:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,304:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,304:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,307:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,307:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,307:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,311:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,316:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,324:INFO:Calculating mean and std
2024-09-30 20:05:29,324:INFO:Creating metrics dataframe
2024-09-30 20:05:29,327:INFO:Uploading results into container
2024-09-30 20:05:29,327:INFO:Uploading model into container now
2024-09-30 20:05:29,327:INFO:_master_model_container: 4
2024-09-30 20:05:29,327:INFO:_display_container: 2
2024-09-30 20:05:29,327:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-09-30 20:05:29,327:INFO:create_model() successfully completed......................................
2024-09-30 20:05:29,407:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:29,407:INFO:Creating metrics dataframe
2024-09-30 20:05:29,410:INFO:Initializing SVM - Linear Kernel
2024-09-30 20:05:29,410:INFO:Total runtime is 0.14206602176030478 minutes
2024-09-30 20:05:29,411:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:29,411:INFO:Initializing create_model()
2024-09-30 20:05:29,411:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:29,411:INFO:Checking exceptions
2024-09-30 20:05:29,411:INFO:Importing libraries
2024-09-30 20:05:29,411:INFO:Copying training dataset
2024-09-30 20:05:29,413:INFO:Defining folds
2024-09-30 20:05:29,413:INFO:Declaring metric variables
2024-09-30 20:05:29,413:INFO:Importing untrained model
2024-09-30 20:05:29,413:INFO:SVM - Linear Kernel Imported successfully
2024-09-30 20:05:29,413:INFO:Starting cross validation
2024-09-30 20:05:29,416:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:29,481:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,481:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,492:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:29,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:29,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,502:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,502:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,505:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,505:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,505:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:29,505:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:29,508:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,508:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,523:INFO:Calculating mean and std
2024-09-30 20:05:29,523:INFO:Creating metrics dataframe
2024-09-30 20:05:29,526:INFO:Uploading results into container
2024-09-30 20:05:29,526:INFO:Uploading model into container now
2024-09-30 20:05:29,526:INFO:_master_model_container: 5
2024-09-30 20:05:29,526:INFO:_display_container: 2
2024-09-30 20:05:29,529:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-30 20:05:29,529:INFO:create_model() successfully completed......................................
2024-09-30 20:05:29,604:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:29,604:INFO:Creating metrics dataframe
2024-09-30 20:05:29,607:INFO:Initializing Ridge Classifier
2024-09-30 20:05:29,607:INFO:Total runtime is 0.14533757766087851 minutes
2024-09-30 20:05:29,607:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:29,607:INFO:Initializing create_model()
2024-09-30 20:05:29,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:29,607:INFO:Checking exceptions
2024-09-30 20:05:29,607:INFO:Importing libraries
2024-09-30 20:05:29,607:INFO:Copying training dataset
2024-09-30 20:05:29,610:INFO:Defining folds
2024-09-30 20:05:29,610:INFO:Declaring metric variables
2024-09-30 20:05:29,610:INFO:Importing untrained model
2024-09-30 20:05:29,610:INFO:Ridge Classifier Imported successfully
2024-09-30 20:05:29,611:INFO:Starting cross validation
2024-09-30 20:05:29,611:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:29,658:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,661:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,662:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,662:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,667:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,671:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,671:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,673:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,674:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,674:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,674:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,674:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,676:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,676:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,681:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,682:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,685:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:29,706:INFO:Calculating mean and std
2024-09-30 20:05:29,706:INFO:Creating metrics dataframe
2024-09-30 20:05:29,709:INFO:Uploading results into container
2024-09-30 20:05:29,711:INFO:Uploading model into container now
2024-09-30 20:05:29,711:INFO:_master_model_container: 6
2024-09-30 20:05:29,711:INFO:_display_container: 2
2024-09-30 20:05:29,713:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-09-30 20:05:29,713:INFO:create_model() successfully completed......................................
2024-09-30 20:05:29,788:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:29,788:INFO:Creating metrics dataframe
2024-09-30 20:05:29,792:INFO:Initializing Random Forest Classifier
2024-09-30 20:05:29,792:INFO:Total runtime is 0.14842923084894818 minutes
2024-09-30 20:05:29,792:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:29,792:INFO:Initializing create_model()
2024-09-30 20:05:29,792:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:29,792:INFO:Checking exceptions
2024-09-30 20:05:29,792:INFO:Importing libraries
2024-09-30 20:05:29,792:INFO:Copying training dataset
2024-09-30 20:05:29,795:INFO:Defining folds
2024-09-30 20:05:29,795:INFO:Declaring metric variables
2024-09-30 20:05:29,795:INFO:Importing untrained model
2024-09-30 20:05:29,795:INFO:Random Forest Classifier Imported successfully
2024-09-30 20:05:29,798:INFO:Starting cross validation
2024-09-30 20:05:29,798:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:30,426:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,442:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,442:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,442:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,444:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,450:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,450:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,451:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,451:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,459:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,462:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,462:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,462:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,472:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,472:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,472:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,474:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,526:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,629:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,635:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,647:INFO:Calculating mean and std
2024-09-30 20:05:30,647:INFO:Creating metrics dataframe
2024-09-30 20:05:30,651:INFO:Uploading results into container
2024-09-30 20:05:30,651:INFO:Uploading model into container now
2024-09-30 20:05:30,651:INFO:_master_model_container: 7
2024-09-30 20:05:30,651:INFO:_display_container: 2
2024-09-30 20:05:30,651:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-09-30 20:05:30,651:INFO:create_model() successfully completed......................................
2024-09-30 20:05:30,728:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:30,728:INFO:Creating metrics dataframe
2024-09-30 20:05:30,731:INFO:Initializing Quadratic Discriminant Analysis
2024-09-30 20:05:30,731:INFO:Total runtime is 0.16408100922902427 minutes
2024-09-30 20:05:30,732:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:30,732:INFO:Initializing create_model()
2024-09-30 20:05:30,732:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:30,732:INFO:Checking exceptions
2024-09-30 20:05:30,732:INFO:Importing libraries
2024-09-30 20:05:30,732:INFO:Copying training dataset
2024-09-30 20:05:30,734:INFO:Defining folds
2024-09-30 20:05:30,734:INFO:Declaring metric variables
2024-09-30 20:05:30,734:INFO:Importing untrained model
2024-09-30 20:05:30,734:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-30 20:05:30,734:INFO:Starting cross validation
2024-09-30 20:05:30,734:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:30,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,770:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,770:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,770:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,773:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,776:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,776:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:30,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,791:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,791:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,792:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,792:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,792:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,801:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,801:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,807:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,807:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,811:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,813:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,816:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:30,828:INFO:Calculating mean and std
2024-09-30 20:05:30,831:INFO:Creating metrics dataframe
2024-09-30 20:05:30,831:INFO:Uploading results into container
2024-09-30 20:05:30,831:INFO:Uploading model into container now
2024-09-30 20:05:30,834:INFO:_master_model_container: 8
2024-09-30 20:05:30,834:INFO:_display_container: 2
2024-09-30 20:05:30,834:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-30 20:05:30,834:INFO:create_model() successfully completed......................................
2024-09-30 20:05:30,912:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:30,912:INFO:Creating metrics dataframe
2024-09-30 20:05:30,915:INFO:Initializing Ada Boost Classifier
2024-09-30 20:05:30,915:INFO:Total runtime is 0.1671496589978536 minutes
2024-09-30 20:05:30,915:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:30,915:INFO:Initializing create_model()
2024-09-30 20:05:30,915:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:30,915:INFO:Checking exceptions
2024-09-30 20:05:30,915:INFO:Importing libraries
2024-09-30 20:05:30,915:INFO:Copying training dataset
2024-09-30 20:05:30,918:INFO:Defining folds
2024-09-30 20:05:30,918:INFO:Declaring metric variables
2024-09-30 20:05:30,918:INFO:Importing untrained model
2024-09-30 20:05:30,921:INFO:Ada Boost Classifier Imported successfully
2024-09-30 20:05:30,921:INFO:Starting cross validation
2024-09-30 20:05:30,922:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:30,948:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,952:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,952:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,952:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,957:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,961:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,961:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,961:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:30,961:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-30 20:05:31,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,217:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,217:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,217:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,221:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,224:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,226:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,226:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,229:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,229:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,232:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,232:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,235:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,241:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,244:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,244:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,247:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,247:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,251:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,253:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,253:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,256:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,256:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,256:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,256:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,259:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,261:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,262:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,280:INFO:Calculating mean and std
2024-09-30 20:05:31,282:INFO:Creating metrics dataframe
2024-09-30 20:05:31,284:INFO:Uploading results into container
2024-09-30 20:05:31,287:INFO:Uploading model into container now
2024-09-30 20:05:31,287:INFO:_master_model_container: 9
2024-09-30 20:05:31,287:INFO:_display_container: 2
2024-09-30 20:05:31,287:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-09-30 20:05:31,287:INFO:create_model() successfully completed......................................
2024-09-30 20:05:31,363:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:31,363:INFO:Creating metrics dataframe
2024-09-30 20:05:31,366:INFO:Initializing Gradient Boosting Classifier
2024-09-30 20:05:31,366:INFO:Total runtime is 0.1746683716773987 minutes
2024-09-30 20:05:31,366:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:31,366:INFO:Initializing create_model()
2024-09-30 20:05:31,366:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:31,366:INFO:Checking exceptions
2024-09-30 20:05:31,366:INFO:Importing libraries
2024-09-30 20:05:31,366:INFO:Copying training dataset
2024-09-30 20:05:31,371:INFO:Defining folds
2024-09-30 20:05:31,371:INFO:Declaring metric variables
2024-09-30 20:05:31,371:INFO:Importing untrained model
2024-09-30 20:05:31,372:INFO:Gradient Boosting Classifier Imported successfully
2024-09-30 20:05:31,372:INFO:Starting cross validation
2024-09-30 20:05:31,372:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:31,995:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:31,998:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,004:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,004:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,004:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,007:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,007:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,010:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,014:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,014:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,014:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,017:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,017:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,017:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,020:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,020:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,021:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,023:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,023:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,023:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,026:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,026:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,032:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,032:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,035:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,038:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,038:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,042:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,044:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,047:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,062:INFO:Calculating mean and std
2024-09-30 20:05:32,062:INFO:Creating metrics dataframe
2024-09-30 20:05:32,065:INFO:Uploading results into container
2024-09-30 20:05:32,065:INFO:Uploading model into container now
2024-09-30 20:05:32,065:INFO:_master_model_container: 10
2024-09-30 20:05:32,065:INFO:_display_container: 2
2024-09-30 20:05:32,065:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-30 20:05:32,065:INFO:create_model() successfully completed......................................
2024-09-30 20:05:32,145:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:32,145:INFO:Creating metrics dataframe
2024-09-30 20:05:32,148:INFO:Initializing Linear Discriminant Analysis
2024-09-30 20:05:32,148:INFO:Total runtime is 0.1876990874608358 minutes
2024-09-30 20:05:32,148:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:32,148:INFO:Initializing create_model()
2024-09-30 20:05:32,148:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:32,148:INFO:Checking exceptions
2024-09-30 20:05:32,148:INFO:Importing libraries
2024-09-30 20:05:32,148:INFO:Copying training dataset
2024-09-30 20:05:32,152:INFO:Defining folds
2024-09-30 20:05:32,152:INFO:Declaring metric variables
2024-09-30 20:05:32,152:INFO:Importing untrained model
2024-09-30 20:05:32,152:INFO:Linear Discriminant Analysis Imported successfully
2024-09-30 20:05:32,152:INFO:Starting cross validation
2024-09-30 20:05:32,152:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:32,193:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,201:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,208:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,208:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,208:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,208:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,211:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,211:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,211:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,211:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,217:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,217:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,217:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,220:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,221:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,221:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,221:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,223:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,245:INFO:Calculating mean and std
2024-09-30 20:05:32,245:INFO:Creating metrics dataframe
2024-09-30 20:05:32,248:INFO:Uploading results into container
2024-09-30 20:05:32,248:INFO:Uploading model into container now
2024-09-30 20:05:32,248:INFO:_master_model_container: 11
2024-09-30 20:05:32,248:INFO:_display_container: 2
2024-09-30 20:05:32,248:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-30 20:05:32,248:INFO:create_model() successfully completed......................................
2024-09-30 20:05:32,326:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:32,326:INFO:Creating metrics dataframe
2024-09-30 20:05:32,329:INFO:Initializing Extra Trees Classifier
2024-09-30 20:05:32,329:INFO:Total runtime is 0.19071989456812544 minutes
2024-09-30 20:05:32,329:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:32,329:INFO:Initializing create_model()
2024-09-30 20:05:32,329:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:32,329:INFO:Checking exceptions
2024-09-30 20:05:32,329:INFO:Importing libraries
2024-09-30 20:05:32,329:INFO:Copying training dataset
2024-09-30 20:05:32,333:INFO:Defining folds
2024-09-30 20:05:32,333:INFO:Declaring metric variables
2024-09-30 20:05:32,333:INFO:Importing untrained model
2024-09-30 20:05:32,333:INFO:Extra Trees Classifier Imported successfully
2024-09-30 20:05:32,333:INFO:Starting cross validation
2024-09-30 20:05:32,333:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:32,709:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,709:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,715:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,715:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,731:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,731:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,731:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,734:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,740:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,741:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,741:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,741:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,749:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,752:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,761:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,792:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:32,807:INFO:Calculating mean and std
2024-09-30 20:05:32,807:INFO:Creating metrics dataframe
2024-09-30 20:05:32,811:INFO:Uploading results into container
2024-09-30 20:05:32,811:INFO:Uploading model into container now
2024-09-30 20:05:32,811:INFO:_master_model_container: 12
2024-09-30 20:05:32,811:INFO:_display_container: 2
2024-09-30 20:05:32,811:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-09-30 20:05:32,811:INFO:create_model() successfully completed......................................
2024-09-30 20:05:32,901:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:32,903:INFO:Creating metrics dataframe
2024-09-30 20:05:32,903:INFO:Initializing Extreme Gradient Boosting
2024-09-30 20:05:32,903:INFO:Total runtime is 0.20028431018193565 minutes
2024-09-30 20:05:32,906:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:32,906:INFO:Initializing create_model()
2024-09-30 20:05:32,906:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:32,906:INFO:Checking exceptions
2024-09-30 20:05:32,906:INFO:Importing libraries
2024-09-30 20:05:32,906:INFO:Copying training dataset
2024-09-30 20:05:32,911:INFO:Defining folds
2024-09-30 20:05:32,911:INFO:Declaring metric variables
2024-09-30 20:05:32,912:INFO:Importing untrained model
2024-09-30 20:05:32,912:INFO:Extreme Gradient Boosting Imported successfully
2024-09-30 20:05:32,912:INFO:Starting cross validation
2024-09-30 20:05:32,912:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:33,812:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,812:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,814:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,820:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,820:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,821:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,821:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,821:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,823:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,826:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,826:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,826:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,829:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,829:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,833:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,833:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,836:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,839:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,839:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,839:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,844:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,844:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,844:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,847:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,847:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,851:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,851:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,851:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,853:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:33,875:INFO:Calculating mean and std
2024-09-30 20:05:33,875:INFO:Creating metrics dataframe
2024-09-30 20:05:33,878:INFO:Uploading results into container
2024-09-30 20:05:33,878:INFO:Uploading model into container now
2024-09-30 20:05:33,878:INFO:_master_model_container: 13
2024-09-30 20:05:33,878:INFO:_display_container: 2
2024-09-30 20:05:33,878:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-09-30 20:05:33,881:INFO:create_model() successfully completed......................................
2024-09-30 20:05:33,957:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:33,957:INFO:Creating metrics dataframe
2024-09-30 20:05:33,960:INFO:Initializing Light Gradient Boosting Machine
2024-09-30 20:05:33,961:INFO:Total runtime is 0.21792005697886152 minutes
2024-09-30 20:05:33,962:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:33,962:INFO:Initializing create_model()
2024-09-30 20:05:33,962:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:33,962:INFO:Checking exceptions
2024-09-30 20:05:33,962:INFO:Importing libraries
2024-09-30 20:05:33,962:INFO:Copying training dataset
2024-09-30 20:05:33,964:INFO:Defining folds
2024-09-30 20:05:33,964:INFO:Declaring metric variables
2024-09-30 20:05:33,964:INFO:Importing untrained model
2024-09-30 20:05:33,964:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-30 20:05:33,964:INFO:Starting cross validation
2024-09-30 20:05:33,964:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:34,756:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,762:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,762:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,768:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,772:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,777:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,777:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,786:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,823:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,832:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,835:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,841:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,844:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,853:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,902:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,904:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,913:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,916:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,921:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,964:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,973:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:34,979:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,008:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,014:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,021:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,048:INFO:Calculating mean and std
2024-09-30 20:05:35,048:INFO:Creating metrics dataframe
2024-09-30 20:05:35,054:INFO:Uploading results into container
2024-09-30 20:05:35,054:INFO:Uploading model into container now
2024-09-30 20:05:35,054:INFO:_master_model_container: 14
2024-09-30 20:05:35,054:INFO:_display_container: 2
2024-09-30 20:05:35,054:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-09-30 20:05:35,054:INFO:create_model() successfully completed......................................
2024-09-30 20:05:35,142:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:35,142:INFO:Creating metrics dataframe
2024-09-30 20:05:35,147:INFO:Initializing Dummy Classifier
2024-09-30 20:05:35,147:INFO:Total runtime is 0.23768544197082522 minutes
2024-09-30 20:05:35,147:INFO:SubProcess create_model() called ==================================
2024-09-30 20:05:35,147:INFO:Initializing create_model()
2024-09-30 20:05:35,147:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000168AD4CCD00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:35,147:INFO:Checking exceptions
2024-09-30 20:05:35,147:INFO:Importing libraries
2024-09-30 20:05:35,147:INFO:Copying training dataset
2024-09-30 20:05:35,151:INFO:Defining folds
2024-09-30 20:05:35,151:INFO:Declaring metric variables
2024-09-30 20:05:35,151:INFO:Importing untrained model
2024-09-30 20:05:35,151:INFO:Dummy Classifier Imported successfully
2024-09-30 20:05:35,153:INFO:Starting cross validation
2024-09-30 20:05:35,153:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-30 20:05:35,196:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,201:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,203:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,209:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,211:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,211:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,224:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,224:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,231:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-30 20:05:35,233:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-30 20:05:35,252:INFO:Calculating mean and std
2024-09-30 20:05:35,252:INFO:Creating metrics dataframe
2024-09-30 20:05:35,254:INFO:Uploading results into container
2024-09-30 20:05:35,257:INFO:Uploading model into container now
2024-09-30 20:05:35,257:INFO:_master_model_container: 15
2024-09-30 20:05:35,257:INFO:_display_container: 2
2024-09-30 20:05:35,257:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-09-30 20:05:35,257:INFO:create_model() successfully completed......................................
2024-09-30 20:05:35,341:INFO:SubProcess create_model() end ==================================
2024-09-30 20:05:35,341:INFO:Creating metrics dataframe
2024-09-30 20:05:35,346:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-09-30 20:05:35,349:INFO:Initializing create_model()
2024-09-30 20:05:35,349:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:35,349:INFO:Checking exceptions
2024-09-30 20:05:35,349:INFO:Importing libraries
2024-09-30 20:05:35,349:INFO:Copying training dataset
2024-09-30 20:05:35,352:INFO:Defining folds
2024-09-30 20:05:35,352:INFO:Declaring metric variables
2024-09-30 20:05:35,352:INFO:Importing untrained model
2024-09-30 20:05:35,352:INFO:Declaring custom model
2024-09-30 20:05:35,352:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-30 20:05:35,355:INFO:Cross validation set to False
2024-09-30 20:05:35,355:INFO:Fitting Model
2024-09-30 20:05:35,364:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:35,364:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-30 20:05:35,364:INFO:create_model() successfully completed......................................
2024-09-30 20:05:35,463:INFO:_master_model_container: 15
2024-09-30 20:05:35,463:INFO:_display_container: 2
2024-09-30 20:05:35,463:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-30 20:05:35,463:INFO:compare_models() successfully completed......................................
2024-09-30 20:05:57,654:INFO:Initializing finalize_model()
2024-09-30 20:05:57,654:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-30 20:05:57,657:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-30 20:05:57,660:INFO:Initializing create_model()
2024-09-30 20:05:57,661:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-30 20:05:57,661:INFO:Checking exceptions
2024-09-30 20:05:57,661:INFO:Importing libraries
2024-09-30 20:05:57,661:INFO:Copying training dataset
2024-09-30 20:05:57,661:INFO:Defining folds
2024-09-30 20:05:57,661:INFO:Declaring metric variables
2024-09-30 20:05:57,661:INFO:Importing untrained model
2024-09-30 20:05:57,661:INFO:Declaring custom model
2024-09-30 20:05:57,663:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-30 20:05:57,663:INFO:Cross validation set to False
2024-09-30 20:05:57,663:INFO:Fitting Model
2024-09-30 20:05:57,672:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-30 20:05:57,678:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-09-30 20:05:57,678:INFO:create_model() successfully completed......................................
2024-09-30 20:05:57,752:INFO:_master_model_container: 15
2024-09-30 20:05:57,752:INFO:_display_container: 2
2024-09-30 20:05:57,755:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-09-30 20:05:57,755:INFO:finalize_model() successfully completed......................................
2024-09-30 20:06:13,616:INFO:Initializing evaluate_model()
2024-09-30 20:06:13,616:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-30 20:06:13,638:INFO:Initializing plot_model()
2024-09-30 20:06:13,638:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, system=True)
2024-09-30 20:06:13,638:INFO:Checking exceptions
2024-09-30 20:06:13,641:INFO:Preloading libraries
2024-09-30 20:06:13,641:INFO:Copying training dataset
2024-09-30 20:06:13,641:INFO:Plot type: pipeline
2024-09-30 20:06:13,817:INFO:Visual Rendered Successfully
2024-09-30 20:06:13,896:INFO:plot_model() successfully completed......................................
2024-09-30 20:06:16,983:INFO:Initializing plot_model()
2024-09-30 20:06:16,983:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000168ACEB6BF0>, system=True)
2024-09-30 20:06:16,983:INFO:Checking exceptions
2024-09-30 20:06:16,986:INFO:Preloading libraries
2024-09-30 20:06:16,986:INFO:Copying training dataset
2024-09-30 20:06:16,986:INFO:Plot type: confusion_matrix
2024-09-30 20:06:17,073:INFO:Fitting Model
2024-09-30 20:06:17,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-09-30 20:06:17,073:INFO:Scoring test/hold-out set
2024-09-30 20:06:17,171:INFO:Visual Rendered Successfully
2024-09-30 20:06:17,242:INFO:plot_model() successfully completed......................................
2024-09-30 20:06:39,921:INFO:Initializing save_model()
2024-09-30 20:06:39,921:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-09-30 20:06:39,921:INFO:Adding model into prep_pipe
2024-09-30 20:06:39,921:WARNING:Only Model saved as it was a pipeline.
2024-09-30 20:06:39,924:INFO:best_emg_model.pkl saved in current working directory
2024-09-30 20:06:39,931:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-09-30 20:06:39,931:INFO:save_model() successfully completed......................................
2024-09-30 20:07:41,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:07:41,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:07:41,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:07:41,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:07:42,714:INFO:Initializing load_model()
2024-09-30 20:07:42,714:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-09-30 20:08:05,505:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:05,505:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:05,505:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:05,505:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:06,396:INFO:Initializing load_model()
2024-09-30 20:08:06,396:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-09-30 20:08:51,916:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:51,916:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:51,916:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:51,916:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:08:52,831:INFO:Initializing load_model()
2024-09-30 20:08:52,831:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-09-30 20:09:56,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:09:56,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:09:56,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:09:56,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:09:57,953:INFO:Initializing load_model()
2024-09-30 20:09:57,956:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-09-30 20:10:39,101:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:10:39,101:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:10:39,104:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:10:39,104:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:10:40,075:INFO:Initializing load_model()
2024-09-30 20:10:40,078:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-09-30 20:12:44,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:12:44,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:12:44,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:12:44,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:12:45,232:INFO:Initializing load_model()
2024-09-30 20:12:45,232:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-09-30 20:16:44,952:WARNING:C:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\decomposition\_fastica.py:626: RuntimeWarning: divide by zero encountered in divide
  K = (u / d).T[:n_components]  # see (6.33) p.140

2024-09-30 20:18:43,936:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:18:43,936:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:18:43,936:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:18:43,936:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:18:44,834:INFO:Initializing load_model()
2024-09-30 20:18:44,834:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-09-30 20:22:15,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:22:15,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:22:15,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:22:15,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-30 20:22:16,284:INFO:Initializing load_model()
2024-09-30 20:22:16,284:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-10-01 00:07:21,724:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-01 00:07:21,725:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-01 00:07:21,725:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-01 00:07:21,725:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-01 00:07:22,409:INFO:PyCaret ClassificationExperiment
2024-10-01 00:07:22,409:INFO:Logging name: clf-default-name
2024-10-01 00:07:22,409:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-01 00:07:22,409:INFO:version 3.3.2
2024-10-01 00:07:22,409:INFO:Initializing setup()
2024-10-01 00:07:22,409:INFO:self.USI: 92d0
2024-10-01 00:07:22,409:INFO:self._variable_keys: {'USI', 'pipeline', 'is_multiclass', 'n_jobs_param', 'exp_id', 'data', '_available_plots', 'memory', '_ml_usecase', 'html_param', 'seed', 'X_train', 'gpu_param', 'fold_generator', 'idx', 'X_test', 'fix_imbalance', 'gpu_n_jobs_param', 'target_param', 'y_test', 'log_plots_param', 'logging_param', 'fold_shuffle_param', 'y_train', 'y', 'X', 'fold_groups_param', 'exp_name_log'}
2024-10-01 00:07:22,409:INFO:Checking environment
2024-10-01 00:07:22,409:INFO:python_version: 3.10.14
2024-10-01 00:07:22,409:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-01 00:07:22,409:INFO:machine: AMD64
2024-10-01 00:07:22,409:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-01 00:07:22,414:INFO:Memory: svmem(total=16747855872, available=5393604608, percent=67.8, used=11354251264, free=5393604608)
2024-10-01 00:07:22,414:INFO:Physical Core: 8
2024-10-01 00:07:22,414:INFO:Logical Core: 16
2024-10-01 00:07:22,414:INFO:Checking libraries
2024-10-01 00:07:22,414:INFO:System:
2024-10-01 00:07:22,414:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-01 00:07:22,414:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-10-01 00:07:22,414:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-01 00:07:22,414:INFO:PyCaret required dependencies:
2024-10-01 00:07:22,445:INFO:                 pip: 24.2
2024-10-01 00:07:22,445:INFO:          setuptools: 75.1.0
2024-10-01 00:07:22,445:INFO:             pycaret: 3.3.2
2024-10-01 00:07:22,445:INFO:             IPython: 8.27.0
2024-10-01 00:07:22,445:INFO:          ipywidgets: 8.1.5
2024-10-01 00:07:22,445:INFO:                tqdm: 4.66.5
2024-10-01 00:07:22,445:INFO:               numpy: 1.26.4
2024-10-01 00:07:22,445:INFO:              pandas: 2.1.4
2024-10-01 00:07:22,445:INFO:              jinja2: 3.1.4
2024-10-01 00:07:22,445:INFO:               scipy: 1.11.4
2024-10-01 00:07:22,445:INFO:              joblib: 1.3.2
2024-10-01 00:07:22,445:INFO:             sklearn: 1.4.2
2024-10-01 00:07:22,445:INFO:                pyod: 2.0.2
2024-10-01 00:07:22,445:INFO:            imblearn: 0.12.3
2024-10-01 00:07:22,445:INFO:   category_encoders: 2.6.3
2024-10-01 00:07:22,445:INFO:            lightgbm: 4.5.0
2024-10-01 00:07:22,445:INFO:               numba: 0.60.0
2024-10-01 00:07:22,445:INFO:            requests: 2.32.3
2024-10-01 00:07:22,445:INFO:          matplotlib: 3.7.5
2024-10-01 00:07:22,445:INFO:          scikitplot: 0.3.7
2024-10-01 00:07:22,445:INFO:         yellowbrick: 1.5
2024-10-01 00:07:22,445:INFO:              plotly: 5.24.1
2024-10-01 00:07:22,445:INFO:    plotly-resampler: Not installed
2024-10-01 00:07:22,445:INFO:             kaleido: 0.2.1
2024-10-01 00:07:22,445:INFO:           schemdraw: 0.15
2024-10-01 00:07:22,445:INFO:         statsmodels: 0.14.3
2024-10-01 00:07:22,445:INFO:              sktime: 0.26.0
2024-10-01 00:07:22,445:INFO:               tbats: 1.1.3
2024-10-01 00:07:22,445:INFO:            pmdarima: 2.0.4
2024-10-01 00:07:22,445:INFO:              psutil: 6.0.0
2024-10-01 00:07:22,445:INFO:          markupsafe: 2.1.5
2024-10-01 00:07:22,446:INFO:             pickle5: Not installed
2024-10-01 00:07:22,446:INFO:         cloudpickle: 3.0.0
2024-10-01 00:07:22,446:INFO:         deprecation: 2.1.0
2024-10-01 00:07:22,446:INFO:              xxhash: 3.5.0
2024-10-01 00:07:22,446:INFO:           wurlitzer: Not installed
2024-10-01 00:07:22,446:INFO:PyCaret optional dependencies:
2024-10-01 00:07:22,512:INFO:                shap: Not installed
2024-10-01 00:07:22,513:INFO:           interpret: Not installed
2024-10-01 00:07:22,513:INFO:                umap: Not installed
2024-10-01 00:07:22,513:INFO:     ydata_profiling: Not installed
2024-10-01 00:07:22,513:INFO:  explainerdashboard: Not installed
2024-10-01 00:07:22,513:INFO:             autoviz: Not installed
2024-10-01 00:07:22,513:INFO:           fairlearn: Not installed
2024-10-01 00:07:22,513:INFO:          deepchecks: Not installed
2024-10-01 00:07:22,513:INFO:             xgboost: 2.1.1
2024-10-01 00:07:22,513:INFO:            catboost: Not installed
2024-10-01 00:07:22,513:INFO:              kmodes: Not installed
2024-10-01 00:07:22,513:INFO:             mlxtend: Not installed
2024-10-01 00:07:22,513:INFO:       statsforecast: Not installed
2024-10-01 00:07:22,513:INFO:        tune_sklearn: Not installed
2024-10-01 00:07:22,513:INFO:                 ray: Not installed
2024-10-01 00:07:22,513:INFO:            hyperopt: Not installed
2024-10-01 00:07:22,513:INFO:              optuna: Not installed
2024-10-01 00:07:22,514:INFO:               skopt: Not installed
2024-10-01 00:07:22,514:INFO:              mlflow: Not installed
2024-10-01 00:07:22,514:INFO:              gradio: Not installed
2024-10-01 00:07:22,514:INFO:             fastapi: Not installed
2024-10-01 00:07:22,514:INFO:             uvicorn: Not installed
2024-10-01 00:07:22,514:INFO:              m2cgen: Not installed
2024-10-01 00:07:22,514:INFO:           evidently: Not installed
2024-10-01 00:07:22,514:INFO:               fugue: Not installed
2024-10-01 00:07:22,514:INFO:           streamlit: Not installed
2024-10-01 00:07:22,514:INFO:             prophet: Not installed
2024-10-01 00:07:22,514:INFO:None
2024-10-01 00:07:22,514:INFO:Set up data.
2024-10-01 00:07:22,528:INFO:Set up folding strategy.
2024-10-01 00:07:22,528:INFO:Set up train/test split.
2024-10-01 00:07:22,540:INFO:Set up index.
2024-10-01 00:07:22,542:INFO:Assigning column types.
2024-10-01 00:07:22,546:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-01 00:07:22,583:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-01 00:07:22,589:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-01 00:07:22,631:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:22,633:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:22,668:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-01 00:07:22,669:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-01 00:07:22,690:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:22,692:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:22,692:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-01 00:07:22,729:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-01 00:07:22,756:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:22,761:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:22,800:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-01 00:07:22,824:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:22,826:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:22,827:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-01 00:07:22,886:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:22,888:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:22,948:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:22,951:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:22,952:INFO:Preparing preprocessing pipeline...
2024-10-01 00:07:22,955:INFO:Set up label encoding.
2024-10-01 00:07:22,955:INFO:Set up simple imputation.
2024-10-01 00:07:22,976:INFO:Finished creating preprocessing pipeline.
2024-10-01 00:07:22,983:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-01 00:07:22,983:INFO:Creating final display dataframe.
2024-10-01 00:07:23,044:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (5956, 4)
5        Transformed data shape         (5956, 4)
6   Transformed train set shape         (4169, 4)
7    Transformed test set shape         (1787, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              92d0
2024-10-01 00:07:23,103:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:23,105:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:23,164:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-01 00:07:23,166:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-01 00:07:23,167:INFO:setup() successfully completed in 0.77s...............
2024-10-01 00:07:28,928:INFO:Initializing compare_models()
2024-10-01 00:07:28,928:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-01 00:07:28,928:INFO:Checking exceptions
2024-10-01 00:07:28,932:INFO:Preparing display monitor
2024-10-01 00:07:28,937:INFO:Initializing Logistic Regression
2024-10-01 00:07:28,938:INFO:Total runtime is 1.638333002726237e-05 minutes
2024-10-01 00:07:28,938:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:28,938:INFO:Initializing create_model()
2024-10-01 00:07:28,938:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:28,939:INFO:Checking exceptions
2024-10-01 00:07:28,939:INFO:Importing libraries
2024-10-01 00:07:28,939:INFO:Copying training dataset
2024-10-01 00:07:28,942:INFO:Defining folds
2024-10-01 00:07:28,942:INFO:Declaring metric variables
2024-10-01 00:07:28,942:INFO:Importing untrained model
2024-10-01 00:07:28,942:INFO:Logistic Regression Imported successfully
2024-10-01 00:07:28,943:INFO:Starting cross validation
2024-10-01 00:07:28,944:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:33,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,183:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,191:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,259:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,267:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,271:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,277:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,278:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,286:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,298:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,306:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,306:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,308:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,311:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,313:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,314:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,316:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,319:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,321:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,321:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,324:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,326:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,328:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,330:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,334:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,336:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,337:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,343:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,344:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,351:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,379:INFO:Calculating mean and std
2024-10-01 00:07:33,382:INFO:Creating metrics dataframe
2024-10-01 00:07:33,386:INFO:Uploading results into container
2024-10-01 00:07:33,386:INFO:Uploading model into container now
2024-10-01 00:07:33,387:INFO:_master_model_container: 1
2024-10-01 00:07:33,387:INFO:_display_container: 2
2024-10-01 00:07:33,388:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-01 00:07:33,388:INFO:create_model() successfully completed......................................
2024-10-01 00:07:33,495:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:33,495:INFO:Creating metrics dataframe
2024-10-01 00:07:33,497:INFO:Initializing K Neighbors Classifier
2024-10-01 00:07:33,498:INFO:Total runtime is 0.07603008349736531 minutes
2024-10-01 00:07:33,498:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:33,498:INFO:Initializing create_model()
2024-10-01 00:07:33,498:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:33,498:INFO:Checking exceptions
2024-10-01 00:07:33,498:INFO:Importing libraries
2024-10-01 00:07:33,498:INFO:Copying training dataset
2024-10-01 00:07:33,502:INFO:Defining folds
2024-10-01 00:07:33,502:INFO:Declaring metric variables
2024-10-01 00:07:33,503:INFO:Importing untrained model
2024-10-01 00:07:33,503:INFO:K Neighbors Classifier Imported successfully
2024-10-01 00:07:33,503:INFO:Starting cross validation
2024-10-01 00:07:33,504:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:33,656:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,656:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,657:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,657:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,663:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,663:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,671:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,671:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:33,671:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,885:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,885:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,885:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,885:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,888:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,889:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,889:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,889:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,889:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,889:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,893:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,893:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:35,909:INFO:Calculating mean and std
2024-10-01 00:07:35,910:INFO:Creating metrics dataframe
2024-10-01 00:07:35,913:INFO:Uploading results into container
2024-10-01 00:07:35,914:INFO:Uploading model into container now
2024-10-01 00:07:35,915:INFO:_master_model_container: 2
2024-10-01 00:07:35,915:INFO:_display_container: 2
2024-10-01 00:07:35,916:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-01 00:07:35,916:INFO:create_model() successfully completed......................................
2024-10-01 00:07:36,008:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:36,008:INFO:Creating metrics dataframe
2024-10-01 00:07:36,011:INFO:Initializing Naive Bayes
2024-10-01 00:07:36,011:INFO:Total runtime is 0.11790314118067424 minutes
2024-10-01 00:07:36,011:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:36,011:INFO:Initializing create_model()
2024-10-01 00:07:36,011:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:36,011:INFO:Checking exceptions
2024-10-01 00:07:36,011:INFO:Importing libraries
2024-10-01 00:07:36,011:INFO:Copying training dataset
2024-10-01 00:07:36,015:INFO:Defining folds
2024-10-01 00:07:36,015:INFO:Declaring metric variables
2024-10-01 00:07:36,015:INFO:Importing untrained model
2024-10-01 00:07:36,015:INFO:Naive Bayes Imported successfully
2024-10-01 00:07:36,016:INFO:Starting cross validation
2024-10-01 00:07:36,016:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:36,056:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,057:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,060:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,061:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,061:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,062:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,062:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,063:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,064:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,065:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,068:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,069:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,071:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,072:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,074:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,075:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,076:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,079:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,080:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,083:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,097:INFO:Calculating mean and std
2024-10-01 00:07:36,097:INFO:Creating metrics dataframe
2024-10-01 00:07:36,099:INFO:Uploading results into container
2024-10-01 00:07:36,099:INFO:Uploading model into container now
2024-10-01 00:07:36,100:INFO:_master_model_container: 3
2024-10-01 00:07:36,100:INFO:_display_container: 2
2024-10-01 00:07:36,100:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-01 00:07:36,100:INFO:create_model() successfully completed......................................
2024-10-01 00:07:36,165:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:36,165:INFO:Creating metrics dataframe
2024-10-01 00:07:36,169:INFO:Initializing Decision Tree Classifier
2024-10-01 00:07:36,169:INFO:Total runtime is 0.12053922812143962 minutes
2024-10-01 00:07:36,169:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:36,169:INFO:Initializing create_model()
2024-10-01 00:07:36,169:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:36,169:INFO:Checking exceptions
2024-10-01 00:07:36,169:INFO:Importing libraries
2024-10-01 00:07:36,169:INFO:Copying training dataset
2024-10-01 00:07:36,173:INFO:Defining folds
2024-10-01 00:07:36,173:INFO:Declaring metric variables
2024-10-01 00:07:36,173:INFO:Importing untrained model
2024-10-01 00:07:36,174:INFO:Decision Tree Classifier Imported successfully
2024-10-01 00:07:36,174:INFO:Starting cross validation
2024-10-01 00:07:36,175:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:36,229:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,233:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,233:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,233:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,236:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,237:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,237:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,239:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,242:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,243:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,244:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,245:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,248:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,249:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,253:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,255:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,256:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,258:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,259:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,261:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,262:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,263:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,263:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,265:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,267:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,267:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,271:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,286:INFO:Calculating mean and std
2024-10-01 00:07:36,287:INFO:Creating metrics dataframe
2024-10-01 00:07:36,289:INFO:Uploading results into container
2024-10-01 00:07:36,290:INFO:Uploading model into container now
2024-10-01 00:07:36,290:INFO:_master_model_container: 4
2024-10-01 00:07:36,290:INFO:_display_container: 2
2024-10-01 00:07:36,291:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-01 00:07:36,291:INFO:create_model() successfully completed......................................
2024-10-01 00:07:36,354:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:36,354:INFO:Creating metrics dataframe
2024-10-01 00:07:36,356:INFO:Initializing SVM - Linear Kernel
2024-10-01 00:07:36,357:INFO:Total runtime is 0.1236815651257833 minutes
2024-10-01 00:07:36,357:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:36,357:INFO:Initializing create_model()
2024-10-01 00:07:36,357:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:36,357:INFO:Checking exceptions
2024-10-01 00:07:36,357:INFO:Importing libraries
2024-10-01 00:07:36,357:INFO:Copying training dataset
2024-10-01 00:07:36,360:INFO:Defining folds
2024-10-01 00:07:36,360:INFO:Declaring metric variables
2024-10-01 00:07:36,360:INFO:Importing untrained model
2024-10-01 00:07:36,361:INFO:SVM - Linear Kernel Imported successfully
2024-10-01 00:07:36,361:INFO:Starting cross validation
2024-10-01 00:07:36,361:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:36,409:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,413:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,413:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,413:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,414:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,416:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,418:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,419:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,419:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,419:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:36,420:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,421:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,422:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,423:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,423:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,424:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,424:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,424:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:36,425:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,426:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,427:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,428:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,429:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,429:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,429:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,431:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:36,432:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,432:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:36,433:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,435:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,436:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,436:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,442:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,445:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:36,448:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,459:INFO:Calculating mean and std
2024-10-01 00:07:36,461:INFO:Creating metrics dataframe
2024-10-01 00:07:36,464:INFO:Uploading results into container
2024-10-01 00:07:36,464:INFO:Uploading model into container now
2024-10-01 00:07:36,464:INFO:_master_model_container: 5
2024-10-01 00:07:36,464:INFO:_display_container: 2
2024-10-01 00:07:36,465:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-01 00:07:36,465:INFO:create_model() successfully completed......................................
2024-10-01 00:07:36,537:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:36,537:INFO:Creating metrics dataframe
2024-10-01 00:07:36,539:INFO:Initializing Ridge Classifier
2024-10-01 00:07:36,539:INFO:Total runtime is 0.12670686244964602 minutes
2024-10-01 00:07:36,539:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:36,539:INFO:Initializing create_model()
2024-10-01 00:07:36,539:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:36,539:INFO:Checking exceptions
2024-10-01 00:07:36,539:INFO:Importing libraries
2024-10-01 00:07:36,539:INFO:Copying training dataset
2024-10-01 00:07:36,542:INFO:Defining folds
2024-10-01 00:07:36,542:INFO:Declaring metric variables
2024-10-01 00:07:36,542:INFO:Importing untrained model
2024-10-01 00:07:36,542:INFO:Ridge Classifier Imported successfully
2024-10-01 00:07:36,543:INFO:Starting cross validation
2024-10-01 00:07:36,543:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:36,584:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,584:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,585:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,588:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,588:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,588:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,590:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,590:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,591:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,591:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,592:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,592:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,593:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,594:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,594:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,594:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,596:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,596:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,599:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,600:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,600:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,601:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,602:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:36,617:INFO:Calculating mean and std
2024-10-01 00:07:36,618:INFO:Creating metrics dataframe
2024-10-01 00:07:36,620:INFO:Uploading results into container
2024-10-01 00:07:36,620:INFO:Uploading model into container now
2024-10-01 00:07:36,621:INFO:_master_model_container: 6
2024-10-01 00:07:36,621:INFO:_display_container: 2
2024-10-01 00:07:36,621:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-01 00:07:36,621:INFO:create_model() successfully completed......................................
2024-10-01 00:07:36,686:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:36,686:INFO:Creating metrics dataframe
2024-10-01 00:07:36,688:INFO:Initializing Random Forest Classifier
2024-10-01 00:07:36,689:INFO:Total runtime is 0.12920103470484418 minutes
2024-10-01 00:07:36,689:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:36,689:INFO:Initializing create_model()
2024-10-01 00:07:36,689:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:36,689:INFO:Checking exceptions
2024-10-01 00:07:36,689:INFO:Importing libraries
2024-10-01 00:07:36,689:INFO:Copying training dataset
2024-10-01 00:07:36,692:INFO:Defining folds
2024-10-01 00:07:36,692:INFO:Declaring metric variables
2024-10-01 00:07:36,692:INFO:Importing untrained model
2024-10-01 00:07:36,692:INFO:Random Forest Classifier Imported successfully
2024-10-01 00:07:36,692:INFO:Starting cross validation
2024-10-01 00:07:36,693:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:37,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,213:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,219:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,219:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,219:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,220:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,221:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,225:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,225:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,226:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,226:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,227:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,242:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,242:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,242:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,247:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,248:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,251:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,253:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,254:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,258:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,262:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,337:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,340:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,360:INFO:Calculating mean and std
2024-10-01 00:07:37,361:INFO:Creating metrics dataframe
2024-10-01 00:07:37,363:INFO:Uploading results into container
2024-10-01 00:07:37,363:INFO:Uploading model into container now
2024-10-01 00:07:37,363:INFO:_master_model_container: 7
2024-10-01 00:07:37,364:INFO:_display_container: 2
2024-10-01 00:07:37,364:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-01 00:07:37,364:INFO:create_model() successfully completed......................................
2024-10-01 00:07:37,430:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:37,430:INFO:Creating metrics dataframe
2024-10-01 00:07:37,432:INFO:Initializing Quadratic Discriminant Analysis
2024-10-01 00:07:37,433:INFO:Total runtime is 0.14160262346267702 minutes
2024-10-01 00:07:37,433:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:37,433:INFO:Initializing create_model()
2024-10-01 00:07:37,433:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:37,433:INFO:Checking exceptions
2024-10-01 00:07:37,433:INFO:Importing libraries
2024-10-01 00:07:37,433:INFO:Copying training dataset
2024-10-01 00:07:37,435:INFO:Defining folds
2024-10-01 00:07:37,435:INFO:Declaring metric variables
2024-10-01 00:07:37,436:INFO:Importing untrained model
2024-10-01 00:07:37,436:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-01 00:07:37,436:INFO:Starting cross validation
2024-10-01 00:07:37,436:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:37,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,467:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,469:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,469:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,471:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,471:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:37,477:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,478:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,478:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,480:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,480:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,480:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,481:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,483:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,485:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,485:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,485:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,487:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,487:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,487:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,488:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,491:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,491:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,491:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,492:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,495:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,498:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,518:INFO:Calculating mean and std
2024-10-01 00:07:37,519:INFO:Creating metrics dataframe
2024-10-01 00:07:37,521:INFO:Uploading results into container
2024-10-01 00:07:37,523:INFO:Uploading model into container now
2024-10-01 00:07:37,523:INFO:_master_model_container: 8
2024-10-01 00:07:37,523:INFO:_display_container: 2
2024-10-01 00:07:37,524:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-01 00:07:37,524:INFO:create_model() successfully completed......................................
2024-10-01 00:07:37,592:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:37,592:INFO:Creating metrics dataframe
2024-10-01 00:07:37,594:INFO:Initializing Ada Boost Classifier
2024-10-01 00:07:37,594:INFO:Total runtime is 0.14428694645563764 minutes
2024-10-01 00:07:37,594:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:37,595:INFO:Initializing create_model()
2024-10-01 00:07:37,595:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:37,595:INFO:Checking exceptions
2024-10-01 00:07:37,595:INFO:Importing libraries
2024-10-01 00:07:37,595:INFO:Copying training dataset
2024-10-01 00:07:37,598:INFO:Defining folds
2024-10-01 00:07:37,598:INFO:Declaring metric variables
2024-10-01 00:07:37,598:INFO:Importing untrained model
2024-10-01 00:07:37,598:INFO:Ada Boost Classifier Imported successfully
2024-10-01 00:07:37,598:INFO:Starting cross validation
2024-10-01 00:07:37,599:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:37,622:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,625:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,628:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,628:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,628:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,630:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,632:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,632:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,634:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-01 00:07:37,827:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,834:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,835:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,836:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,839:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,840:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,841:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,843:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,847:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,847:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,848:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,849:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,849:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,850:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,850:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,851:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,853:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,853:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,854:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,854:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,856:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,856:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,856:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,858:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,859:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,859:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,860:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,860:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,862:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,864:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:37,882:INFO:Calculating mean and std
2024-10-01 00:07:37,883:INFO:Creating metrics dataframe
2024-10-01 00:07:37,885:INFO:Uploading results into container
2024-10-01 00:07:37,885:INFO:Uploading model into container now
2024-10-01 00:07:37,885:INFO:_master_model_container: 9
2024-10-01 00:07:37,886:INFO:_display_container: 2
2024-10-01 00:07:37,886:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-01 00:07:37,886:INFO:create_model() successfully completed......................................
2024-10-01 00:07:37,951:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:37,951:INFO:Creating metrics dataframe
2024-10-01 00:07:37,953:INFO:Initializing Gradient Boosting Classifier
2024-10-01 00:07:37,953:INFO:Total runtime is 0.1502815167109172 minutes
2024-10-01 00:07:37,953:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:37,954:INFO:Initializing create_model()
2024-10-01 00:07:37,954:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:37,954:INFO:Checking exceptions
2024-10-01 00:07:37,954:INFO:Importing libraries
2024-10-01 00:07:37,954:INFO:Copying training dataset
2024-10-01 00:07:37,956:INFO:Defining folds
2024-10-01 00:07:37,956:INFO:Declaring metric variables
2024-10-01 00:07:37,956:INFO:Importing untrained model
2024-10-01 00:07:37,957:INFO:Gradient Boosting Classifier Imported successfully
2024-10-01 00:07:37,957:INFO:Starting cross validation
2024-10-01 00:07:37,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:38,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,452:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,452:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,459:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,459:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,462:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,463:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,463:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,468:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,468:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,468:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,470:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,472:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,473:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,475:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,476:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,479:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,480:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,484:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,484:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,487:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,488:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,514:INFO:Calculating mean and std
2024-10-01 00:07:38,515:INFO:Creating metrics dataframe
2024-10-01 00:07:38,517:INFO:Uploading results into container
2024-10-01 00:07:38,517:INFO:Uploading model into container now
2024-10-01 00:07:38,518:INFO:_master_model_container: 10
2024-10-01 00:07:38,518:INFO:_display_container: 2
2024-10-01 00:07:38,518:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-01 00:07:38,518:INFO:create_model() successfully completed......................................
2024-10-01 00:07:38,584:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:38,584:INFO:Creating metrics dataframe
2024-10-01 00:07:38,587:INFO:Initializing Linear Discriminant Analysis
2024-10-01 00:07:38,587:INFO:Total runtime is 0.1608421881993612 minutes
2024-10-01 00:07:38,587:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:38,587:INFO:Initializing create_model()
2024-10-01 00:07:38,587:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:38,587:INFO:Checking exceptions
2024-10-01 00:07:38,587:INFO:Importing libraries
2024-10-01 00:07:38,587:INFO:Copying training dataset
2024-10-01 00:07:38,590:INFO:Defining folds
2024-10-01 00:07:38,590:INFO:Declaring metric variables
2024-10-01 00:07:38,590:INFO:Importing untrained model
2024-10-01 00:07:38,590:INFO:Linear Discriminant Analysis Imported successfully
2024-10-01 00:07:38,590:INFO:Starting cross validation
2024-10-01 00:07:38,591:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:38,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,632:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,634:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,634:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,636:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,637:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,637:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,637:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,638:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,638:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,640:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,640:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,640:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,643:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,643:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,643:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,643:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,644:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,644:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,645:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,646:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,649:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,650:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,650:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,656:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,656:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:38,672:INFO:Calculating mean and std
2024-10-01 00:07:38,673:INFO:Creating metrics dataframe
2024-10-01 00:07:38,675:INFO:Uploading results into container
2024-10-01 00:07:38,675:INFO:Uploading model into container now
2024-10-01 00:07:38,676:INFO:_master_model_container: 11
2024-10-01 00:07:38,676:INFO:_display_container: 2
2024-10-01 00:07:38,676:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-01 00:07:38,676:INFO:create_model() successfully completed......................................
2024-10-01 00:07:38,741:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:38,741:INFO:Creating metrics dataframe
2024-10-01 00:07:38,743:INFO:Initializing Extra Trees Classifier
2024-10-01 00:07:38,743:INFO:Total runtime is 0.1634382247924805 minutes
2024-10-01 00:07:38,743:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:38,744:INFO:Initializing create_model()
2024-10-01 00:07:38,744:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:38,744:INFO:Checking exceptions
2024-10-01 00:07:38,744:INFO:Importing libraries
2024-10-01 00:07:38,744:INFO:Copying training dataset
2024-10-01 00:07:38,746:INFO:Defining folds
2024-10-01 00:07:38,746:INFO:Declaring metric variables
2024-10-01 00:07:38,746:INFO:Importing untrained model
2024-10-01 00:07:38,747:INFO:Extra Trees Classifier Imported successfully
2024-10-01 00:07:38,747:INFO:Starting cross validation
2024-10-01 00:07:38,748:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:39,038:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,039:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,046:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,046:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,053:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,053:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,055:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,055:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,056:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,056:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,061:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,061:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,061:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,062:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,083:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,083:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,090:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,091:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,091:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,130:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,133:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,137:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:39,156:INFO:Calculating mean and std
2024-10-01 00:07:39,157:INFO:Creating metrics dataframe
2024-10-01 00:07:39,158:INFO:Uploading results into container
2024-10-01 00:07:39,159:INFO:Uploading model into container now
2024-10-01 00:07:39,159:INFO:_master_model_container: 12
2024-10-01 00:07:39,159:INFO:_display_container: 2
2024-10-01 00:07:39,160:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-01 00:07:39,160:INFO:create_model() successfully completed......................................
2024-10-01 00:07:39,224:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:39,224:INFO:Creating metrics dataframe
2024-10-01 00:07:39,226:INFO:Initializing Extreme Gradient Boosting
2024-10-01 00:07:39,226:INFO:Total runtime is 0.17148449818293257 minutes
2024-10-01 00:07:39,226:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:39,227:INFO:Initializing create_model()
2024-10-01 00:07:39,227:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:39,227:INFO:Checking exceptions
2024-10-01 00:07:39,227:INFO:Importing libraries
2024-10-01 00:07:39,227:INFO:Copying training dataset
2024-10-01 00:07:39,229:INFO:Defining folds
2024-10-01 00:07:39,229:INFO:Declaring metric variables
2024-10-01 00:07:39,229:INFO:Importing untrained model
2024-10-01 00:07:39,230:INFO:Extreme Gradient Boosting Imported successfully
2024-10-01 00:07:39,230:INFO:Starting cross validation
2024-10-01 00:07:39,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:40,586:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,588:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,591:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,594:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,600:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,601:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,601:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,603:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,606:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,606:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,609:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,612:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,618:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,619:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,622:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,625:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:40,631:INFO:Calculating mean and std
2024-10-01 00:07:40,632:INFO:Creating metrics dataframe
2024-10-01 00:07:40,633:INFO:Uploading results into container
2024-10-01 00:07:40,634:INFO:Uploading model into container now
2024-10-01 00:07:40,635:INFO:_master_model_container: 13
2024-10-01 00:07:40,635:INFO:_display_container: 2
2024-10-01 00:07:40,636:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-01 00:07:40,636:INFO:create_model() successfully completed......................................
2024-10-01 00:07:40,699:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:40,699:INFO:Creating metrics dataframe
2024-10-01 00:07:40,701:INFO:Initializing Light Gradient Boosting Machine
2024-10-01 00:07:40,701:INFO:Total runtime is 0.1960652867952983 minutes
2024-10-01 00:07:40,702:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:40,702:INFO:Initializing create_model()
2024-10-01 00:07:40,702:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:40,702:INFO:Checking exceptions
2024-10-01 00:07:40,702:INFO:Importing libraries
2024-10-01 00:07:40,702:INFO:Copying training dataset
2024-10-01 00:07:40,704:INFO:Defining folds
2024-10-01 00:07:40,704:INFO:Declaring metric variables
2024-10-01 00:07:40,705:INFO:Importing untrained model
2024-10-01 00:07:40,705:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-01 00:07:40,705:INFO:Starting cross validation
2024-10-01 00:07:40,706:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:41,526:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,536:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,547:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,548:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,554:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,555:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,561:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,569:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,578:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,609:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,617:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,626:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,634:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,636:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,641:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,643:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,651:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,669:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,677:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,687:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,691:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,699:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,711:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,723:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,736:INFO:Calculating mean and std
2024-10-01 00:07:41,737:INFO:Creating metrics dataframe
2024-10-01 00:07:41,740:INFO:Uploading results into container
2024-10-01 00:07:41,741:INFO:Uploading model into container now
2024-10-01 00:07:41,741:INFO:_master_model_container: 14
2024-10-01 00:07:41,741:INFO:_display_container: 2
2024-10-01 00:07:41,742:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-01 00:07:41,742:INFO:create_model() successfully completed......................................
2024-10-01 00:07:41,843:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:41,843:INFO:Creating metrics dataframe
2024-10-01 00:07:41,846:INFO:Initializing Dummy Classifier
2024-10-01 00:07:41,847:INFO:Total runtime is 0.2151684165000916 minutes
2024-10-01 00:07:41,847:INFO:SubProcess create_model() called ==================================
2024-10-01 00:07:41,847:INFO:Initializing create_model()
2024-10-01 00:07:41,847:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024FCB64FDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:41,847:INFO:Checking exceptions
2024-10-01 00:07:41,847:INFO:Importing libraries
2024-10-01 00:07:41,847:INFO:Copying training dataset
2024-10-01 00:07:41,851:INFO:Defining folds
2024-10-01 00:07:41,851:INFO:Declaring metric variables
2024-10-01 00:07:41,852:INFO:Importing untrained model
2024-10-01 00:07:41,852:INFO:Dummy Classifier Imported successfully
2024-10-01 00:07:41,852:INFO:Starting cross validation
2024-10-01 00:07:41,853:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-01 00:07:41,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,888:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,893:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,893:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,896:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,896:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,897:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,898:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,899:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,899:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,901:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,901:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,901:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,902:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,902:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,902:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,903:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,904:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,904:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,904:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,906:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,906:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,907:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,907:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,907:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,908:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,908:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,909:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-01 00:07:41,912:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,912:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,913:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-01 00:07:41,925:INFO:Calculating mean and std
2024-10-01 00:07:41,926:INFO:Creating metrics dataframe
2024-10-01 00:07:41,927:INFO:Uploading results into container
2024-10-01 00:07:41,927:INFO:Uploading model into container now
2024-10-01 00:07:41,928:INFO:_master_model_container: 15
2024-10-01 00:07:41,928:INFO:_display_container: 2
2024-10-01 00:07:41,928:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-01 00:07:41,928:INFO:create_model() successfully completed......................................
2024-10-01 00:07:42,003:INFO:SubProcess create_model() end ==================================
2024-10-01 00:07:42,003:INFO:Creating metrics dataframe
2024-10-01 00:07:42,009:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-01 00:07:42,011:INFO:Initializing create_model()
2024-10-01 00:07:42,011:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:42,011:INFO:Checking exceptions
2024-10-01 00:07:42,012:INFO:Importing libraries
2024-10-01 00:07:42,012:INFO:Copying training dataset
2024-10-01 00:07:42,015:INFO:Defining folds
2024-10-01 00:07:42,015:INFO:Declaring metric variables
2024-10-01 00:07:42,015:INFO:Importing untrained model
2024-10-01 00:07:42,015:INFO:Declaring custom model
2024-10-01 00:07:42,015:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-01 00:07:42,016:INFO:Cross validation set to False
2024-10-01 00:07:42,016:INFO:Fitting Model
2024-10-01 00:07:42,024:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:42,024:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-01 00:07:42,024:INFO:create_model() successfully completed......................................
2024-10-01 00:07:42,097:INFO:_master_model_container: 15
2024-10-01 00:07:42,097:INFO:_display_container: 2
2024-10-01 00:07:42,097:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-01 00:07:42,098:INFO:compare_models() successfully completed......................................
2024-10-01 00:07:55,526:INFO:Initializing finalize_model()
2024-10-01 00:07:55,526:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-01 00:07:55,527:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-01 00:07:55,530:INFO:Initializing create_model()
2024-10-01 00:07:55,530:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-01 00:07:55,530:INFO:Checking exceptions
2024-10-01 00:07:55,531:INFO:Importing libraries
2024-10-01 00:07:55,531:INFO:Copying training dataset
2024-10-01 00:07:55,532:INFO:Defining folds
2024-10-01 00:07:55,532:INFO:Declaring metric variables
2024-10-01 00:07:55,532:INFO:Importing untrained model
2024-10-01 00:07:55,532:INFO:Declaring custom model
2024-10-01 00:07:55,532:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-01 00:07:55,533:INFO:Cross validation set to False
2024-10-01 00:07:55,533:INFO:Fitting Model
2024-10-01 00:07:55,541:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:07:55,547:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-01 00:07:55,548:INFO:create_model() successfully completed......................................
2024-10-01 00:07:55,614:INFO:_master_model_container: 15
2024-10-01 00:07:55,614:INFO:_display_container: 2
2024-10-01 00:07:55,618:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-01 00:07:55,618:INFO:finalize_model() successfully completed......................................
2024-10-01 00:07:58,280:INFO:Initializing evaluate_model()
2024-10-01 00:07:58,280:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-01 00:07:58,297:INFO:Initializing plot_model()
2024-10-01 00:07:58,298:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:07:58,298:INFO:Checking exceptions
2024-10-01 00:07:58,300:INFO:Preloading libraries
2024-10-01 00:07:58,300:INFO:Copying training dataset
2024-10-01 00:07:58,300:INFO:Plot type: pipeline
2024-10-01 00:07:58,444:INFO:Visual Rendered Successfully
2024-10-01 00:07:58,515:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:00,877:INFO:Initializing plot_model()
2024-10-01 00:08:00,878:INFO:plot_model(plot=rfe, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:00,878:INFO:Checking exceptions
2024-10-01 00:08:03,216:INFO:Initializing plot_model()
2024-10-01 00:08:03,216:INFO:plot_model(plot=boundary, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:03,216:INFO:Checking exceptions
2024-10-01 00:08:03,218:INFO:Preloading libraries
2024-10-01 00:08:03,218:INFO:Copying training dataset
2024-10-01 00:08:03,218:INFO:Plot type: boundary
2024-10-01 00:08:03,250:INFO:Fitting StandardScaler()
2024-10-01 00:08:03,253:INFO:Fitting PCA()
2024-10-01 00:08:03,291:INFO:Fitting Model
2024-10-01 00:08:04,180:INFO:Visual Rendered Successfully
2024-10-01 00:08:04,283:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:16,345:INFO:Initializing plot_model()
2024-10-01 00:08:16,345:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:16,345:INFO:Checking exceptions
2024-10-01 00:08:16,348:INFO:Preloading libraries
2024-10-01 00:08:16,348:INFO:Copying training dataset
2024-10-01 00:08:16,348:INFO:Plot type: parameter
2024-10-01 00:08:16,353:INFO:Visual Rendered Successfully
2024-10-01 00:08:16,416:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:19,500:INFO:Initializing plot_model()
2024-10-01 00:08:19,501:INFO:plot_model(plot=learning, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:19,501:INFO:Checking exceptions
2024-10-01 00:08:19,502:INFO:Preloading libraries
2024-10-01 00:08:19,503:INFO:Copying training dataset
2024-10-01 00:08:19,503:INFO:Plot type: learning
2024-10-01 00:08:19,567:INFO:Fitting Model
2024-10-01 00:08:19,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,596:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,600:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,601:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,601:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,602:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,602:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,604:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,604:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,610:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,612:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,614:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,614:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,616:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,616:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,618:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,619:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,619:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,622:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,626:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,626:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,628:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,629:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,630:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,632:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,633:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,634:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,635:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,637:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,638:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,639:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,641:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,642:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,643:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,644:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,646:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,646:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,648:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,649:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,651:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,652:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,653:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,654:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,657:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,657:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,659:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,660:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,661:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,662:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,663:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,664:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,665:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,666:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,667:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,669:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,669:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,671:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,672:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,673:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,675:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,675:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,676:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,677:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,680:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,681:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,681:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,683:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,685:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,685:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,688:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,688:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,691:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,691:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,693:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,695:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,697:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,697:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,698:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,699:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,701:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,706:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,707:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:19,843:INFO:Visual Rendered Successfully
2024-10-01 00:08:19,905:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:25,292:INFO:Initializing plot_model()
2024-10-01 00:08:25,292:INFO:plot_model(plot=gain, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:25,292:INFO:Checking exceptions
2024-10-01 00:08:25,294:INFO:Preloading libraries
2024-10-01 00:08:25,295:INFO:Copying training dataset
2024-10-01 00:08:25,295:INFO:Plot type: gain
2024-10-01 00:08:25,295:INFO:Generating predictions / predict_proba on X_test
2024-10-01 00:08:25,441:INFO:Visual Rendered Successfully
2024-10-01 00:08:25,504:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:39,396:INFO:Initializing plot_model()
2024-10-01 00:08:39,396:INFO:plot_model(plot=threshold, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:39,396:INFO:Checking exceptions
2024-10-01 00:08:39,398:INFO:Preloading libraries
2024-10-01 00:08:39,398:INFO:Copying training dataset
2024-10-01 00:08:39,398:INFO:Plot type: threshold
2024-10-01 00:08:39,453:INFO:Fitting Model
2024-10-01 00:08:39,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,458:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,461:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,468:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,471:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,474:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,477:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,480:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,483:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,492:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,495:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,498:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,504:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,507:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,510:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,513:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,516:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,519:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,522:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,528:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,534:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,537:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,540:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,543:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,546:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,549:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,552:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,555:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,558:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,561:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,564:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,570:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,573:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,576:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,582:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,585:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,588:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,591:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,601:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:08:39,609:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-01 00:08:39,625:INFO:Scoring test/hold-out set
2024-10-01 00:08:39,831:INFO:Visual Rendered Successfully
2024-10-01 00:08:39,894:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:43,127:INFO:Initializing plot_model()
2024-10-01 00:08:43,127:INFO:plot_model(plot=calibration, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:43,128:INFO:Checking exceptions
2024-10-01 00:08:43,129:INFO:Preloading libraries
2024-10-01 00:08:43,129:INFO:Copying training dataset
2024-10-01 00:08:43,129:INFO:Plot type: calibration
2024-10-01 00:08:43,141:INFO:Scoring test/hold-out set
2024-10-01 00:08:43,278:INFO:Visual Rendered Successfully
2024-10-01 00:08:43,342:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:51,716:INFO:Initializing plot_model()
2024-10-01 00:08:51,716:INFO:plot_model(plot=pr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:51,716:INFO:Checking exceptions
2024-10-01 00:08:51,719:INFO:Preloading libraries
2024-10-01 00:08:51,719:INFO:Copying training dataset
2024-10-01 00:08:51,719:INFO:Plot type: pr
2024-10-01 00:08:51,773:INFO:Fitting Model
2024-10-01 00:08:51,773:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-01 00:08:51,773:INFO:Scoring test/hold-out set
2024-10-01 00:08:51,899:INFO:Visual Rendered Successfully
2024-10-01 00:08:51,975:INFO:plot_model() successfully completed......................................
2024-10-01 00:08:53,042:INFO:Initializing plot_model()
2024-10-01 00:08:53,042:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:53,042:INFO:Checking exceptions
2024-10-01 00:08:53,995:INFO:Initializing plot_model()
2024-10-01 00:08:53,996:INFO:plot_model(plot=class_report, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:08:53,996:INFO:Checking exceptions
2024-10-01 00:08:53,998:INFO:Preloading libraries
2024-10-01 00:08:53,998:INFO:Copying training dataset
2024-10-01 00:08:53,998:INFO:Plot type: class_report
2024-10-01 00:08:54,052:INFO:Fitting Model
2024-10-01 00:08:54,052:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-01 00:08:54,052:INFO:Scoring test/hold-out set
2024-10-01 00:08:54,199:INFO:Visual Rendered Successfully
2024-10-01 00:08:54,274:INFO:plot_model() successfully completed......................................
2024-10-01 00:09:02,495:INFO:Initializing plot_model()
2024-10-01 00:09:02,496:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:09:02,496:INFO:Checking exceptions
2024-10-01 00:09:04,602:INFO:Initializing plot_model()
2024-10-01 00:09:04,603:INFO:plot_model(plot=error, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:09:04,603:INFO:Checking exceptions
2024-10-01 00:09:04,605:INFO:Preloading libraries
2024-10-01 00:09:04,605:INFO:Copying training dataset
2024-10-01 00:09:04,605:INFO:Plot type: error
2024-10-01 00:09:04,660:INFO:Fitting Model
2024-10-01 00:09:04,660:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-01 00:09:04,661:INFO:Scoring test/hold-out set
2024-10-01 00:09:04,787:INFO:Visual Rendered Successfully
2024-10-01 00:09:04,860:INFO:plot_model() successfully completed......................................
2024-10-01 00:09:09,096:INFO:Initializing plot_model()
2024-10-01 00:09:09,096:INFO:plot_model(plot=dimension, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:09:09,096:INFO:Checking exceptions
2024-10-01 00:09:09,098:INFO:Preloading libraries
2024-10-01 00:09:09,098:INFO:Copying training dataset
2024-10-01 00:09:09,098:INFO:Plot type: dimension
2024-10-01 00:09:09,178:INFO:Fitting StandardScaler()
2024-10-01 00:09:09,192:INFO:Fitting PCA()
2024-10-01 00:09:09,249:INFO:Fitting & Transforming Model
2024-10-01 00:09:09,263:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\yellowbrick\features\radviz.py:199: RuntimeWarning: invalid value encountered in divide
  xy = (s * row_).sum(axis=0) / row.sum()

2024-10-01 00:09:09,407:INFO:Visual Rendered Successfully
2024-10-01 00:09:09,471:INFO:plot_model() successfully completed......................................
2024-10-01 00:09:09,819:INFO:Initializing plot_model()
2024-10-01 00:09:09,819:INFO:plot_model(plot=pr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:09:09,819:INFO:Checking exceptions
2024-10-01 00:09:09,821:INFO:Preloading libraries
2024-10-01 00:09:09,821:INFO:Copying training dataset
2024-10-01 00:09:09,821:INFO:Plot type: pr
2024-10-01 00:09:09,878:INFO:Fitting Model
2024-10-01 00:09:09,878:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-01 00:09:09,879:INFO:Scoring test/hold-out set
2024-10-01 00:09:10,006:INFO:Visual Rendered Successfully
2024-10-01 00:09:10,071:INFO:plot_model() successfully completed......................................
2024-10-01 00:09:13,668:INFO:Initializing plot_model()
2024-10-01 00:09:13,669:INFO:plot_model(plot=vc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:09:13,669:INFO:Checking exceptions
2024-10-01 00:09:13,671:INFO:Preloading libraries
2024-10-01 00:09:13,671:INFO:Copying training dataset
2024-10-01 00:09:13,671:INFO:Plot type: vc
2024-10-01 00:09:13,671:INFO:Determining param_name
2024-10-01 00:09:13,671:INFO:param_name: reg_param
2024-10-01 00:09:13,726:INFO:Fitting Model
2024-10-01 00:09:13,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,756:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,757:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,761:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,762:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,762:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,765:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,765:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,768:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,768:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,770:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,777:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,777:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,779:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,780:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,781:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,782:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,782:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,785:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,787:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,788:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,791:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,792:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,796:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,799:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,801:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,803:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,804:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,805:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,807:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,807:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,809:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,810:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,811:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,812:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,814:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,815:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,816:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,816:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,818:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,818:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,820:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,821:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,823:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,824:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,825:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,826:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,827:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,828:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,831:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,833:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,833:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,834:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,835:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,837:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,838:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,839:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,840:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,841:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,841:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,842:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,844:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,845:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,847:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,848:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,850:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,851:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,852:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,854:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,854:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,857:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,857:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,858:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,861:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,861:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,863:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,864:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,864:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,865:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,866:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,867:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,868:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,870:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,871:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,872:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:13,874:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-01 00:09:14,014:INFO:Visual Rendered Successfully
2024-10-01 00:09:14,095:INFO:plot_model() successfully completed......................................
2024-10-01 00:09:26,567:INFO:Initializing plot_model()
2024-10-01 00:09:26,568:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:09:26,568:INFO:Checking exceptions
2024-10-01 00:09:26,571:INFO:Preloading libraries
2024-10-01 00:09:26,571:INFO:Copying training dataset
2024-10-01 00:09:26,571:INFO:Plot type: confusion_matrix
2024-10-01 00:09:26,625:INFO:Fitting Model
2024-10-01 00:09:26,625:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-01 00:09:26,625:INFO:Scoring test/hold-out set
2024-10-01 00:09:26,711:INFO:Visual Rendered Successfully
2024-10-01 00:09:26,775:INFO:plot_model() successfully completed......................................
2024-10-01 00:09:37,169:INFO:Initializing plot_model()
2024-10-01 00:09:37,170:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024FCC9FF7C0>, system=True)
2024-10-01 00:09:37,170:INFO:Checking exceptions
2024-10-01 00:09:37,172:INFO:Preloading libraries
2024-10-01 00:09:37,172:INFO:Copying training dataset
2024-10-01 00:09:37,172:INFO:Plot type: pipeline
2024-10-01 00:09:37,242:INFO:Visual Rendered Successfully
2024-10-01 00:09:37,335:INFO:plot_model() successfully completed......................................
2024-10-04 11:57:54,118:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:57:54,119:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:57:54,119:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:57:54,119:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:57:54,835:INFO:Initializing load_model()
2024-10-04 11:57:54,835:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-10-04 11:59:03,593:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:59:03,593:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:59:03,593:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:59:03,593:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 11:59:04,257:INFO:Initializing load_model()
2024-10-04 11:59:04,257:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-10-04 13:25:32,563:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:25:32,563:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:25:32,563:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:25:32,563:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:25:33,332:INFO:PyCaret ClassificationExperiment
2024-10-04 13:25:33,332:INFO:Logging name: clf-default-name
2024-10-04 13:25:33,332:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-04 13:25:33,332:INFO:version 3.3.2
2024-10-04 13:25:33,332:INFO:Initializing setup()
2024-10-04 13:25:33,332:INFO:self.USI: 2124
2024-10-04 13:25:33,332:INFO:self._variable_keys: {'gpu_param', 'USI', 'fold_groups_param', 'idx', 'pipeline', 'fix_imbalance', 'X_test', 'y', 'target_param', 'logging_param', 'y_train', '_available_plots', 'is_multiclass', 'memory', 'fold_shuffle_param', 'html_param', 'log_plots_param', 'n_jobs_param', 'seed', 'gpu_n_jobs_param', 'X_train', 'exp_name_log', 'exp_id', 'y_test', '_ml_usecase', 'fold_generator', 'X', 'data'}
2024-10-04 13:25:33,332:INFO:Checking environment
2024-10-04 13:25:33,332:INFO:python_version: 3.10.14
2024-10-04 13:25:33,332:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-04 13:25:33,332:INFO:machine: AMD64
2024-10-04 13:25:33,332:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-04 13:25:33,332:INFO:Memory: svmem(total=16747855872, available=5576364032, percent=66.7, used=11171491840, free=5576364032)
2024-10-04 13:25:33,332:INFO:Physical Core: 8
2024-10-04 13:25:33,332:INFO:Logical Core: 16
2024-10-04 13:25:33,332:INFO:Checking libraries
2024-10-04 13:25:33,332:INFO:System:
2024-10-04 13:25:33,332:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-04 13:25:33,332:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-10-04 13:25:33,332:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-04 13:25:33,332:INFO:PyCaret required dependencies:
2024-10-04 13:25:33,364:INFO:                 pip: 24.2
2024-10-04 13:25:33,364:INFO:          setuptools: 75.1.0
2024-10-04 13:25:33,364:INFO:             pycaret: 3.3.2
2024-10-04 13:25:33,364:INFO:             IPython: 8.27.0
2024-10-04 13:25:33,364:INFO:          ipywidgets: 8.1.5
2024-10-04 13:25:33,364:INFO:                tqdm: 4.66.5
2024-10-04 13:25:33,364:INFO:               numpy: 1.26.4
2024-10-04 13:25:33,364:INFO:              pandas: 2.1.4
2024-10-04 13:25:33,364:INFO:              jinja2: 3.1.4
2024-10-04 13:25:33,364:INFO:               scipy: 1.11.4
2024-10-04 13:25:33,364:INFO:              joblib: 1.3.2
2024-10-04 13:25:33,364:INFO:             sklearn: 1.4.2
2024-10-04 13:25:33,364:INFO:                pyod: 2.0.2
2024-10-04 13:25:33,364:INFO:            imblearn: 0.12.3
2024-10-04 13:25:33,364:INFO:   category_encoders: 2.6.3
2024-10-04 13:25:33,364:INFO:            lightgbm: 4.5.0
2024-10-04 13:25:33,364:INFO:               numba: 0.60.0
2024-10-04 13:25:33,364:INFO:            requests: 2.32.3
2024-10-04 13:25:33,364:INFO:          matplotlib: 3.7.5
2024-10-04 13:25:33,364:INFO:          scikitplot: 0.3.7
2024-10-04 13:25:33,364:INFO:         yellowbrick: 1.5
2024-10-04 13:25:33,364:INFO:              plotly: 5.24.1
2024-10-04 13:25:33,364:INFO:    plotly-resampler: Not installed
2024-10-04 13:25:33,364:INFO:             kaleido: 0.2.1
2024-10-04 13:25:33,364:INFO:           schemdraw: 0.15
2024-10-04 13:25:33,364:INFO:         statsmodels: 0.14.3
2024-10-04 13:25:33,364:INFO:              sktime: 0.26.0
2024-10-04 13:25:33,364:INFO:               tbats: 1.1.3
2024-10-04 13:25:33,364:INFO:            pmdarima: 2.0.4
2024-10-04 13:25:33,364:INFO:              psutil: 6.0.0
2024-10-04 13:25:33,364:INFO:          markupsafe: 2.1.5
2024-10-04 13:25:33,364:INFO:             pickle5: Not installed
2024-10-04 13:25:33,364:INFO:         cloudpickle: 3.0.0
2024-10-04 13:25:33,364:INFO:         deprecation: 2.1.0
2024-10-04 13:25:33,364:INFO:              xxhash: 3.5.0
2024-10-04 13:25:33,364:INFO:           wurlitzer: Not installed
2024-10-04 13:25:33,364:INFO:PyCaret optional dependencies:
2024-10-04 13:25:33,500:INFO:                shap: Not installed
2024-10-04 13:25:33,500:INFO:           interpret: Not installed
2024-10-04 13:25:33,500:INFO:                umap: Not installed
2024-10-04 13:25:33,500:INFO:     ydata_profiling: Not installed
2024-10-04 13:25:33,500:INFO:  explainerdashboard: Not installed
2024-10-04 13:25:33,500:INFO:             autoviz: Not installed
2024-10-04 13:25:33,500:INFO:           fairlearn: Not installed
2024-10-04 13:25:33,500:INFO:          deepchecks: Not installed
2024-10-04 13:25:33,500:INFO:             xgboost: 2.1.1
2024-10-04 13:25:33,500:INFO:            catboost: Not installed
2024-10-04 13:25:33,500:INFO:              kmodes: Not installed
2024-10-04 13:25:33,500:INFO:             mlxtend: Not installed
2024-10-04 13:25:33,500:INFO:       statsforecast: Not installed
2024-10-04 13:25:33,500:INFO:        tune_sklearn: Not installed
2024-10-04 13:25:33,500:INFO:                 ray: Not installed
2024-10-04 13:25:33,500:INFO:            hyperopt: Not installed
2024-10-04 13:25:33,500:INFO:              optuna: Not installed
2024-10-04 13:25:33,500:INFO:               skopt: Not installed
2024-10-04 13:25:33,500:INFO:              mlflow: Not installed
2024-10-04 13:25:33,500:INFO:              gradio: Not installed
2024-10-04 13:25:33,500:INFO:             fastapi: Not installed
2024-10-04 13:25:33,500:INFO:             uvicorn: Not installed
2024-10-04 13:25:33,500:INFO:              m2cgen: Not installed
2024-10-04 13:25:33,500:INFO:           evidently: Not installed
2024-10-04 13:25:33,500:INFO:               fugue: Not installed
2024-10-04 13:25:33,500:INFO:           streamlit: Not installed
2024-10-04 13:25:33,500:INFO:             prophet: Not installed
2024-10-04 13:25:33,500:INFO:None
2024-10-04 13:25:33,500:INFO:Set up data.
2024-10-04 13:25:54,895:INFO:PyCaret ClassificationExperiment
2024-10-04 13:25:54,895:INFO:Logging name: clf-default-name
2024-10-04 13:25:54,895:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-04 13:25:54,895:INFO:version 3.3.2
2024-10-04 13:25:54,895:INFO:Initializing setup()
2024-10-04 13:25:54,895:INFO:self.USI: 6a5a
2024-10-04 13:25:54,895:INFO:self._variable_keys: {'gpu_param', 'USI', 'fold_groups_param', 'idx', 'pipeline', 'fix_imbalance', 'X_test', 'y', 'target_param', 'logging_param', 'y_train', '_available_plots', 'is_multiclass', 'memory', 'fold_shuffle_param', 'html_param', 'log_plots_param', 'n_jobs_param', 'seed', 'gpu_n_jobs_param', 'X_train', 'exp_name_log', 'exp_id', 'y_test', '_ml_usecase', 'fold_generator', 'X', 'data'}
2024-10-04 13:25:54,895:INFO:Checking environment
2024-10-04 13:25:54,895:INFO:python_version: 3.10.14
2024-10-04 13:25:54,895:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-04 13:25:54,895:INFO:machine: AMD64
2024-10-04 13:25:54,895:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-04 13:25:54,899:INFO:Memory: svmem(total=16747855872, available=5555945472, percent=66.8, used=11191910400, free=5555945472)
2024-10-04 13:25:54,899:INFO:Physical Core: 8
2024-10-04 13:25:54,899:INFO:Logical Core: 16
2024-10-04 13:25:54,899:INFO:Checking libraries
2024-10-04 13:25:54,899:INFO:System:
2024-10-04 13:25:54,899:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-04 13:25:54,899:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-10-04 13:25:54,899:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-04 13:25:54,899:INFO:PyCaret required dependencies:
2024-10-04 13:25:54,899:INFO:                 pip: 24.2
2024-10-04 13:25:54,899:INFO:          setuptools: 75.1.0
2024-10-04 13:25:54,899:INFO:             pycaret: 3.3.2
2024-10-04 13:25:54,899:INFO:             IPython: 8.27.0
2024-10-04 13:25:54,899:INFO:          ipywidgets: 8.1.5
2024-10-04 13:25:54,899:INFO:                tqdm: 4.66.5
2024-10-04 13:25:54,899:INFO:               numpy: 1.26.4
2024-10-04 13:25:54,899:INFO:              pandas: 2.1.4
2024-10-04 13:25:54,899:INFO:              jinja2: 3.1.4
2024-10-04 13:25:54,899:INFO:               scipy: 1.11.4
2024-10-04 13:25:54,899:INFO:              joblib: 1.3.2
2024-10-04 13:25:54,899:INFO:             sklearn: 1.4.2
2024-10-04 13:25:54,899:INFO:                pyod: 2.0.2
2024-10-04 13:25:54,899:INFO:            imblearn: 0.12.3
2024-10-04 13:25:54,899:INFO:   category_encoders: 2.6.3
2024-10-04 13:25:54,899:INFO:            lightgbm: 4.5.0
2024-10-04 13:25:54,899:INFO:               numba: 0.60.0
2024-10-04 13:25:54,899:INFO:            requests: 2.32.3
2024-10-04 13:25:54,899:INFO:          matplotlib: 3.7.5
2024-10-04 13:25:54,899:INFO:          scikitplot: 0.3.7
2024-10-04 13:25:54,899:INFO:         yellowbrick: 1.5
2024-10-04 13:25:54,899:INFO:              plotly: 5.24.1
2024-10-04 13:25:54,899:INFO:    plotly-resampler: Not installed
2024-10-04 13:25:54,903:INFO:             kaleido: 0.2.1
2024-10-04 13:25:54,903:INFO:           schemdraw: 0.15
2024-10-04 13:25:54,903:INFO:         statsmodels: 0.14.3
2024-10-04 13:25:54,903:INFO:              sktime: 0.26.0
2024-10-04 13:25:54,903:INFO:               tbats: 1.1.3
2024-10-04 13:25:54,903:INFO:            pmdarima: 2.0.4
2024-10-04 13:25:54,903:INFO:              psutil: 6.0.0
2024-10-04 13:25:54,903:INFO:          markupsafe: 2.1.5
2024-10-04 13:25:54,903:INFO:             pickle5: Not installed
2024-10-04 13:25:54,903:INFO:         cloudpickle: 3.0.0
2024-10-04 13:25:54,903:INFO:         deprecation: 2.1.0
2024-10-04 13:25:54,903:INFO:              xxhash: 3.5.0
2024-10-04 13:25:54,903:INFO:           wurlitzer: Not installed
2024-10-04 13:25:54,903:INFO:PyCaret optional dependencies:
2024-10-04 13:25:54,903:INFO:                shap: Not installed
2024-10-04 13:25:54,903:INFO:           interpret: Not installed
2024-10-04 13:25:54,903:INFO:                umap: Not installed
2024-10-04 13:25:54,903:INFO:     ydata_profiling: Not installed
2024-10-04 13:25:54,903:INFO:  explainerdashboard: Not installed
2024-10-04 13:25:54,903:INFO:             autoviz: Not installed
2024-10-04 13:25:54,903:INFO:           fairlearn: Not installed
2024-10-04 13:25:54,903:INFO:          deepchecks: Not installed
2024-10-04 13:25:54,903:INFO:             xgboost: 2.1.1
2024-10-04 13:25:54,903:INFO:            catboost: Not installed
2024-10-04 13:25:54,903:INFO:              kmodes: Not installed
2024-10-04 13:25:54,903:INFO:             mlxtend: Not installed
2024-10-04 13:25:54,903:INFO:       statsforecast: Not installed
2024-10-04 13:25:54,903:INFO:        tune_sklearn: Not installed
2024-10-04 13:25:54,903:INFO:                 ray: Not installed
2024-10-04 13:25:54,903:INFO:            hyperopt: Not installed
2024-10-04 13:25:54,903:INFO:              optuna: Not installed
2024-10-04 13:25:54,903:INFO:               skopt: Not installed
2024-10-04 13:25:54,903:INFO:              mlflow: Not installed
2024-10-04 13:25:54,903:INFO:              gradio: Not installed
2024-10-04 13:25:54,903:INFO:             fastapi: Not installed
2024-10-04 13:25:54,903:INFO:             uvicorn: Not installed
2024-10-04 13:25:54,903:INFO:              m2cgen: Not installed
2024-10-04 13:25:54,903:INFO:           evidently: Not installed
2024-10-04 13:25:54,903:INFO:               fugue: Not installed
2024-10-04 13:25:54,903:INFO:           streamlit: Not installed
2024-10-04 13:25:54,903:INFO:             prophet: Not installed
2024-10-04 13:25:54,903:INFO:None
2024-10-04 13:25:54,903:INFO:Set up data.
2024-10-04 13:25:54,911:INFO:Set up folding strategy.
2024-10-04 13:25:54,919:INFO:Set up train/test split.
2024-10-04 13:25:54,927:INFO:Set up index.
2024-10-04 13:25:54,927:INFO:Assigning column types.
2024-10-04 13:25:54,927:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-04 13:25:54,967:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-04 13:25:54,975:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-04 13:25:55,015:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,047:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-04 13:25:55,047:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-04 13:25:55,071:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,071:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,071:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-04 13:25:55,111:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-04 13:25:55,135:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,135:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,167:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-04 13:25:55,191:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,191:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,191:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-04 13:25:55,247:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,255:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,311:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,311:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,311:INFO:Preparing preprocessing pipeline...
2024-10-04 13:25:55,319:INFO:Set up label encoding.
2024-10-04 13:25:55,319:INFO:Set up simple imputation.
2024-10-04 13:25:55,351:INFO:Finished creating preprocessing pipeline.
2024-10-04 13:25:55,359:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-04 13:25:55,359:INFO:Creating final display dataframe.
2024-10-04 13:25:55,440:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (6238, 4)
5        Transformed data shape         (6238, 4)
6   Transformed train set shape         (4366, 4)
7    Transformed test set shape         (1872, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              6a5a
2024-10-04 13:25:55,512:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,520:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,584:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-04 13:25:55,584:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-04 13:25:55,592:INFO:setup() successfully completed in 0.71s...............
2024-10-04 13:25:58,202:INFO:Initializing compare_models()
2024-10-04 13:25:58,202:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-04 13:25:58,202:INFO:Checking exceptions
2024-10-04 13:25:58,210:INFO:Preparing display monitor
2024-10-04 13:25:58,218:INFO:Initializing Logistic Regression
2024-10-04 13:25:58,218:INFO:Total runtime is 0.0 minutes
2024-10-04 13:25:58,218:INFO:SubProcess create_model() called ==================================
2024-10-04 13:25:58,218:INFO:Initializing create_model()
2024-10-04 13:25:58,218:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:25:58,218:INFO:Checking exceptions
2024-10-04 13:25:58,218:INFO:Importing libraries
2024-10-04 13:25:58,218:INFO:Copying training dataset
2024-10-04 13:25:58,218:INFO:Defining folds
2024-10-04 13:25:58,218:INFO:Declaring metric variables
2024-10-04 13:25:58,218:INFO:Importing untrained model
2024-10-04 13:25:58,218:INFO:Logistic Regression Imported successfully
2024-10-04 13:25:58,218:INFO:Starting cross validation
2024-10-04 13:25:58,226:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:02,467:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,475:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,483:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,507:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,555:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,563:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,571:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,571:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,571:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,603:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,603:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,627:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,659:INFO:Calculating mean and std
2024-10-04 13:26:02,659:INFO:Creating metrics dataframe
2024-10-04 13:26:02,659:INFO:Uploading results into container
2024-10-04 13:26:02,659:INFO:Uploading model into container now
2024-10-04 13:26:02,659:INFO:_master_model_container: 1
2024-10-04 13:26:02,659:INFO:_display_container: 2
2024-10-04 13:26:02,659:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-04 13:26:02,659:INFO:create_model() successfully completed......................................
2024-10-04 13:26:02,747:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:02,747:INFO:Creating metrics dataframe
2024-10-04 13:26:02,755:INFO:Initializing K Neighbors Classifier
2024-10-04 13:26:02,755:INFO:Total runtime is 0.07562102476755778 minutes
2024-10-04 13:26:02,755:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:02,755:INFO:Initializing create_model()
2024-10-04 13:26:02,755:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:02,755:INFO:Checking exceptions
2024-10-04 13:26:02,755:INFO:Importing libraries
2024-10-04 13:26:02,755:INFO:Copying training dataset
2024-10-04 13:26:02,755:INFO:Defining folds
2024-10-04 13:26:02,755:INFO:Declaring metric variables
2024-10-04 13:26:02,755:INFO:Importing untrained model
2024-10-04 13:26:02,755:INFO:K Neighbors Classifier Imported successfully
2024-10-04 13:26:02,755:INFO:Starting cross validation
2024-10-04 13:26:02,755:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:02,899:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,899:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,899:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,899:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,907:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,907:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,907:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,907:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,915:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,915:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,923:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:02,931:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,428:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,436:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,444:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,460:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,460:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,460:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,460:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,468:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,468:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,476:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,476:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,476:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,476:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,476:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,484:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,484:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,484:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,484:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,516:INFO:Calculating mean and std
2024-10-04 13:26:05,516:INFO:Creating metrics dataframe
2024-10-04 13:26:05,516:INFO:Uploading results into container
2024-10-04 13:26:05,516:INFO:Uploading model into container now
2024-10-04 13:26:05,524:INFO:_master_model_container: 2
2024-10-04 13:26:05,524:INFO:_display_container: 2
2024-10-04 13:26:05,524:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-04 13:26:05,524:INFO:create_model() successfully completed......................................
2024-10-04 13:26:05,612:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:05,612:INFO:Creating metrics dataframe
2024-10-04 13:26:05,620:INFO:Initializing Naive Bayes
2024-10-04 13:26:05,620:INFO:Total runtime is 0.12337251504262288 minutes
2024-10-04 13:26:05,620:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:05,620:INFO:Initializing create_model()
2024-10-04 13:26:05,620:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:05,620:INFO:Checking exceptions
2024-10-04 13:26:05,620:INFO:Importing libraries
2024-10-04 13:26:05,620:INFO:Copying training dataset
2024-10-04 13:26:05,620:INFO:Defining folds
2024-10-04 13:26:05,620:INFO:Declaring metric variables
2024-10-04 13:26:05,620:INFO:Importing untrained model
2024-10-04 13:26:05,628:INFO:Naive Bayes Imported successfully
2024-10-04 13:26:05,628:INFO:Starting cross validation
2024-10-04 13:26:05,628:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:05,676:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,684:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,732:INFO:Calculating mean and std
2024-10-04 13:26:05,732:INFO:Creating metrics dataframe
2024-10-04 13:26:05,732:INFO:Uploading results into container
2024-10-04 13:26:05,732:INFO:Uploading model into container now
2024-10-04 13:26:05,732:INFO:_master_model_container: 3
2024-10-04 13:26:05,732:INFO:_display_container: 2
2024-10-04 13:26:05,732:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-04 13:26:05,732:INFO:create_model() successfully completed......................................
2024-10-04 13:26:05,812:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:05,812:INFO:Creating metrics dataframe
2024-10-04 13:26:05,812:INFO:Initializing Decision Tree Classifier
2024-10-04 13:26:05,812:INFO:Total runtime is 0.1265732447306315 minutes
2024-10-04 13:26:05,812:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:05,812:INFO:Initializing create_model()
2024-10-04 13:26:05,812:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:05,812:INFO:Checking exceptions
2024-10-04 13:26:05,812:INFO:Importing libraries
2024-10-04 13:26:05,812:INFO:Copying training dataset
2024-10-04 13:26:05,820:INFO:Defining folds
2024-10-04 13:26:05,820:INFO:Declaring metric variables
2024-10-04 13:26:05,820:INFO:Importing untrained model
2024-10-04 13:26:05,820:INFO:Decision Tree Classifier Imported successfully
2024-10-04 13:26:05,820:INFO:Starting cross validation
2024-10-04 13:26:05,820:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:05,876:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,876:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,884:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,892:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,900:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,908:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:05,924:INFO:Calculating mean and std
2024-10-04 13:26:05,924:INFO:Creating metrics dataframe
2024-10-04 13:26:05,924:INFO:Uploading results into container
2024-10-04 13:26:05,924:INFO:Uploading model into container now
2024-10-04 13:26:05,924:INFO:_master_model_container: 4
2024-10-04 13:26:05,924:INFO:_display_container: 2
2024-10-04 13:26:05,924:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-04 13:26:05,924:INFO:create_model() successfully completed......................................
2024-10-04 13:26:05,996:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:05,996:INFO:Creating metrics dataframe
2024-10-04 13:26:06,004:INFO:Initializing SVM - Linear Kernel
2024-10-04 13:26:06,004:INFO:Total runtime is 0.12977372805277507 minutes
2024-10-04 13:26:06,004:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:06,004:INFO:Initializing create_model()
2024-10-04 13:26:06,004:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:06,004:INFO:Checking exceptions
2024-10-04 13:26:06,004:INFO:Importing libraries
2024-10-04 13:26:06,004:INFO:Copying training dataset
2024-10-04 13:26:06,008:INFO:Defining folds
2024-10-04 13:26:06,008:INFO:Declaring metric variables
2024-10-04 13:26:06,008:INFO:Importing untrained model
2024-10-04 13:26:06,008:INFO:SVM - Linear Kernel Imported successfully
2024-10-04 13:26:06,008:INFO:Starting cross validation
2024-10-04 13:26:06,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:06,076:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,076:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,076:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,076:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,108:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,108:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,108:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,124:INFO:Calculating mean and std
2024-10-04 13:26:06,124:INFO:Creating metrics dataframe
2024-10-04 13:26:06,124:INFO:Uploading results into container
2024-10-04 13:26:06,124:INFO:Uploading model into container now
2024-10-04 13:26:06,124:INFO:_master_model_container: 5
2024-10-04 13:26:06,124:INFO:_display_container: 2
2024-10-04 13:26:06,124:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-04 13:26:06,124:INFO:create_model() successfully completed......................................
2024-10-04 13:26:06,204:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:06,204:INFO:Creating metrics dataframe
2024-10-04 13:26:06,204:INFO:Initializing Ridge Classifier
2024-10-04 13:26:06,204:INFO:Total runtime is 0.13310882647832234 minutes
2024-10-04 13:26:06,204:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:06,204:INFO:Initializing create_model()
2024-10-04 13:26:06,204:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:06,204:INFO:Checking exceptions
2024-10-04 13:26:06,204:INFO:Importing libraries
2024-10-04 13:26:06,204:INFO:Copying training dataset
2024-10-04 13:26:06,208:INFO:Defining folds
2024-10-04 13:26:06,208:INFO:Declaring metric variables
2024-10-04 13:26:06,208:INFO:Importing untrained model
2024-10-04 13:26:06,208:INFO:Ridge Classifier Imported successfully
2024-10-04 13:26:06,208:INFO:Starting cross validation
2024-10-04 13:26:06,208:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:06,260:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,260:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,260:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,260:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,284:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,284:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,284:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:06,309:INFO:Calculating mean and std
2024-10-04 13:26:06,309:INFO:Creating metrics dataframe
2024-10-04 13:26:06,309:INFO:Uploading results into container
2024-10-04 13:26:06,309:INFO:Uploading model into container now
2024-10-04 13:26:06,309:INFO:_master_model_container: 6
2024-10-04 13:26:06,309:INFO:_display_container: 2
2024-10-04 13:26:06,309:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-04 13:26:06,309:INFO:create_model() successfully completed......................................
2024-10-04 13:26:06,381:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:06,381:INFO:Creating metrics dataframe
2024-10-04 13:26:06,389:INFO:Initializing Random Forest Classifier
2024-10-04 13:26:06,389:INFO:Total runtime is 0.13617712259292603 minutes
2024-10-04 13:26:06,389:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:06,389:INFO:Initializing create_model()
2024-10-04 13:26:06,389:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:06,389:INFO:Checking exceptions
2024-10-04 13:26:06,389:INFO:Importing libraries
2024-10-04 13:26:06,389:INFO:Copying training dataset
2024-10-04 13:26:06,389:INFO:Defining folds
2024-10-04 13:26:06,389:INFO:Declaring metric variables
2024-10-04 13:26:06,389:INFO:Importing untrained model
2024-10-04 13:26:06,389:INFO:Random Forest Classifier Imported successfully
2024-10-04 13:26:06,389:INFO:Starting cross validation
2024-10-04 13:26:06,389:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:07,069:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,085:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,085:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,085:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,085:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,085:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,085:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,101:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,101:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,101:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,109:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,117:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,141:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,149:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,149:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,181:INFO:Calculating mean and std
2024-10-04 13:26:07,181:INFO:Creating metrics dataframe
2024-10-04 13:26:07,181:INFO:Uploading results into container
2024-10-04 13:26:07,181:INFO:Uploading model into container now
2024-10-04 13:26:07,181:INFO:_master_model_container: 7
2024-10-04 13:26:07,181:INFO:_display_container: 2
2024-10-04 13:26:07,181:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-04 13:26:07,181:INFO:create_model() successfully completed......................................
2024-10-04 13:26:07,261:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:07,261:INFO:Creating metrics dataframe
2024-10-04 13:26:07,261:INFO:Initializing Quadratic Discriminant Analysis
2024-10-04 13:26:07,261:INFO:Total runtime is 0.15071666638056438 minutes
2024-10-04 13:26:07,261:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:07,261:INFO:Initializing create_model()
2024-10-04 13:26:07,261:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:07,261:INFO:Checking exceptions
2024-10-04 13:26:07,261:INFO:Importing libraries
2024-10-04 13:26:07,261:INFO:Copying training dataset
2024-10-04 13:26:07,269:INFO:Defining folds
2024-10-04 13:26:07,269:INFO:Declaring metric variables
2024-10-04 13:26:07,269:INFO:Importing untrained model
2024-10-04 13:26:07,269:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-04 13:26:07,269:INFO:Starting cross validation
2024-10-04 13:26:07,269:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:07,301:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,301:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,301:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,301:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,301:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,309:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,309:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,309:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,317:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,317:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:07,317:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,349:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,373:INFO:Calculating mean and std
2024-10-04 13:26:07,373:INFO:Creating metrics dataframe
2024-10-04 13:26:07,373:INFO:Uploading results into container
2024-10-04 13:26:07,373:INFO:Uploading model into container now
2024-10-04 13:26:07,373:INFO:_master_model_container: 8
2024-10-04 13:26:07,373:INFO:_display_container: 2
2024-10-04 13:26:07,373:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-04 13:26:07,373:INFO:create_model() successfully completed......................................
2024-10-04 13:26:07,445:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:07,445:INFO:Creating metrics dataframe
2024-10-04 13:26:07,453:INFO:Initializing Ada Boost Classifier
2024-10-04 13:26:07,453:INFO:Total runtime is 0.15391842524210614 minutes
2024-10-04 13:26:07,453:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:07,453:INFO:Initializing create_model()
2024-10-04 13:26:07,453:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:07,453:INFO:Checking exceptions
2024-10-04 13:26:07,453:INFO:Importing libraries
2024-10-04 13:26:07,453:INFO:Copying training dataset
2024-10-04 13:26:07,461:INFO:Defining folds
2024-10-04 13:26:07,461:INFO:Declaring metric variables
2024-10-04 13:26:07,461:INFO:Importing untrained model
2024-10-04 13:26:07,461:INFO:Ada Boost Classifier Imported successfully
2024-10-04 13:26:07,461:INFO:Starting cross validation
2024-10-04 13:26:07,461:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:07,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-04 13:26:07,781:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,789:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,805:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,805:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,805:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,805:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,809:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,809:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,809:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,809:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,813:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,813:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,813:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:07,829:INFO:Calculating mean and std
2024-10-04 13:26:07,829:INFO:Creating metrics dataframe
2024-10-04 13:26:07,829:INFO:Uploading results into container
2024-10-04 13:26:07,829:INFO:Uploading model into container now
2024-10-04 13:26:07,829:INFO:_master_model_container: 9
2024-10-04 13:26:07,829:INFO:_display_container: 2
2024-10-04 13:26:07,829:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-04 13:26:07,829:INFO:create_model() successfully completed......................................
2024-10-04 13:26:07,909:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:07,909:INFO:Creating metrics dataframe
2024-10-04 13:26:07,909:INFO:Initializing Gradient Boosting Classifier
2024-10-04 13:26:07,909:INFO:Total runtime is 0.1615220904350281 minutes
2024-10-04 13:26:07,909:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:07,909:INFO:Initializing create_model()
2024-10-04 13:26:07,909:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:07,909:INFO:Checking exceptions
2024-10-04 13:26:07,909:INFO:Importing libraries
2024-10-04 13:26:07,909:INFO:Copying training dataset
2024-10-04 13:26:07,909:INFO:Defining folds
2024-10-04 13:26:07,909:INFO:Declaring metric variables
2024-10-04 13:26:07,909:INFO:Importing untrained model
2024-10-04 13:26:07,909:INFO:Gradient Boosting Classifier Imported successfully
2024-10-04 13:26:07,909:INFO:Starting cross validation
2024-10-04 13:26:07,909:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:08,573:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,573:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,622:INFO:Calculating mean and std
2024-10-04 13:26:08,622:INFO:Creating metrics dataframe
2024-10-04 13:26:08,622:INFO:Uploading results into container
2024-10-04 13:26:08,622:INFO:Uploading model into container now
2024-10-04 13:26:08,622:INFO:_master_model_container: 10
2024-10-04 13:26:08,622:INFO:_display_container: 2
2024-10-04 13:26:08,622:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-04 13:26:08,622:INFO:create_model() successfully completed......................................
2024-10-04 13:26:08,694:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:08,694:INFO:Creating metrics dataframe
2024-10-04 13:26:08,702:INFO:Initializing Linear Discriminant Analysis
2024-10-04 13:26:08,702:INFO:Total runtime is 0.17472651004791262 minutes
2024-10-04 13:26:08,702:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:08,702:INFO:Initializing create_model()
2024-10-04 13:26:08,702:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:08,702:INFO:Checking exceptions
2024-10-04 13:26:08,702:INFO:Importing libraries
2024-10-04 13:26:08,702:INFO:Copying training dataset
2024-10-04 13:26:08,702:INFO:Defining folds
2024-10-04 13:26:08,702:INFO:Declaring metric variables
2024-10-04 13:26:08,702:INFO:Importing untrained model
2024-10-04 13:26:08,702:INFO:Linear Discriminant Analysis Imported successfully
2024-10-04 13:26:08,702:INFO:Starting cross validation
2024-10-04 13:26:08,702:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:08,750:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,750:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,750:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,750:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,750:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,750:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,758:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,766:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,766:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,766:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,766:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,766:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,766:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,766:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,774:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:08,790:INFO:Calculating mean and std
2024-10-04 13:26:08,790:INFO:Creating metrics dataframe
2024-10-04 13:26:08,790:INFO:Uploading results into container
2024-10-04 13:26:08,790:INFO:Uploading model into container now
2024-10-04 13:26:08,790:INFO:_master_model_container: 11
2024-10-04 13:26:08,790:INFO:_display_container: 2
2024-10-04 13:26:08,790:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-04 13:26:08,790:INFO:create_model() successfully completed......................................
2024-10-04 13:26:08,862:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:08,862:INFO:Creating metrics dataframe
2024-10-04 13:26:08,870:INFO:Initializing Extra Trees Classifier
2024-10-04 13:26:08,870:INFO:Total runtime is 0.17752839724222821 minutes
2024-10-04 13:26:08,870:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:08,870:INFO:Initializing create_model()
2024-10-04 13:26:08,870:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:08,870:INFO:Checking exceptions
2024-10-04 13:26:08,870:INFO:Importing libraries
2024-10-04 13:26:08,870:INFO:Copying training dataset
2024-10-04 13:26:08,870:INFO:Defining folds
2024-10-04 13:26:08,870:INFO:Declaring metric variables
2024-10-04 13:26:08,870:INFO:Importing untrained model
2024-10-04 13:26:08,870:INFO:Extra Trees Classifier Imported successfully
2024-10-04 13:26:08,870:INFO:Starting cross validation
2024-10-04 13:26:08,870:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:09,210:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,210:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,254:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,254:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:09,278:INFO:Calculating mean and std
2024-10-04 13:26:09,278:INFO:Creating metrics dataframe
2024-10-04 13:26:09,278:INFO:Uploading results into container
2024-10-04 13:26:09,278:INFO:Uploading model into container now
2024-10-04 13:26:09,278:INFO:_master_model_container: 12
2024-10-04 13:26:09,278:INFO:_display_container: 2
2024-10-04 13:26:09,278:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-04 13:26:09,278:INFO:create_model() successfully completed......................................
2024-10-04 13:26:09,350:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:09,350:INFO:Creating metrics dataframe
2024-10-04 13:26:09,350:INFO:Initializing Extreme Gradient Boosting
2024-10-04 13:26:09,350:INFO:Total runtime is 0.18553152084350588 minutes
2024-10-04 13:26:09,350:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:09,350:INFO:Initializing create_model()
2024-10-04 13:26:09,350:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:09,350:INFO:Checking exceptions
2024-10-04 13:26:09,350:INFO:Importing libraries
2024-10-04 13:26:09,350:INFO:Copying training dataset
2024-10-04 13:26:09,358:INFO:Defining folds
2024-10-04 13:26:09,358:INFO:Declaring metric variables
2024-10-04 13:26:09,358:INFO:Importing untrained model
2024-10-04 13:26:09,358:INFO:Extreme Gradient Boosting Imported successfully
2024-10-04 13:26:09,358:INFO:Starting cross validation
2024-10-04 13:26:09,358:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:11,678:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,686:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,687:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,687:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,689:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,690:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,693:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,695:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,695:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,695:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,696:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,696:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,699:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,701:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,705:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,705:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,709:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:11,725:INFO:Calculating mean and std
2024-10-04 13:26:11,727:INFO:Creating metrics dataframe
2024-10-04 13:26:11,729:INFO:Uploading results into container
2024-10-04 13:26:11,730:INFO:Uploading model into container now
2024-10-04 13:26:11,731:INFO:_master_model_container: 13
2024-10-04 13:26:11,731:INFO:_display_container: 2
2024-10-04 13:26:11,732:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-04 13:26:11,732:INFO:create_model() successfully completed......................................
2024-10-04 13:26:11,815:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:11,815:INFO:Creating metrics dataframe
2024-10-04 13:26:11,818:INFO:Initializing Light Gradient Boosting Machine
2024-10-04 13:26:11,818:INFO:Total runtime is 0.22666580677032472 minutes
2024-10-04 13:26:11,818:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:11,819:INFO:Initializing create_model()
2024-10-04 13:26:11,819:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:11,819:INFO:Checking exceptions
2024-10-04 13:26:11,819:INFO:Importing libraries
2024-10-04 13:26:11,819:INFO:Copying training dataset
2024-10-04 13:26:11,823:INFO:Defining folds
2024-10-04 13:26:11,823:INFO:Declaring metric variables
2024-10-04 13:26:11,823:INFO:Importing untrained model
2024-10-04 13:26:11,824:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-04 13:26:11,824:INFO:Starting cross validation
2024-10-04 13:26:11,825:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:12,787:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,790:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,791:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,801:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,803:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,806:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,809:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,820:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,828:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,835:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,852:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,860:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,868:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,973:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,988:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,996:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:12,997:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,001:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,008:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,009:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,010:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,024:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,031:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,039:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,049:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,056:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,063:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,084:INFO:Calculating mean and std
2024-10-04 13:26:13,086:INFO:Creating metrics dataframe
2024-10-04 13:26:13,088:INFO:Uploading results into container
2024-10-04 13:26:13,089:INFO:Uploading model into container now
2024-10-04 13:26:13,089:INFO:_master_model_container: 14
2024-10-04 13:26:13,090:INFO:_display_container: 2
2024-10-04 13:26:13,091:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-04 13:26:13,091:INFO:create_model() successfully completed......................................
2024-10-04 13:26:13,188:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:13,188:INFO:Creating metrics dataframe
2024-10-04 13:26:13,190:INFO:Initializing Dummy Classifier
2024-10-04 13:26:13,190:INFO:Total runtime is 0.2495371182759603 minutes
2024-10-04 13:26:13,191:INFO:SubProcess create_model() called ==================================
2024-10-04 13:26:13,191:INFO:Initializing create_model()
2024-10-04 13:26:13,191:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D1265CEA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:13,191:INFO:Checking exceptions
2024-10-04 13:26:13,191:INFO:Importing libraries
2024-10-04 13:26:13,191:INFO:Copying training dataset
2024-10-04 13:26:13,195:INFO:Defining folds
2024-10-04 13:26:13,196:INFO:Declaring metric variables
2024-10-04 13:26:13,196:INFO:Importing untrained model
2024-10-04 13:26:13,197:INFO:Dummy Classifier Imported successfully
2024-10-04 13:26:13,197:INFO:Starting cross validation
2024-10-04 13:26:13,198:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-04 13:26:13,233:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,235:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,235:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,235:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,235:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,239:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,239:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,240:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,240:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,241:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,241:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,241:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,241:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,242:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,242:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,243:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,243:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,244:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,244:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,245:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,245:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,245:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,245:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,246:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,247:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,248:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,248:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,249:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,251:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,252:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,252:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,253:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,253:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-04 13:26:13,255:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,256:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-04 13:26:13,270:INFO:Calculating mean and std
2024-10-04 13:26:13,271:INFO:Creating metrics dataframe
2024-10-04 13:26:13,272:INFO:Uploading results into container
2024-10-04 13:26:13,273:INFO:Uploading model into container now
2024-10-04 13:26:13,273:INFO:_master_model_container: 15
2024-10-04 13:26:13,273:INFO:_display_container: 2
2024-10-04 13:26:13,273:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-04 13:26:13,273:INFO:create_model() successfully completed......................................
2024-10-04 13:26:13,343:INFO:SubProcess create_model() end ==================================
2024-10-04 13:26:13,343:INFO:Creating metrics dataframe
2024-10-04 13:26:13,348:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-04 13:26:13,349:INFO:Initializing create_model()
2024-10-04 13:26:13,349:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:13,349:INFO:Checking exceptions
2024-10-04 13:26:13,350:INFO:Importing libraries
2024-10-04 13:26:13,350:INFO:Copying training dataset
2024-10-04 13:26:13,352:INFO:Defining folds
2024-10-04 13:26:13,352:INFO:Declaring metric variables
2024-10-04 13:26:13,352:INFO:Importing untrained model
2024-10-04 13:26:13,352:INFO:Declaring custom model
2024-10-04 13:26:13,353:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-04 13:26:13,353:INFO:Cross validation set to False
2024-10-04 13:26:13,353:INFO:Fitting Model
2024-10-04 13:26:13,360:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:13,361:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-04 13:26:13,361:INFO:create_model() successfully completed......................................
2024-10-04 13:26:13,440:INFO:_master_model_container: 15
2024-10-04 13:26:13,440:INFO:_display_container: 2
2024-10-04 13:26:13,440:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-04 13:26:13,440:INFO:compare_models() successfully completed......................................
2024-10-04 13:26:20,953:INFO:Initializing finalize_model()
2024-10-04 13:26:20,954:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-04 13:26:20,954:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-04 13:26:20,958:INFO:Initializing create_model()
2024-10-04 13:26:20,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-04 13:26:20,958:INFO:Checking exceptions
2024-10-04 13:26:20,960:INFO:Importing libraries
2024-10-04 13:26:20,960:INFO:Copying training dataset
2024-10-04 13:26:20,961:INFO:Defining folds
2024-10-04 13:26:20,961:INFO:Declaring metric variables
2024-10-04 13:26:20,962:INFO:Importing untrained model
2024-10-04 13:26:20,962:INFO:Declaring custom model
2024-10-04 13:26:20,962:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-04 13:26:20,964:INFO:Cross validation set to False
2024-10-04 13:26:20,964:INFO:Fitting Model
2024-10-04 13:26:20,976:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:20,981:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-04 13:26:20,982:INFO:create_model() successfully completed......................................
2024-10-04 13:26:21,063:INFO:_master_model_container: 15
2024-10-04 13:26:21,063:INFO:_display_container: 2
2024-10-04 13:26:21,067:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-04 13:26:21,067:INFO:finalize_model() successfully completed......................................
2024-10-04 13:26:23,402:INFO:Initializing evaluate_model()
2024-10-04 13:26:23,403:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-04 13:26:23,419:INFO:Initializing plot_model()
2024-10-04 13:26:23,420:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:23,420:INFO:Checking exceptions
2024-10-04 13:26:23,422:INFO:Preloading libraries
2024-10-04 13:26:23,422:INFO:Copying training dataset
2024-10-04 13:26:23,422:INFO:Plot type: pipeline
2024-10-04 13:26:23,581:INFO:Visual Rendered Successfully
2024-10-04 13:26:23,659:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:26,876:INFO:Initializing plot_model()
2024-10-04 13:26:26,877:INFO:plot_model(plot=class_report, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:26,877:INFO:Checking exceptions
2024-10-04 13:26:26,879:INFO:Preloading libraries
2024-10-04 13:26:26,879:INFO:Copying training dataset
2024-10-04 13:26:26,879:INFO:Plot type: class_report
2024-10-04 13:26:26,935:INFO:Fitting Model
2024-10-04 13:26:26,937:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-04 13:26:26,938:INFO:Scoring test/hold-out set
2024-10-04 13:26:27,097:INFO:Visual Rendered Successfully
2024-10-04 13:26:27,173:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:30,916:INFO:Initializing plot_model()
2024-10-04 13:26:30,917:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:30,917:INFO:Checking exceptions
2024-10-04 13:26:32,451:INFO:Initializing plot_model()
2024-10-04 13:26:32,452:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:32,452:INFO:Checking exceptions
2024-10-04 13:26:34,134:INFO:Initializing plot_model()
2024-10-04 13:26:34,135:INFO:plot_model(plot=error, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:34,135:INFO:Checking exceptions
2024-10-04 13:26:34,138:INFO:Preloading libraries
2024-10-04 13:26:34,138:INFO:Copying training dataset
2024-10-04 13:26:34,138:INFO:Plot type: error
2024-10-04 13:26:34,202:INFO:Fitting Model
2024-10-04 13:26:34,203:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-04 13:26:34,203:INFO:Scoring test/hold-out set
2024-10-04 13:26:34,332:INFO:Visual Rendered Successfully
2024-10-04 13:26:34,416:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:39,671:INFO:Initializing plot_model()
2024-10-04 13:26:39,672:INFO:plot_model(plot=dimension, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:39,672:INFO:Checking exceptions
2024-10-04 13:26:39,674:INFO:Preloading libraries
2024-10-04 13:26:39,674:INFO:Copying training dataset
2024-10-04 13:26:39,674:INFO:Plot type: dimension
2024-10-04 13:26:39,729:INFO:Fitting StandardScaler()
2024-10-04 13:26:39,744:INFO:Fitting PCA()
2024-10-04 13:26:39,801:INFO:Fitting & Transforming Model
2024-10-04 13:26:39,845:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\yellowbrick\features\radviz.py:199: RuntimeWarning: invalid value encountered in divide
  xy = (s * row_).sum(axis=0) / row.sum()

2024-10-04 13:26:39,963:INFO:Visual Rendered Successfully
2024-10-04 13:26:40,050:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:41,023:INFO:Initializing plot_model()
2024-10-04 13:26:41,023:INFO:plot_model(plot=vc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:41,023:INFO:Checking exceptions
2024-10-04 13:26:41,026:INFO:Preloading libraries
2024-10-04 13:26:41,026:INFO:Copying training dataset
2024-10-04 13:26:41,026:INFO:Plot type: vc
2024-10-04 13:26:41,026:INFO:Determining param_name
2024-10-04 13:26:41,026:INFO:param_name: reg_param
2024-10-04 13:26:41,083:INFO:Fitting Model
2024-10-04 13:26:41,113:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,114:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,115:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,116:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,117:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,119:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,120:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,121:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,123:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,124:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,125:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,127:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,128:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,128:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,130:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,132:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,132:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,133:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,133:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,134:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,135:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,138:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,138:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,139:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,139:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,141:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,142:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,142:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,144:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,145:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,146:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,147:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,148:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,151:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,153:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,153:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,155:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,157:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,160:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,160:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,160:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,162:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,163:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,164:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,168:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,168:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,169:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,170:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,171:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,176:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,177:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,179:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,180:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,182:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,183:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,184:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,186:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,186:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,188:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,191:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,192:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,193:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,195:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,195:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,196:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,199:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,199:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,201:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,203:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,208:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,208:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,210:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,210:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,210:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,217:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,219:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,221:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,223:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,223:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,225:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,225:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,227:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,229:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,230:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,230:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,233:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:41,378:INFO:Visual Rendered Successfully
2024-10-04 13:26:41,448:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:47,120:INFO:Initializing plot_model()
2024-10-04 13:26:47,120:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:47,120:INFO:Checking exceptions
2024-10-04 13:26:47,123:INFO:Preloading libraries
2024-10-04 13:26:47,123:INFO:Copying training dataset
2024-10-04 13:26:47,123:INFO:Plot type: confusion_matrix
2024-10-04 13:26:47,177:INFO:Fitting Model
2024-10-04 13:26:47,177:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-04 13:26:47,177:INFO:Scoring test/hold-out set
2024-10-04 13:26:47,260:INFO:Visual Rendered Successfully
2024-10-04 13:26:47,329:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:51,363:INFO:Initializing plot_model()
2024-10-04 13:26:51,363:INFO:plot_model(plot=learning, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:51,364:INFO:Checking exceptions
2024-10-04 13:26:51,366:INFO:Preloading libraries
2024-10-04 13:26:51,366:INFO:Copying training dataset
2024-10-04 13:26:51,366:INFO:Plot type: learning
2024-10-04 13:26:51,421:INFO:Fitting Model
2024-10-04 13:26:51,448:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,449:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,449:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,450:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,452:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,453:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,454:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,457:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,458:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,459:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,460:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,462:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,463:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,464:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,465:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,467:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,467:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,472:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,473:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,474:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,475:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,477:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,478:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,479:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,480:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,481:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,483:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,488:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,490:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,492:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,494:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,498:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,498:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,499:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,500:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,501:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,502:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,505:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,505:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,505:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,507:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,508:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,511:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,511:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,512:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,518:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,519:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,520:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,521:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,524:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,528:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,528:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,528:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,530:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,532:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,534:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,535:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,535:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,536:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,537:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,541:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,542:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,543:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,543:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,544:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,547:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,547:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,548:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,549:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,550:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,551:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,552:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,556:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,556:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,557:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,558:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,559:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,560:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,561:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,562:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,563:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,564:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,565:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,568:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-04 13:26:51,706:INFO:Visual Rendered Successfully
2024-10-04 13:26:51,774:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:53,531:INFO:Initializing plot_model()
2024-10-04 13:26:53,531:INFO:plot_model(plot=rfe, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:53,531:INFO:Checking exceptions
2024-10-04 13:26:54,713:INFO:Initializing plot_model()
2024-10-04 13:26:54,713:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:54,714:INFO:Checking exceptions
2024-10-04 13:26:54,716:INFO:Preloading libraries
2024-10-04 13:26:54,716:INFO:Copying training dataset
2024-10-04 13:26:54,716:INFO:Plot type: pipeline
2024-10-04 13:26:54,787:INFO:Visual Rendered Successfully
2024-10-04 13:26:54,857:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:55,543:INFO:Initializing plot_model()
2024-10-04 13:26:55,543:INFO:plot_model(plot=boundary, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D1261FFC40>, system=True)
2024-10-04 13:26:55,543:INFO:Checking exceptions
2024-10-04 13:26:55,546:INFO:Preloading libraries
2024-10-04 13:26:55,546:INFO:Copying training dataset
2024-10-04 13:26:55,546:INFO:Plot type: boundary
2024-10-04 13:26:55,579:INFO:Fitting StandardScaler()
2024-10-04 13:26:55,582:INFO:Fitting PCA()
2024-10-04 13:26:55,616:INFO:Fitting Model
2024-10-04 13:26:56,438:INFO:Visual Rendered Successfully
2024-10-04 13:26:56,592:INFO:plot_model() successfully completed......................................
2024-10-04 13:26:58,267:INFO:Initializing save_model()
2024-10-04 13:26:58,268:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-04 13:26:58,268:INFO:Adding model into prep_pipe
2024-10-04 13:26:58,268:WARNING:Only Model saved as it was a pipeline.
2024-10-04 13:26:58,271:INFO:best_emg_model.pkl saved in current working directory
2024-10-04 13:26:58,275:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-04 13:26:58,275:INFO:save_model() successfully completed......................................
2024-10-04 13:27:17,081:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:27:17,081:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:27:17,081:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:27:17,081:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:27:17,793:INFO:Initializing load_model()
2024-10-04 13:27:17,794:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-10-04 13:29:39,376:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:29:39,376:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:29:39,376:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:29:39,376:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-04 13:29:40,156:INFO:Initializing load_model()
2024-10-04 13:29:40,156:INFO:load_model(model_name=best_emg_model, platform=None, authentication=None, verbose=True)
2024-10-13 00:11:22,034:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:22,034:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:22,034:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:22,034:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:22,854:INFO:Initializing load_model()
2024-10-13 00:11:22,854:INFO:load_model(model_name=est, platform=None, authentication=None, verbose=True)
2024-10-13 00:11:48,440:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:48,440:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:48,440:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:48,440:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:11:49,207:INFO:Initializing load_model()
2024-10-13 00:11:49,207:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 00:19:52,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:19:52,141:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:19:52,141:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:19:52,141:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:19:52,780:INFO:PyCaret ClassificationExperiment
2024-10-13 00:19:52,780:INFO:Logging name: clf-default-name
2024-10-13 00:19:52,780:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-13 00:19:52,780:INFO:version 3.3.2
2024-10-13 00:19:52,780:INFO:Initializing setup()
2024-10-13 00:19:52,780:INFO:self.USI: 76d3
2024-10-13 00:19:52,780:INFO:self._variable_keys: {'target_param', 'exp_name_log', 'pipeline', 'y', 'log_plots_param', 'fold_groups_param', '_available_plots', 'y_test', 'exp_id', 'html_param', 'X', 'data', 'fix_imbalance', 'seed', 'fold_shuffle_param', 'is_multiclass', 'X_train', 'idx', 'memory', 'n_jobs_param', 'USI', 'X_test', 'y_train', 'gpu_n_jobs_param', 'gpu_param', 'fold_generator', 'logging_param', '_ml_usecase'}
2024-10-13 00:19:52,780:INFO:Checking environment
2024-10-13 00:19:52,780:INFO:python_version: 3.10.14
2024-10-13 00:19:52,780:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-13 00:19:52,780:INFO:machine: AMD64
2024-10-13 00:19:52,780:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-13 00:19:52,786:INFO:Memory: svmem(total=16747855872, available=2406723584, percent=85.6, used=14341132288, free=2406723584)
2024-10-13 00:19:52,786:INFO:Physical Core: 8
2024-10-13 00:19:52,786:INFO:Logical Core: 16
2024-10-13 00:19:52,786:INFO:Checking libraries
2024-10-13 00:19:52,786:INFO:System:
2024-10-13 00:19:52,786:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-13 00:19:52,787:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-10-13 00:19:52,787:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-13 00:19:52,787:INFO:PyCaret required dependencies:
2024-10-13 00:19:52,816:INFO:                 pip: 24.2
2024-10-13 00:19:52,816:INFO:          setuptools: 75.1.0
2024-10-13 00:19:52,816:INFO:             pycaret: 3.3.2
2024-10-13 00:19:52,816:INFO:             IPython: 8.27.0
2024-10-13 00:19:52,816:INFO:          ipywidgets: 8.1.5
2024-10-13 00:19:52,816:INFO:                tqdm: 4.66.5
2024-10-13 00:19:52,816:INFO:               numpy: 1.26.4
2024-10-13 00:19:52,816:INFO:              pandas: 2.1.4
2024-10-13 00:19:52,816:INFO:              jinja2: 3.1.4
2024-10-13 00:19:52,817:INFO:               scipy: 1.11.4
2024-10-13 00:19:52,817:INFO:              joblib: 1.3.2
2024-10-13 00:19:52,817:INFO:             sklearn: 1.4.2
2024-10-13 00:19:52,817:INFO:                pyod: 2.0.2
2024-10-13 00:19:52,817:INFO:            imblearn: 0.12.3
2024-10-13 00:19:52,817:INFO:   category_encoders: 2.6.3
2024-10-13 00:19:52,817:INFO:            lightgbm: 4.5.0
2024-10-13 00:19:52,817:INFO:               numba: 0.60.0
2024-10-13 00:19:52,817:INFO:            requests: 2.32.3
2024-10-13 00:19:52,817:INFO:          matplotlib: 3.7.5
2024-10-13 00:19:52,817:INFO:          scikitplot: 0.3.7
2024-10-13 00:19:52,817:INFO:         yellowbrick: 1.5
2024-10-13 00:19:52,817:INFO:              plotly: 5.24.1
2024-10-13 00:19:52,817:INFO:    plotly-resampler: Not installed
2024-10-13 00:19:52,817:INFO:             kaleido: 0.2.1
2024-10-13 00:19:52,817:INFO:           schemdraw: 0.15
2024-10-13 00:19:52,817:INFO:         statsmodels: 0.14.3
2024-10-13 00:19:52,817:INFO:              sktime: 0.26.0
2024-10-13 00:19:52,817:INFO:               tbats: 1.1.3
2024-10-13 00:19:52,817:INFO:            pmdarima: 2.0.4
2024-10-13 00:19:52,817:INFO:              psutil: 6.0.0
2024-10-13 00:19:52,817:INFO:          markupsafe: 2.1.5
2024-10-13 00:19:52,817:INFO:             pickle5: Not installed
2024-10-13 00:19:52,817:INFO:         cloudpickle: 3.0.0
2024-10-13 00:19:52,817:INFO:         deprecation: 2.1.0
2024-10-13 00:19:52,817:INFO:              xxhash: 3.5.0
2024-10-13 00:19:52,817:INFO:           wurlitzer: Not installed
2024-10-13 00:19:52,817:INFO:PyCaret optional dependencies:
2024-10-13 00:19:53,014:INFO:                shap: Not installed
2024-10-13 00:19:53,014:INFO:           interpret: Not installed
2024-10-13 00:19:53,014:INFO:                umap: Not installed
2024-10-13 00:19:53,014:INFO:     ydata_profiling: Not installed
2024-10-13 00:19:53,014:INFO:  explainerdashboard: Not installed
2024-10-13 00:19:53,014:INFO:             autoviz: Not installed
2024-10-13 00:19:53,014:INFO:           fairlearn: Not installed
2024-10-13 00:19:53,014:INFO:          deepchecks: Not installed
2024-10-13 00:19:53,014:INFO:             xgboost: 2.1.1
2024-10-13 00:19:53,014:INFO:            catboost: Not installed
2024-10-13 00:19:53,014:INFO:              kmodes: Not installed
2024-10-13 00:19:53,014:INFO:             mlxtend: Not installed
2024-10-13 00:19:53,014:INFO:       statsforecast: Not installed
2024-10-13 00:19:53,014:INFO:        tune_sklearn: Not installed
2024-10-13 00:19:53,014:INFO:                 ray: Not installed
2024-10-13 00:19:53,014:INFO:            hyperopt: Not installed
2024-10-13 00:19:53,014:INFO:              optuna: Not installed
2024-10-13 00:19:53,014:INFO:               skopt: Not installed
2024-10-13 00:19:53,014:INFO:              mlflow: Not installed
2024-10-13 00:19:53,015:INFO:              gradio: Not installed
2024-10-13 00:19:53,015:INFO:             fastapi: Not installed
2024-10-13 00:19:53,015:INFO:             uvicorn: Not installed
2024-10-13 00:19:53,015:INFO:              m2cgen: Not installed
2024-10-13 00:19:53,015:INFO:           evidently: Not installed
2024-10-13 00:19:53,015:INFO:               fugue: Not installed
2024-10-13 00:19:53,015:INFO:           streamlit: Not installed
2024-10-13 00:19:53,015:INFO:             prophet: Not installed
2024-10-13 00:19:53,015:INFO:None
2024-10-13 00:19:53,015:INFO:Set up data.
2024-10-13 00:19:53,029:INFO:Set up folding strategy.
2024-10-13 00:19:53,029:INFO:Set up train/test split.
2024-10-13 00:19:53,049:INFO:Set up index.
2024-10-13 00:19:53,050:INFO:Assigning column types.
2024-10-13 00:19:53,055:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-13 00:19:53,101:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-13 00:19:53,107:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:19:53,150:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,154:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,212:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-13 00:19:53,213:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:19:53,245:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,248:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-13 00:19:53,302:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:19:53,336:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,392:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:19:53,426:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,429:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,430:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-13 00:19:53,517:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,520:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,608:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,614:INFO:Preparing preprocessing pipeline...
2024-10-13 00:19:53,617:INFO:Set up label encoding.
2024-10-13 00:19:53,617:INFO:Set up simple imputation.
2024-10-13 00:19:53,671:INFO:Finished creating preprocessing pipeline.
2024-10-13 00:19:53,677:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-13 00:19:53,677:INFO:Creating final display dataframe.
2024-10-13 00:19:53,786:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (6238, 4)
5        Transformed data shape         (6238, 4)
6   Transformed train set shape         (4366, 4)
7    Transformed test set shape         (1872, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              76d3
2024-10-13 00:19:53,872:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,875:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,967:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:19:53,971:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:19:53,974:INFO:setup() successfully completed in 1.21s...............
2024-10-13 00:20:23,576:INFO:PyCaret ClassificationExperiment
2024-10-13 00:20:23,576:INFO:Logging name: clf-default-name
2024-10-13 00:20:23,576:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-13 00:20:23,576:INFO:version 3.3.2
2024-10-13 00:20:23,576:INFO:Initializing setup()
2024-10-13 00:20:23,576:INFO:self.USI: 8195
2024-10-13 00:20:23,576:INFO:self._variable_keys: {'target_param', 'exp_name_log', 'pipeline', 'y', 'log_plots_param', 'fold_groups_param', '_available_plots', 'y_test', 'exp_id', 'html_param', 'X', 'data', 'fix_imbalance', 'seed', 'fold_shuffle_param', 'is_multiclass', 'X_train', 'idx', 'memory', 'n_jobs_param', 'USI', 'X_test', 'y_train', 'gpu_n_jobs_param', 'gpu_param', 'fold_generator', 'logging_param', '_ml_usecase'}
2024-10-13 00:20:23,576:INFO:Checking environment
2024-10-13 00:20:23,576:INFO:python_version: 3.10.14
2024-10-13 00:20:23,576:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-13 00:20:23,576:INFO:machine: AMD64
2024-10-13 00:20:23,576:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-13 00:20:23,582:INFO:Memory: svmem(total=16747855872, available=2872377344, percent=82.8, used=13875478528, free=2872377344)
2024-10-13 00:20:23,582:INFO:Physical Core: 8
2024-10-13 00:20:23,583:INFO:Logical Core: 16
2024-10-13 00:20:23,583:INFO:Checking libraries
2024-10-13 00:20:23,583:INFO:System:
2024-10-13 00:20:23,583:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-13 00:20:23,583:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-10-13 00:20:23,583:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-13 00:20:23,583:INFO:PyCaret required dependencies:
2024-10-13 00:20:23,583:INFO:                 pip: 24.2
2024-10-13 00:20:23,583:INFO:          setuptools: 75.1.0
2024-10-13 00:20:23,583:INFO:             pycaret: 3.3.2
2024-10-13 00:20:23,583:INFO:             IPython: 8.27.0
2024-10-13 00:20:23,583:INFO:          ipywidgets: 8.1.5
2024-10-13 00:20:23,583:INFO:                tqdm: 4.66.5
2024-10-13 00:20:23,583:INFO:               numpy: 1.26.4
2024-10-13 00:20:23,583:INFO:              pandas: 2.1.4
2024-10-13 00:20:23,583:INFO:              jinja2: 3.1.4
2024-10-13 00:20:23,583:INFO:               scipy: 1.11.4
2024-10-13 00:20:23,583:INFO:              joblib: 1.3.2
2024-10-13 00:20:23,583:INFO:             sklearn: 1.4.2
2024-10-13 00:20:23,583:INFO:                pyod: 2.0.2
2024-10-13 00:20:23,583:INFO:            imblearn: 0.12.3
2024-10-13 00:20:23,583:INFO:   category_encoders: 2.6.3
2024-10-13 00:20:23,583:INFO:            lightgbm: 4.5.0
2024-10-13 00:20:23,583:INFO:               numba: 0.60.0
2024-10-13 00:20:23,584:INFO:            requests: 2.32.3
2024-10-13 00:20:23,584:INFO:          matplotlib: 3.7.5
2024-10-13 00:20:23,584:INFO:          scikitplot: 0.3.7
2024-10-13 00:20:23,584:INFO:         yellowbrick: 1.5
2024-10-13 00:20:23,584:INFO:              plotly: 5.24.1
2024-10-13 00:20:23,584:INFO:    plotly-resampler: Not installed
2024-10-13 00:20:23,584:INFO:             kaleido: 0.2.1
2024-10-13 00:20:23,584:INFO:           schemdraw: 0.15
2024-10-13 00:20:23,584:INFO:         statsmodels: 0.14.3
2024-10-13 00:20:23,584:INFO:              sktime: 0.26.0
2024-10-13 00:20:23,584:INFO:               tbats: 1.1.3
2024-10-13 00:20:23,584:INFO:            pmdarima: 2.0.4
2024-10-13 00:20:23,584:INFO:              psutil: 6.0.0
2024-10-13 00:20:23,584:INFO:          markupsafe: 2.1.5
2024-10-13 00:20:23,584:INFO:             pickle5: Not installed
2024-10-13 00:20:23,584:INFO:         cloudpickle: 3.0.0
2024-10-13 00:20:23,584:INFO:         deprecation: 2.1.0
2024-10-13 00:20:23,584:INFO:              xxhash: 3.5.0
2024-10-13 00:20:23,584:INFO:           wurlitzer: Not installed
2024-10-13 00:20:23,584:INFO:PyCaret optional dependencies:
2024-10-13 00:20:23,584:INFO:                shap: Not installed
2024-10-13 00:20:23,584:INFO:           interpret: Not installed
2024-10-13 00:20:23,584:INFO:                umap: Not installed
2024-10-13 00:20:23,584:INFO:     ydata_profiling: Not installed
2024-10-13 00:20:23,584:INFO:  explainerdashboard: Not installed
2024-10-13 00:20:23,584:INFO:             autoviz: Not installed
2024-10-13 00:20:23,584:INFO:           fairlearn: Not installed
2024-10-13 00:20:23,584:INFO:          deepchecks: Not installed
2024-10-13 00:20:23,584:INFO:             xgboost: 2.1.1
2024-10-13 00:20:23,584:INFO:            catboost: Not installed
2024-10-13 00:20:23,584:INFO:              kmodes: Not installed
2024-10-13 00:20:23,585:INFO:             mlxtend: Not installed
2024-10-13 00:20:23,585:INFO:       statsforecast: Not installed
2024-10-13 00:20:23,585:INFO:        tune_sklearn: Not installed
2024-10-13 00:20:23,585:INFO:                 ray: Not installed
2024-10-13 00:20:23,585:INFO:            hyperopt: Not installed
2024-10-13 00:20:23,585:INFO:              optuna: Not installed
2024-10-13 00:20:23,585:INFO:               skopt: Not installed
2024-10-13 00:20:23,585:INFO:              mlflow: Not installed
2024-10-13 00:20:23,585:INFO:              gradio: Not installed
2024-10-13 00:20:23,585:INFO:             fastapi: Not installed
2024-10-13 00:20:23,585:INFO:             uvicorn: Not installed
2024-10-13 00:20:23,585:INFO:              m2cgen: Not installed
2024-10-13 00:20:23,585:INFO:           evidently: Not installed
2024-10-13 00:20:23,585:INFO:               fugue: Not installed
2024-10-13 00:20:23,585:INFO:           streamlit: Not installed
2024-10-13 00:20:23,585:INFO:             prophet: Not installed
2024-10-13 00:20:23,585:INFO:None
2024-10-13 00:20:23,585:INFO:Set up data.
2024-10-13 00:20:23,590:INFO:Set up folding strategy.
2024-10-13 00:20:23,590:INFO:Set up train/test split.
2024-10-13 00:20:23,598:INFO:Set up index.
2024-10-13 00:20:23,598:INFO:Assigning column types.
2024-10-13 00:20:23,601:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-13 00:20:23,647:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-13 00:20:23,648:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:20:23,681:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:23,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:23,736:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-13 00:20:23,737:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:20:23,772:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:23,775:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:23,775:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-13 00:20:23,828:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:20:23,864:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:23,867:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:23,997:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 00:20:24,032:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:24,037:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:24,038:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-13 00:20:24,122:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:24,127:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:24,213:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:24,216:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:24,218:INFO:Preparing preprocessing pipeline...
2024-10-13 00:20:24,219:INFO:Set up label encoding.
2024-10-13 00:20:24,219:INFO:Set up simple imputation.
2024-10-13 00:20:24,249:INFO:Finished creating preprocessing pipeline.
2024-10-13 00:20:24,253:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-13 00:20:24,253:INFO:Creating final display dataframe.
2024-10-13 00:20:24,344:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (6238, 4)
5        Transformed data shape         (6238, 4)
6   Transformed train set shape         (4366, 4)
7    Transformed test set shape         (1872, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              8195
2024-10-13 00:20:24,426:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:24,429:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:24,507:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 00:20:24,511:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 00:20:24,512:INFO:setup() successfully completed in 0.94s...............
2024-10-13 00:20:40,677:INFO:Initializing compare_models()
2024-10-13 00:20:40,677:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-13 00:20:40,678:INFO:Checking exceptions
2024-10-13 00:20:40,683:INFO:Preparing display monitor
2024-10-13 00:20:40,691:INFO:Initializing Logistic Regression
2024-10-13 00:20:40,691:INFO:Total runtime is 0.0 minutes
2024-10-13 00:20:40,692:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:40,693:INFO:Initializing create_model()
2024-10-13 00:20:40,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:40,694:INFO:Checking exceptions
2024-10-13 00:20:40,694:INFO:Importing libraries
2024-10-13 00:20:40,694:INFO:Copying training dataset
2024-10-13 00:20:40,698:INFO:Defining folds
2024-10-13 00:20:40,698:INFO:Declaring metric variables
2024-10-13 00:20:40,698:INFO:Importing untrained model
2024-10-13 00:20:40,699:INFO:Logistic Regression Imported successfully
2024-10-13 00:20:40,699:INFO:Starting cross validation
2024-10-13 00:20:40,701:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:48,502:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,518:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,532:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,543:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,557:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,570:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,622:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,636:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,699:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,713:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,715:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,721:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,725:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,726:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,726:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,726:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,726:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,726:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,729:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,736:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,737:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,737:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,744:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,746:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:48,769:INFO:Calculating mean and std
2024-10-13 00:20:48,772:INFO:Creating metrics dataframe
2024-10-13 00:20:48,777:INFO:Uploading results into container
2024-10-13 00:20:48,780:INFO:Uploading model into container now
2024-10-13 00:20:48,783:INFO:_master_model_container: 1
2024-10-13 00:20:48,783:INFO:_display_container: 2
2024-10-13 00:20:48,785:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-13 00:20:48,785:INFO:create_model() successfully completed......................................
2024-10-13 00:20:48,952:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:48,952:INFO:Creating metrics dataframe
2024-10-13 00:20:48,957:INFO:Initializing K Neighbors Classifier
2024-10-13 00:20:48,957:INFO:Total runtime is 0.13777297735214233 minutes
2024-10-13 00:20:48,957:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:48,957:INFO:Initializing create_model()
2024-10-13 00:20:48,957:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:48,957:INFO:Checking exceptions
2024-10-13 00:20:48,957:INFO:Importing libraries
2024-10-13 00:20:48,958:INFO:Copying training dataset
2024-10-13 00:20:48,963:INFO:Defining folds
2024-10-13 00:20:48,963:INFO:Declaring metric variables
2024-10-13 00:20:48,963:INFO:Importing untrained model
2024-10-13 00:20:48,964:INFO:K Neighbors Classifier Imported successfully
2024-10-13 00:20:48,965:INFO:Starting cross validation
2024-10-13 00:20:48,966:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:49,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,204:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,216:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,219:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,232:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:49,234:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,196:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,196:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,197:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,210:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,212:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,229:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,229:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,231:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,248:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,275:INFO:Calculating mean and std
2024-10-13 00:20:53,277:INFO:Creating metrics dataframe
2024-10-13 00:20:53,281:INFO:Uploading results into container
2024-10-13 00:20:53,283:INFO:Uploading model into container now
2024-10-13 00:20:53,285:INFO:_master_model_container: 2
2024-10-13 00:20:53,285:INFO:_display_container: 2
2024-10-13 00:20:53,285:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-13 00:20:53,285:INFO:create_model() successfully completed......................................
2024-10-13 00:20:53,410:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:53,410:INFO:Creating metrics dataframe
2024-10-13 00:20:53,416:INFO:Initializing Naive Bayes
2024-10-13 00:20:53,416:INFO:Total runtime is 0.21209601958592733 minutes
2024-10-13 00:20:53,416:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:53,417:INFO:Initializing create_model()
2024-10-13 00:20:53,417:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:53,417:INFO:Checking exceptions
2024-10-13 00:20:53,417:INFO:Importing libraries
2024-10-13 00:20:53,418:INFO:Copying training dataset
2024-10-13 00:20:53,423:INFO:Defining folds
2024-10-13 00:20:53,423:INFO:Declaring metric variables
2024-10-13 00:20:53,424:INFO:Importing untrained model
2024-10-13 00:20:53,425:INFO:Naive Bayes Imported successfully
2024-10-13 00:20:53,425:INFO:Starting cross validation
2024-10-13 00:20:53,426:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:53,498:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,499:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,499:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,500:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,506:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,510:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,510:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,510:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,511:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,511:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,512:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,513:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,514:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,518:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,520:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,524:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,526:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,529:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,534:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,536:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,536:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,540:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,546:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,565:INFO:Calculating mean and std
2024-10-13 00:20:53,568:INFO:Creating metrics dataframe
2024-10-13 00:20:53,571:INFO:Uploading results into container
2024-10-13 00:20:53,572:INFO:Uploading model into container now
2024-10-13 00:20:53,573:INFO:_master_model_container: 3
2024-10-13 00:20:53,573:INFO:_display_container: 2
2024-10-13 00:20:53,574:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-13 00:20:53,574:INFO:create_model() successfully completed......................................
2024-10-13 00:20:53,667:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:53,668:INFO:Creating metrics dataframe
2024-10-13 00:20:53,671:INFO:Initializing Decision Tree Classifier
2024-10-13 00:20:53,672:INFO:Total runtime is 0.21633446613947552 minutes
2024-10-13 00:20:53,672:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:53,672:INFO:Initializing create_model()
2024-10-13 00:20:53,672:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:53,672:INFO:Checking exceptions
2024-10-13 00:20:53,672:INFO:Importing libraries
2024-10-13 00:20:53,672:INFO:Copying training dataset
2024-10-13 00:20:53,678:INFO:Defining folds
2024-10-13 00:20:53,678:INFO:Declaring metric variables
2024-10-13 00:20:53,679:INFO:Importing untrained model
2024-10-13 00:20:53,679:INFO:Decision Tree Classifier Imported successfully
2024-10-13 00:20:53,680:INFO:Starting cross validation
2024-10-13 00:20:53,681:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:53,771:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,772:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,772:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,776:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,778:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,779:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,782:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,787:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,787:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,788:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,788:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,790:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,793:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,794:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,795:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,796:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,797:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,798:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,799:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,799:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,802:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,808:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,810:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,818:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:53,844:INFO:Calculating mean and std
2024-10-13 00:20:53,846:INFO:Creating metrics dataframe
2024-10-13 00:20:53,849:INFO:Uploading results into container
2024-10-13 00:20:53,850:INFO:Uploading model into container now
2024-10-13 00:20:53,851:INFO:_master_model_container: 4
2024-10-13 00:20:53,851:INFO:_display_container: 2
2024-10-13 00:20:53,852:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-13 00:20:53,853:INFO:create_model() successfully completed......................................
2024-10-13 00:20:53,943:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:53,943:INFO:Creating metrics dataframe
2024-10-13 00:20:53,947:INFO:Initializing SVM - Linear Kernel
2024-10-13 00:20:53,947:INFO:Total runtime is 0.22094221115112306 minutes
2024-10-13 00:20:53,947:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:53,947:INFO:Initializing create_model()
2024-10-13 00:20:53,948:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:53,948:INFO:Checking exceptions
2024-10-13 00:20:53,948:INFO:Importing libraries
2024-10-13 00:20:53,948:INFO:Copying training dataset
2024-10-13 00:20:53,953:INFO:Defining folds
2024-10-13 00:20:53,953:INFO:Declaring metric variables
2024-10-13 00:20:53,954:INFO:Importing untrained model
2024-10-13 00:20:53,954:INFO:SVM - Linear Kernel Imported successfully
2024-10-13 00:20:53,955:INFO:Starting cross validation
2024-10-13 00:20:53,956:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:54,054:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,054:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,057:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,066:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,066:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,071:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,075:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,076:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,082:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,083:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,084:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,087:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,088:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,090:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,092:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,095:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,097:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,098:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,098:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,099:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,101:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,114:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,137:INFO:Calculating mean and std
2024-10-13 00:20:54,139:INFO:Creating metrics dataframe
2024-10-13 00:20:54,142:INFO:Uploading results into container
2024-10-13 00:20:54,143:INFO:Uploading model into container now
2024-10-13 00:20:54,144:INFO:_master_model_container: 5
2024-10-13 00:20:54,144:INFO:_display_container: 2
2024-10-13 00:20:54,145:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-13 00:20:54,145:INFO:create_model() successfully completed......................................
2024-10-13 00:20:54,234:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:54,234:INFO:Creating metrics dataframe
2024-10-13 00:20:54,237:INFO:Initializing Ridge Classifier
2024-10-13 00:20:54,237:INFO:Total runtime is 0.2257765571276347 minutes
2024-10-13 00:20:54,238:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:54,238:INFO:Initializing create_model()
2024-10-13 00:20:54,238:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:54,238:INFO:Checking exceptions
2024-10-13 00:20:54,238:INFO:Importing libraries
2024-10-13 00:20:54,238:INFO:Copying training dataset
2024-10-13 00:20:54,243:INFO:Defining folds
2024-10-13 00:20:54,244:INFO:Declaring metric variables
2024-10-13 00:20:54,244:INFO:Importing untrained model
2024-10-13 00:20:54,245:INFO:Ridge Classifier Imported successfully
2024-10-13 00:20:54,245:INFO:Starting cross validation
2024-10-13 00:20:54,246:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:54,313:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,313:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,314:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,316:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,316:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,316:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,316:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,317:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,319:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,324:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,324:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,326:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,327:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,327:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,327:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,328:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,329:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,330:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,331:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,338:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,338:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,339:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,342:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,342:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,346:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:54,371:INFO:Calculating mean and std
2024-10-13 00:20:54,373:INFO:Creating metrics dataframe
2024-10-13 00:20:54,376:INFO:Uploading results into container
2024-10-13 00:20:54,377:INFO:Uploading model into container now
2024-10-13 00:20:54,378:INFO:_master_model_container: 6
2024-10-13 00:20:54,378:INFO:_display_container: 2
2024-10-13 00:20:54,379:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-13 00:20:54,379:INFO:create_model() successfully completed......................................
2024-10-13 00:20:54,477:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:54,477:INFO:Creating metrics dataframe
2024-10-13 00:20:54,482:INFO:Initializing Random Forest Classifier
2024-10-13 00:20:54,482:INFO:Total runtime is 0.22984824975331625 minutes
2024-10-13 00:20:54,483:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:54,483:INFO:Initializing create_model()
2024-10-13 00:20:54,483:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:54,483:INFO:Checking exceptions
2024-10-13 00:20:54,483:INFO:Importing libraries
2024-10-13 00:20:54,483:INFO:Copying training dataset
2024-10-13 00:20:54,488:INFO:Defining folds
2024-10-13 00:20:54,488:INFO:Declaring metric variables
2024-10-13 00:20:54,489:INFO:Importing untrained model
2024-10-13 00:20:54,489:INFO:Random Forest Classifier Imported successfully
2024-10-13 00:20:54,489:INFO:Starting cross validation
2024-10-13 00:20:54,490:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:55,529:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,536:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,536:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,537:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,538:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,545:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,549:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,552:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,553:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,553:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,554:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,555:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,560:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,565:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,565:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,569:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,569:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,570:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,572:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,582:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,582:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,610:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,629:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,641:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,656:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,821:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,828:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,836:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:55,861:INFO:Calculating mean and std
2024-10-13 00:20:55,863:INFO:Creating metrics dataframe
2024-10-13 00:20:55,866:INFO:Uploading results into container
2024-10-13 00:20:55,866:INFO:Uploading model into container now
2024-10-13 00:20:55,867:INFO:_master_model_container: 7
2024-10-13 00:20:55,867:INFO:_display_container: 2
2024-10-13 00:20:55,867:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-13 00:20:55,868:INFO:create_model() successfully completed......................................
2024-10-13 00:20:55,952:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:55,952:INFO:Creating metrics dataframe
2024-10-13 00:20:55,955:INFO:Initializing Quadratic Discriminant Analysis
2024-10-13 00:20:55,955:INFO:Total runtime is 0.25440051158269245 minutes
2024-10-13 00:20:55,956:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:55,956:INFO:Initializing create_model()
2024-10-13 00:20:55,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:55,956:INFO:Checking exceptions
2024-10-13 00:20:55,956:INFO:Importing libraries
2024-10-13 00:20:55,956:INFO:Copying training dataset
2024-10-13 00:20:55,960:INFO:Defining folds
2024-10-13 00:20:55,960:INFO:Declaring metric variables
2024-10-13 00:20:55,960:INFO:Importing untrained model
2024-10-13 00:20:55,960:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-13 00:20:55,960:INFO:Starting cross validation
2024-10-13 00:20:55,961:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:56,004:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,004:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,004:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,004:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,005:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,005:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,006:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,009:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,011:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,013:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:20:56,031:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,032:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,032:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,032:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,032:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,032:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,033:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,038:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,040:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,041:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,043:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,043:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,044:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,044:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,044:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,044:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,051:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,051:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,052:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,054:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,054:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,054:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,055:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,056:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,061:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,064:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,067:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,092:INFO:Calculating mean and std
2024-10-13 00:20:56,094:INFO:Creating metrics dataframe
2024-10-13 00:20:56,097:INFO:Uploading results into container
2024-10-13 00:20:56,098:INFO:Uploading model into container now
2024-10-13 00:20:56,099:INFO:_master_model_container: 8
2024-10-13 00:20:56,099:INFO:_display_container: 2
2024-10-13 00:20:56,099:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 00:20:56,099:INFO:create_model() successfully completed......................................
2024-10-13 00:20:56,193:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:56,193:INFO:Creating metrics dataframe
2024-10-13 00:20:56,196:INFO:Initializing Ada Boost Classifier
2024-10-13 00:20:56,196:INFO:Total runtime is 0.2584208607673645 minutes
2024-10-13 00:20:56,197:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:56,197:INFO:Initializing create_model()
2024-10-13 00:20:56,197:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:56,197:INFO:Checking exceptions
2024-10-13 00:20:56,197:INFO:Importing libraries
2024-10-13 00:20:56,197:INFO:Copying training dataset
2024-10-13 00:20:56,202:INFO:Defining folds
2024-10-13 00:20:56,202:INFO:Declaring metric variables
2024-10-13 00:20:56,202:INFO:Importing untrained model
2024-10-13 00:20:56,202:INFO:Ada Boost Classifier Imported successfully
2024-10-13 00:20:56,204:INFO:Starting cross validation
2024-10-13 00:20:56,204:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:56,240:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,241:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,248:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,249:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,255:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,255:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,258:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,262:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,265:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 00:20:56,698:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,701:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,706:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,707:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,711:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,712:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,713:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,720:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,720:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,721:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,722:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,726:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,726:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,727:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,730:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,731:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,734:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,734:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,734:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,737:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,741:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,745:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,746:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:56,768:INFO:Calculating mean and std
2024-10-13 00:20:56,770:INFO:Creating metrics dataframe
2024-10-13 00:20:56,773:INFO:Uploading results into container
2024-10-13 00:20:56,774:INFO:Uploading model into container now
2024-10-13 00:20:56,775:INFO:_master_model_container: 9
2024-10-13 00:20:56,775:INFO:_display_container: 2
2024-10-13 00:20:56,776:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-13 00:20:56,776:INFO:create_model() successfully completed......................................
2024-10-13 00:20:56,870:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:56,870:INFO:Creating metrics dataframe
2024-10-13 00:20:56,874:INFO:Initializing Gradient Boosting Classifier
2024-10-13 00:20:56,874:INFO:Total runtime is 0.2697173237800598 minutes
2024-10-13 00:20:56,874:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:56,874:INFO:Initializing create_model()
2024-10-13 00:20:56,874:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:56,874:INFO:Checking exceptions
2024-10-13 00:20:56,874:INFO:Importing libraries
2024-10-13 00:20:56,874:INFO:Copying training dataset
2024-10-13 00:20:56,879:INFO:Defining folds
2024-10-13 00:20:56,879:INFO:Declaring metric variables
2024-10-13 00:20:56,880:INFO:Importing untrained model
2024-10-13 00:20:56,880:INFO:Gradient Boosting Classifier Imported successfully
2024-10-13 00:20:56,882:INFO:Starting cross validation
2024-10-13 00:20:56,883:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:57,941:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,943:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,948:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,950:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,954:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,956:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,957:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,957:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,957:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,957:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,961:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,964:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,965:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,966:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,968:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,968:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,969:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,970:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,970:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,973:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,976:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,977:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,978:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,978:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,980:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,981:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,985:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:57,996:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,019:INFO:Calculating mean and std
2024-10-13 00:20:58,022:INFO:Creating metrics dataframe
2024-10-13 00:20:58,025:INFO:Uploading results into container
2024-10-13 00:20:58,026:INFO:Uploading model into container now
2024-10-13 00:20:58,026:INFO:_master_model_container: 10
2024-10-13 00:20:58,027:INFO:_display_container: 2
2024-10-13 00:20:58,027:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-13 00:20:58,028:INFO:create_model() successfully completed......................................
2024-10-13 00:20:58,117:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:58,117:INFO:Creating metrics dataframe
2024-10-13 00:20:58,121:INFO:Initializing Linear Discriminant Analysis
2024-10-13 00:20:58,122:INFO:Total runtime is 0.29052323500315347 minutes
2024-10-13 00:20:58,122:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:58,122:INFO:Initializing create_model()
2024-10-13 00:20:58,122:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:58,122:INFO:Checking exceptions
2024-10-13 00:20:58,122:INFO:Importing libraries
2024-10-13 00:20:58,122:INFO:Copying training dataset
2024-10-13 00:20:58,128:INFO:Defining folds
2024-10-13 00:20:58,128:INFO:Declaring metric variables
2024-10-13 00:20:58,129:INFO:Importing untrained model
2024-10-13 00:20:58,129:INFO:Linear Discriminant Analysis Imported successfully
2024-10-13 00:20:58,130:INFO:Starting cross validation
2024-10-13 00:20:58,131:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:58,189:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,194:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,195:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,197:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,199:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,200:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,201:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,203:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,203:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,204:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,208:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,209:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,210:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,211:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,213:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,214:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,218:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,219:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,222:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,225:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,226:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,227:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,231:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,255:INFO:Calculating mean and std
2024-10-13 00:20:58,257:INFO:Creating metrics dataframe
2024-10-13 00:20:58,260:INFO:Uploading results into container
2024-10-13 00:20:58,261:INFO:Uploading model into container now
2024-10-13 00:20:58,262:INFO:_master_model_container: 11
2024-10-13 00:20:58,262:INFO:_display_container: 2
2024-10-13 00:20:58,263:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-13 00:20:58,263:INFO:create_model() successfully completed......................................
2024-10-13 00:20:58,355:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:58,355:INFO:Creating metrics dataframe
2024-10-13 00:20:58,359:INFO:Initializing Extra Trees Classifier
2024-10-13 00:20:58,359:INFO:Total runtime is 0.29447779258092244 minutes
2024-10-13 00:20:58,359:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:58,359:INFO:Initializing create_model()
2024-10-13 00:20:58,359:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:58,359:INFO:Checking exceptions
2024-10-13 00:20:58,359:INFO:Importing libraries
2024-10-13 00:20:58,360:INFO:Copying training dataset
2024-10-13 00:20:58,365:INFO:Defining folds
2024-10-13 00:20:58,365:INFO:Declaring metric variables
2024-10-13 00:20:58,366:INFO:Importing untrained model
2024-10-13 00:20:58,366:INFO:Extra Trees Classifier Imported successfully
2024-10-13 00:20:58,367:INFO:Starting cross validation
2024-10-13 00:20:58,367:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:20:58,928:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,929:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,929:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,930:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,932:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,942:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,943:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,946:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,946:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,949:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,949:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,951:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,958:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,958:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,960:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,960:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,962:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,962:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,965:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,976:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,977:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,978:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,989:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:58,996:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:59,018:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:59,024:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:59,031:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:59,094:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:59,100:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:59,107:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:20:59,132:INFO:Calculating mean and std
2024-10-13 00:20:59,134:INFO:Creating metrics dataframe
2024-10-13 00:20:59,136:INFO:Uploading results into container
2024-10-13 00:20:59,137:INFO:Uploading model into container now
2024-10-13 00:20:59,137:INFO:_master_model_container: 12
2024-10-13 00:20:59,138:INFO:_display_container: 2
2024-10-13 00:20:59,138:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-13 00:20:59,139:INFO:create_model() successfully completed......................................
2024-10-13 00:20:59,226:INFO:SubProcess create_model() end ==================================
2024-10-13 00:20:59,226:INFO:Creating metrics dataframe
2024-10-13 00:20:59,229:INFO:Initializing Extreme Gradient Boosting
2024-10-13 00:20:59,229:INFO:Total runtime is 0.3089712103207906 minutes
2024-10-13 00:20:59,230:INFO:SubProcess create_model() called ==================================
2024-10-13 00:20:59,230:INFO:Initializing create_model()
2024-10-13 00:20:59,230:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:20:59,230:INFO:Checking exceptions
2024-10-13 00:20:59,230:INFO:Importing libraries
2024-10-13 00:20:59,230:INFO:Copying training dataset
2024-10-13 00:20:59,234:INFO:Defining folds
2024-10-13 00:20:59,234:INFO:Declaring metric variables
2024-10-13 00:20:59,234:INFO:Importing untrained model
2024-10-13 00:20:59,236:INFO:Extreme Gradient Boosting Imported successfully
2024-10-13 00:20:59,236:INFO:Starting cross validation
2024-10-13 00:20:59,237:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:21:00,373:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,388:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,396:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,396:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,411:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,451:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,457:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,462:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,466:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,473:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,474:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,477:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,478:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,482:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,486:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,487:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,489:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,492:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,493:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,496:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,497:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,499:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,502:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,504:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,506:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,510:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,511:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:00,532:INFO:Calculating mean and std
2024-10-13 00:21:00,535:INFO:Creating metrics dataframe
2024-10-13 00:21:00,538:INFO:Uploading results into container
2024-10-13 00:21:00,539:INFO:Uploading model into container now
2024-10-13 00:21:00,540:INFO:_master_model_container: 13
2024-10-13 00:21:00,540:INFO:_display_container: 2
2024-10-13 00:21:00,541:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-13 00:21:00,542:INFO:create_model() successfully completed......................................
2024-10-13 00:21:00,629:INFO:SubProcess create_model() end ==================================
2024-10-13 00:21:00,629:INFO:Creating metrics dataframe
2024-10-13 00:21:00,632:INFO:Initializing Light Gradient Boosting Machine
2024-10-13 00:21:00,632:INFO:Total runtime is 0.3323615868886312 minutes
2024-10-13 00:21:00,632:INFO:SubProcess create_model() called ==================================
2024-10-13 00:21:00,632:INFO:Initializing create_model()
2024-10-13 00:21:00,632:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:21:00,632:INFO:Checking exceptions
2024-10-13 00:21:00,632:INFO:Importing libraries
2024-10-13 00:21:00,632:INFO:Copying training dataset
2024-10-13 00:21:00,637:INFO:Defining folds
2024-10-13 00:21:00,638:INFO:Declaring metric variables
2024-10-13 00:21:00,638:INFO:Importing untrained model
2024-10-13 00:21:00,639:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-13 00:21:00,639:INFO:Starting cross validation
2024-10-13 00:21:00,640:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:21:02,107:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,111:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,116:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,121:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,125:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,127:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,140:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,144:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,144:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,150:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,153:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,202:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,215:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,224:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,226:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,236:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,238:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,249:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,253:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,261:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,267:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,273:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,329:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,331:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,344:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,353:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,356:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,385:INFO:Calculating mean and std
2024-10-13 00:21:02,388:INFO:Creating metrics dataframe
2024-10-13 00:21:02,391:INFO:Uploading results into container
2024-10-13 00:21:02,392:INFO:Uploading model into container now
2024-10-13 00:21:02,394:INFO:_master_model_container: 14
2024-10-13 00:21:02,394:INFO:_display_container: 2
2024-10-13 00:21:02,395:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-13 00:21:02,395:INFO:create_model() successfully completed......................................
2024-10-13 00:21:02,501:INFO:SubProcess create_model() end ==================================
2024-10-13 00:21:02,501:INFO:Creating metrics dataframe
2024-10-13 00:21:02,505:INFO:Initializing Dummy Classifier
2024-10-13 00:21:02,505:INFO:Total runtime is 0.3635680437088013 minutes
2024-10-13 00:21:02,506:INFO:SubProcess create_model() called ==================================
2024-10-13 00:21:02,506:INFO:Initializing create_model()
2024-10-13 00:21:02,506:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C0522355D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:21:02,506:INFO:Checking exceptions
2024-10-13 00:21:02,506:INFO:Importing libraries
2024-10-13 00:21:02,506:INFO:Copying training dataset
2024-10-13 00:21:02,512:INFO:Defining folds
2024-10-13 00:21:02,512:INFO:Declaring metric variables
2024-10-13 00:21:02,512:INFO:Importing untrained model
2024-10-13 00:21:02,513:INFO:Dummy Classifier Imported successfully
2024-10-13 00:21:02,514:INFO:Starting cross validation
2024-10-13 00:21:02,515:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 00:21:02,565:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,572:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,575:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,576:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,580:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,582:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,583:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,588:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,590:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,591:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,592:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,592:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,594:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,595:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,600:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,600:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,602:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,602:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,604:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,604:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 00:21:02,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,610:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,614:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 00:21:02,632:INFO:Calculating mean and std
2024-10-13 00:21:02,634:INFO:Creating metrics dataframe
2024-10-13 00:21:02,637:INFO:Uploading results into container
2024-10-13 00:21:02,638:INFO:Uploading model into container now
2024-10-13 00:21:02,639:INFO:_master_model_container: 15
2024-10-13 00:21:02,639:INFO:_display_container: 2
2024-10-13 00:21:02,640:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-13 00:21:02,640:INFO:create_model() successfully completed......................................
2024-10-13 00:21:02,737:INFO:SubProcess create_model() end ==================================
2024-10-13 00:21:02,738:INFO:Creating metrics dataframe
2024-10-13 00:21:02,745:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-13 00:21:02,748:INFO:Initializing create_model()
2024-10-13 00:21:02,748:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:21:02,748:INFO:Checking exceptions
2024-10-13 00:21:02,749:INFO:Importing libraries
2024-10-13 00:21:02,749:INFO:Copying training dataset
2024-10-13 00:21:02,753:INFO:Defining folds
2024-10-13 00:21:02,753:INFO:Declaring metric variables
2024-10-13 00:21:02,753:INFO:Importing untrained model
2024-10-13 00:21:02,753:INFO:Declaring custom model
2024-10-13 00:21:02,754:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-13 00:21:02,755:INFO:Cross validation set to False
2024-10-13 00:21:02,755:INFO:Fitting Model
2024-10-13 00:21:02,765:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:02,766:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 00:21:02,767:INFO:create_model() successfully completed......................................
2024-10-13 00:21:02,864:INFO:_master_model_container: 15
2024-10-13 00:21:02,865:INFO:_display_container: 2
2024-10-13 00:21:02,865:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 00:21:02,865:INFO:compare_models() successfully completed......................................
2024-10-13 00:21:14,468:INFO:Initializing finalize_model()
2024-10-13 00:21:14,469:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-13 00:21:14,469:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 00:21:14,471:INFO:Initializing create_model()
2024-10-13 00:21:14,472:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 00:21:14,472:INFO:Checking exceptions
2024-10-13 00:21:14,473:INFO:Importing libraries
2024-10-13 00:21:14,473:INFO:Copying training dataset
2024-10-13 00:21:14,473:INFO:Defining folds
2024-10-13 00:21:14,473:INFO:Declaring metric variables
2024-10-13 00:21:14,473:INFO:Importing untrained model
2024-10-13 00:21:14,473:INFO:Declaring custom model
2024-10-13 00:21:14,474:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-13 00:21:14,474:INFO:Cross validation set to False
2024-10-13 00:21:14,474:INFO:Fitting Model
2024-10-13 00:21:14,485:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:14,491:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-13 00:21:14,491:INFO:create_model() successfully completed......................................
2024-10-13 00:21:14,568:INFO:_master_model_container: 15
2024-10-13 00:21:14,568:INFO:_display_container: 2
2024-10-13 00:21:14,574:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-13 00:21:14,575:INFO:finalize_model() successfully completed......................................
2024-10-13 00:21:16,825:INFO:Initializing evaluate_model()
2024-10-13 00:21:16,825:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-13 00:21:16,847:INFO:Initializing plot_model()
2024-10-13 00:21:16,848:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, system=True)
2024-10-13 00:21:16,848:INFO:Checking exceptions
2024-10-13 00:21:16,851:INFO:Preloading libraries
2024-10-13 00:21:16,851:INFO:Copying training dataset
2024-10-13 00:21:16,851:INFO:Plot type: pipeline
2024-10-13 00:21:17,103:INFO:Visual Rendered Successfully
2024-10-13 00:21:17,185:INFO:plot_model() successfully completed......................................
2024-10-13 00:21:23,388:INFO:Initializing plot_model()
2024-10-13 00:21:23,388:INFO:plot_model(plot=learning, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, system=True)
2024-10-13 00:21:23,388:INFO:Checking exceptions
2024-10-13 00:21:23,391:INFO:Preloading libraries
2024-10-13 00:21:23,392:INFO:Copying training dataset
2024-10-13 00:21:23,392:INFO:Plot type: learning
2024-10-13 00:21:23,488:INFO:Fitting Model
2024-10-13 00:21:23,529:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,529:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,532:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,532:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,536:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,538:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,540:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,541:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,541:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,544:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,546:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,548:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,549:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,549:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,550:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,551:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,553:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,554:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,556:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,558:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,558:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,561:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,561:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,563:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,566:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,566:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,568:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,570:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,573:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,573:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,577:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,577:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,578:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,580:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,583:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,583:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,586:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,586:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,588:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,592:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,593:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,593:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,596:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,598:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,601:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,602:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,604:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,609:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,611:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,616:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,617:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,617:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,618:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,622:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,624:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,624:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,626:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,627:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,629:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,630:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,633:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,634:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,636:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,638:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,639:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,639:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,642:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,643:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,644:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,646:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,653:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,653:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,654:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,657:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,658:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,660:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,661:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,665:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,665:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,666:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,669:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,669:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,671:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,677:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,677:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,679:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,680:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,681:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 00:21:23,920:INFO:Visual Rendered Successfully
2024-10-13 00:21:24,016:INFO:plot_model() successfully completed......................................
2024-10-13 00:21:29,027:INFO:Initializing plot_model()
2024-10-13 00:21:29,027:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, system=True)
2024-10-13 00:21:29,027:INFO:Checking exceptions
2024-10-13 00:21:30,183:INFO:Initializing plot_model()
2024-10-13 00:21:30,183:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, system=True)
2024-10-13 00:21:30,183:INFO:Checking exceptions
2024-10-13 00:21:31,083:INFO:Initializing plot_model()
2024-10-13 00:21:31,083:INFO:plot_model(plot=rfe, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, system=True)
2024-10-13 00:21:31,083:INFO:Checking exceptions
2024-10-13 00:21:32,218:INFO:Initializing plot_model()
2024-10-13 00:21:32,218:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, system=True)
2024-10-13 00:21:32,220:INFO:Checking exceptions
2024-10-13 00:21:32,222:INFO:Preloading libraries
2024-10-13 00:21:32,222:INFO:Copying training dataset
2024-10-13 00:21:32,222:INFO:Plot type: auc
2024-10-13 00:21:32,323:INFO:Fitting Model
2024-10-13 00:21:32,326:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-13 00:21:32,327:INFO:Scoring test/hold-out set
2024-10-13 00:21:32,560:INFO:Visual Rendered Successfully
2024-10-13 00:21:32,674:INFO:plot_model() successfully completed......................................
2024-10-13 00:21:33,890:INFO:Initializing plot_model()
2024-10-13 00:21:33,890:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C00E71C7C0>, system=True)
2024-10-13 00:21:33,890:INFO:Checking exceptions
2024-10-13 00:21:33,892:INFO:Preloading libraries
2024-10-13 00:21:33,892:INFO:Copying training dataset
2024-10-13 00:21:33,892:INFO:Plot type: confusion_matrix
2024-10-13 00:21:33,972:INFO:Fitting Model
2024-10-13 00:21:33,973:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-13 00:21:33,973:INFO:Scoring test/hold-out set
2024-10-13 00:21:34,110:INFO:Visual Rendered Successfully
2024-10-13 00:21:34,190:INFO:plot_model() successfully completed......................................
2024-10-13 00:21:44,606:INFO:Initializing save_model()
2024-10-13 00:21:44,606:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-13 00:21:44,606:INFO:Adding model into prep_pipe
2024-10-13 00:21:44,606:WARNING:Only Model saved as it was a pipeline.
2024-10-13 00:21:44,611:INFO:best_emg_model.pkl saved in current working directory
2024-10-13 00:21:44,617:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-13 00:21:44,617:INFO:save_model() successfully completed......................................
2024-10-13 00:22:19,800:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:22:19,801:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:22:19,801:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:22:19,801:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 00:22:21,210:INFO:Initializing load_model()
2024-10-13 00:22:21,211:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:48:59,427:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:48:59,427:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:48:59,435:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:48:59,435:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:00,612:INFO:Initializing load_model()
2024-10-13 13:49:00,612:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:49:28,555:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:28,555:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:28,555:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:28,555:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:29,380:INFO:Initializing load_model()
2024-10-13 13:49:29,380:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:49:59,113:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:59,113:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:59,113:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:59,113:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:49:59,969:INFO:Initializing load_model()
2024-10-13 13:49:59,969:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:50:18,253:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:50:18,253:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:50:18,253:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:50:18,253:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:50:19,083:INFO:Initializing load_model()
2024-10-13 13:50:19,083:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:51:55,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:51:55,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:51:55,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:51:55,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:51:56,680:INFO:Initializing load_model()
2024-10-13 13:51:56,680:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:52:09,996:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:09,996:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:09,996:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:09,996:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:10,780:INFO:Initializing load_model()
2024-10-13 13:52:10,780:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:52:46,096:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:46,096:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:46,096:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:46,096:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:52:46,856:INFO:Initializing load_model()
2024-10-13 13:52:46,856:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 13:54:52,250:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:54:52,250:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:54:52,250:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:54:52,250:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 13:54:53,363:INFO:Initializing load_model()
2024-10-13 13:54:53,363:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-13 14:00:47,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 14:00:47,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 14:00:47,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 14:00:47,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-13 14:00:47,569:INFO:PyCaret ClassificationExperiment
2024-10-13 14:00:47,569:INFO:Logging name: clf-default-name
2024-10-13 14:00:47,569:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-13 14:00:47,569:INFO:version 3.3.2
2024-10-13 14:00:47,569:INFO:Initializing setup()
2024-10-13 14:00:47,569:INFO:self.USI: c03e
2024-10-13 14:00:47,569:INFO:self._variable_keys: {'y_train', 'target_param', 'X_test', 'log_plots_param', 'exp_name_log', 'fold_groups_param', 'y_test', '_ml_usecase', 'is_multiclass', 'idx', 'fix_imbalance', 'seed', 'exp_id', 'USI', 'gpu_param', '_available_plots', 'n_jobs_param', 'y', 'X', 'X_train', 'data', 'fold_shuffle_param', 'pipeline', 'html_param', 'logging_param', 'memory', 'fold_generator', 'gpu_n_jobs_param'}
2024-10-13 14:00:47,569:INFO:Checking environment
2024-10-13 14:00:47,569:INFO:python_version: 3.10.14
2024-10-13 14:00:47,569:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-13 14:00:47,569:INFO:machine: AMD64
2024-10-13 14:00:47,569:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-13 14:00:47,569:INFO:Memory: svmem(total=16747855872, available=7315992576, percent=56.3, used=9431863296, free=7315992576)
2024-10-13 14:00:47,569:INFO:Physical Core: 8
2024-10-13 14:00:47,569:INFO:Logical Core: 16
2024-10-13 14:00:47,569:INFO:Checking libraries
2024-10-13 14:00:47,569:INFO:System:
2024-10-13 14:00:47,569:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-13 14:00:47,569:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-10-13 14:00:47,569:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-13 14:00:47,569:INFO:PyCaret required dependencies:
2024-10-13 14:00:47,594:INFO:                 pip: 24.2
2024-10-13 14:00:47,594:INFO:          setuptools: 75.1.0
2024-10-13 14:00:47,594:INFO:             pycaret: 3.3.2
2024-10-13 14:00:47,594:INFO:             IPython: 8.27.0
2024-10-13 14:00:47,594:INFO:          ipywidgets: 8.1.5
2024-10-13 14:00:47,594:INFO:                tqdm: 4.66.5
2024-10-13 14:00:47,594:INFO:               numpy: 1.26.4
2024-10-13 14:00:47,594:INFO:              pandas: 2.1.4
2024-10-13 14:00:47,594:INFO:              jinja2: 3.1.4
2024-10-13 14:00:47,594:INFO:               scipy: 1.11.4
2024-10-13 14:00:47,594:INFO:              joblib: 1.3.2
2024-10-13 14:00:47,594:INFO:             sklearn: 1.4.2
2024-10-13 14:00:47,594:INFO:                pyod: 2.0.2
2024-10-13 14:00:47,594:INFO:            imblearn: 0.12.3
2024-10-13 14:00:47,594:INFO:   category_encoders: 2.6.3
2024-10-13 14:00:47,594:INFO:            lightgbm: 4.5.0
2024-10-13 14:00:47,594:INFO:               numba: 0.60.0
2024-10-13 14:00:47,594:INFO:            requests: 2.32.3
2024-10-13 14:00:47,594:INFO:          matplotlib: 3.7.5
2024-10-13 14:00:47,594:INFO:          scikitplot: 0.3.7
2024-10-13 14:00:47,594:INFO:         yellowbrick: 1.5
2024-10-13 14:00:47,594:INFO:              plotly: 5.24.1
2024-10-13 14:00:47,594:INFO:    plotly-resampler: Not installed
2024-10-13 14:00:47,594:INFO:             kaleido: 0.2.1
2024-10-13 14:00:47,594:INFO:           schemdraw: 0.15
2024-10-13 14:00:47,594:INFO:         statsmodels: 0.14.3
2024-10-13 14:00:47,594:INFO:              sktime: 0.26.0
2024-10-13 14:00:47,594:INFO:               tbats: 1.1.3
2024-10-13 14:00:47,594:INFO:            pmdarima: 2.0.4
2024-10-13 14:00:47,594:INFO:              psutil: 6.0.0
2024-10-13 14:00:47,594:INFO:          markupsafe: 2.1.5
2024-10-13 14:00:47,594:INFO:             pickle5: Not installed
2024-10-13 14:00:47,594:INFO:         cloudpickle: 3.0.0
2024-10-13 14:00:47,594:INFO:         deprecation: 2.1.0
2024-10-13 14:00:47,594:INFO:              xxhash: 3.5.0
2024-10-13 14:00:47,594:INFO:           wurlitzer: Not installed
2024-10-13 14:00:47,594:INFO:PyCaret optional dependencies:
2024-10-13 14:00:47,737:INFO:                shap: Not installed
2024-10-13 14:00:47,737:INFO:           interpret: Not installed
2024-10-13 14:00:47,737:INFO:                umap: Not installed
2024-10-13 14:00:47,737:INFO:     ydata_profiling: Not installed
2024-10-13 14:00:47,737:INFO:  explainerdashboard: Not installed
2024-10-13 14:00:47,737:INFO:             autoviz: Not installed
2024-10-13 14:00:47,737:INFO:           fairlearn: Not installed
2024-10-13 14:00:47,737:INFO:          deepchecks: Not installed
2024-10-13 14:00:47,737:INFO:             xgboost: 2.1.1
2024-10-13 14:00:47,737:INFO:            catboost: Not installed
2024-10-13 14:00:47,737:INFO:              kmodes: Not installed
2024-10-13 14:00:47,737:INFO:             mlxtend: Not installed
2024-10-13 14:00:47,737:INFO:       statsforecast: Not installed
2024-10-13 14:00:47,737:INFO:        tune_sklearn: Not installed
2024-10-13 14:00:47,737:INFO:                 ray: Not installed
2024-10-13 14:00:47,737:INFO:            hyperopt: Not installed
2024-10-13 14:00:47,737:INFO:              optuna: Not installed
2024-10-13 14:00:47,737:INFO:               skopt: Not installed
2024-10-13 14:00:47,737:INFO:              mlflow: Not installed
2024-10-13 14:00:47,737:INFO:              gradio: Not installed
2024-10-13 14:00:47,737:INFO:             fastapi: Not installed
2024-10-13 14:00:47,737:INFO:             uvicorn: Not installed
2024-10-13 14:00:47,737:INFO:              m2cgen: Not installed
2024-10-13 14:00:47,737:INFO:           evidently: Not installed
2024-10-13 14:00:47,737:INFO:               fugue: Not installed
2024-10-13 14:00:47,737:INFO:           streamlit: Not installed
2024-10-13 14:00:47,737:INFO:             prophet: Not installed
2024-10-13 14:00:47,737:INFO:None
2024-10-13 14:00:47,737:INFO:Set up data.
2024-10-13 14:00:47,745:INFO:Set up folding strategy.
2024-10-13 14:00:47,745:INFO:Set up train/test split.
2024-10-13 14:00:47,761:INFO:Set up index.
2024-10-13 14:00:47,761:INFO:Assigning column types.
2024-10-13 14:00:47,761:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-13 14:00:47,801:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-13 14:00:47,809:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 14:00:47,841:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:47,841:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:47,882:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-13 14:00:47,882:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 14:00:47,906:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:47,906:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:47,906:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-13 14:00:47,946:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 14:00:47,970:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:47,978:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:48,018:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-13 14:00:48,042:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:48,042:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:48,042:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-13 14:00:48,106:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:48,115:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:48,179:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:48,179:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:48,187:INFO:Preparing preprocessing pipeline...
2024-10-13 14:00:48,187:INFO:Set up label encoding.
2024-10-13 14:00:48,187:INFO:Set up simple imputation.
2024-10-13 14:00:48,227:INFO:Finished creating preprocessing pipeline.
2024-10-13 14:00:48,227:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-13 14:00:48,227:INFO:Creating final display dataframe.
2024-10-13 14:00:48,307:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (6238, 4)
5        Transformed data shape         (6238, 4)
6   Transformed train set shape         (4366, 4)
7    Transformed test set shape         (1872, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              c03e
2024-10-13 14:00:48,371:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:48,371:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:48,435:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-13 14:00:48,443:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-13 14:00:48,443:INFO:setup() successfully completed in 0.89s...............
2024-10-13 14:00:55,301:INFO:Initializing compare_models()
2024-10-13 14:00:55,301:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-13 14:00:55,306:INFO:Checking exceptions
2024-10-13 14:00:55,306:INFO:Preparing display monitor
2024-10-13 14:00:55,314:INFO:Initializing Logistic Regression
2024-10-13 14:00:55,314:INFO:Total runtime is 0.0 minutes
2024-10-13 14:00:55,314:INFO:SubProcess create_model() called ==================================
2024-10-13 14:00:55,314:INFO:Initializing create_model()
2024-10-13 14:00:55,314:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:00:55,314:INFO:Checking exceptions
2024-10-13 14:00:55,314:INFO:Importing libraries
2024-10-13 14:00:55,314:INFO:Copying training dataset
2024-10-13 14:00:55,322:INFO:Defining folds
2024-10-13 14:00:55,322:INFO:Declaring metric variables
2024-10-13 14:00:55,322:INFO:Importing untrained model
2024-10-13 14:00:55,322:INFO:Logistic Regression Imported successfully
2024-10-13 14:00:55,322:INFO:Starting cross validation
2024-10-13 14:00:55,322:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:00:59,236:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,244:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,252:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,260:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,260:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,268:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,276:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,284:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,396:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,396:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,404:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,404:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,404:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,404:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,412:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,412:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,412:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,412:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,420:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,420:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,420:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,420:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,420:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,420:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,428:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,428:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,444:INFO:Calculating mean and std
2024-10-13 14:00:59,444:INFO:Creating metrics dataframe
2024-10-13 14:00:59,444:INFO:Uploading results into container
2024-10-13 14:00:59,444:INFO:Uploading model into container now
2024-10-13 14:00:59,452:INFO:_master_model_container: 1
2024-10-13 14:00:59,452:INFO:_display_container: 2
2024-10-13 14:00:59,452:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-13 14:00:59,452:INFO:create_model() successfully completed......................................
2024-10-13 14:00:59,532:INFO:SubProcess create_model() end ==================================
2024-10-13 14:00:59,532:INFO:Creating metrics dataframe
2024-10-13 14:00:59,540:INFO:Initializing K Neighbors Classifier
2024-10-13 14:00:59,540:INFO:Total runtime is 0.0704324205716451 minutes
2024-10-13 14:00:59,540:INFO:SubProcess create_model() called ==================================
2024-10-13 14:00:59,540:INFO:Initializing create_model()
2024-10-13 14:00:59,540:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:00:59,540:INFO:Checking exceptions
2024-10-13 14:00:59,540:INFO:Importing libraries
2024-10-13 14:00:59,540:INFO:Copying training dataset
2024-10-13 14:00:59,540:INFO:Defining folds
2024-10-13 14:00:59,540:INFO:Declaring metric variables
2024-10-13 14:00:59,540:INFO:Importing untrained model
2024-10-13 14:00:59,540:INFO:K Neighbors Classifier Imported successfully
2024-10-13 14:00:59,540:INFO:Starting cross validation
2024-10-13 14:00:59,540:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:00:59,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,692:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,703:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:00:59,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,309:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,309:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,309:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,309:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,317:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,317:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,333:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,349:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,365:INFO:Calculating mean and std
2024-10-13 14:01:02,365:INFO:Creating metrics dataframe
2024-10-13 14:01:02,365:INFO:Uploading results into container
2024-10-13 14:01:02,365:INFO:Uploading model into container now
2024-10-13 14:01:02,365:INFO:_master_model_container: 2
2024-10-13 14:01:02,365:INFO:_display_container: 2
2024-10-13 14:01:02,373:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-13 14:01:02,373:INFO:create_model() successfully completed......................................
2024-10-13 14:01:02,453:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:02,453:INFO:Creating metrics dataframe
2024-10-13 14:01:02,453:INFO:Initializing Naive Bayes
2024-10-13 14:01:02,453:INFO:Total runtime is 0.11898509661356607 minutes
2024-10-13 14:01:02,453:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:02,453:INFO:Initializing create_model()
2024-10-13 14:01:02,453:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:02,453:INFO:Checking exceptions
2024-10-13 14:01:02,453:INFO:Importing libraries
2024-10-13 14:01:02,453:INFO:Copying training dataset
2024-10-13 14:01:02,461:INFO:Defining folds
2024-10-13 14:01:02,461:INFO:Declaring metric variables
2024-10-13 14:01:02,461:INFO:Importing untrained model
2024-10-13 14:01:02,461:INFO:Naive Bayes Imported successfully
2024-10-13 14:01:02,461:INFO:Starting cross validation
2024-10-13 14:01:02,461:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:02,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,517:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,525:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,533:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,533:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,533:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,533:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,533:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,541:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,557:INFO:Calculating mean and std
2024-10-13 14:01:02,557:INFO:Creating metrics dataframe
2024-10-13 14:01:02,557:INFO:Uploading results into container
2024-10-13 14:01:02,557:INFO:Uploading model into container now
2024-10-13 14:01:02,557:INFO:_master_model_container: 3
2024-10-13 14:01:02,557:INFO:_display_container: 2
2024-10-13 14:01:02,557:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-13 14:01:02,557:INFO:create_model() successfully completed......................................
2024-10-13 14:01:02,622:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:02,622:INFO:Creating metrics dataframe
2024-10-13 14:01:02,622:INFO:Initializing Decision Tree Classifier
2024-10-13 14:01:02,622:INFO:Total runtime is 0.12178928454716999 minutes
2024-10-13 14:01:02,622:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:02,630:INFO:Initializing create_model()
2024-10-13 14:01:02,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:02,630:INFO:Checking exceptions
2024-10-13 14:01:02,630:INFO:Importing libraries
2024-10-13 14:01:02,630:INFO:Copying training dataset
2024-10-13 14:01:02,630:INFO:Defining folds
2024-10-13 14:01:02,630:INFO:Declaring metric variables
2024-10-13 14:01:02,630:INFO:Importing untrained model
2024-10-13 14:01:02,630:INFO:Decision Tree Classifier Imported successfully
2024-10-13 14:01:02,630:INFO:Starting cross validation
2024-10-13 14:01:02,630:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:02,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,702:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,710:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,718:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,734:INFO:Calculating mean and std
2024-10-13 14:01:02,734:INFO:Creating metrics dataframe
2024-10-13 14:01:02,734:INFO:Uploading results into container
2024-10-13 14:01:02,734:INFO:Uploading model into container now
2024-10-13 14:01:02,734:INFO:_master_model_container: 4
2024-10-13 14:01:02,734:INFO:_display_container: 2
2024-10-13 14:01:02,734:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-13 14:01:02,734:INFO:create_model() successfully completed......................................
2024-10-13 14:01:02,806:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:02,806:INFO:Creating metrics dataframe
2024-10-13 14:01:02,806:INFO:Initializing SVM - Linear Kernel
2024-10-13 14:01:02,806:INFO:Total runtime is 0.12485818068186441 minutes
2024-10-13 14:01:02,806:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:02,806:INFO:Initializing create_model()
2024-10-13 14:01:02,806:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:02,806:INFO:Checking exceptions
2024-10-13 14:01:02,806:INFO:Importing libraries
2024-10-13 14:01:02,806:INFO:Copying training dataset
2024-10-13 14:01:02,814:INFO:Defining folds
2024-10-13 14:01:02,814:INFO:Declaring metric variables
2024-10-13 14:01:02,814:INFO:Importing untrained model
2024-10-13 14:01:02,814:INFO:SVM - Linear Kernel Imported successfully
2024-10-13 14:01:02,814:INFO:Starting cross validation
2024-10-13 14:01:02,814:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:02,878:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,878:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,878:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,886:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,894:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,902:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,904:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,904:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,904:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,910:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,918:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:02,942:INFO:Calculating mean and std
2024-10-13 14:01:02,942:INFO:Creating metrics dataframe
2024-10-13 14:01:02,942:INFO:Uploading results into container
2024-10-13 14:01:02,942:INFO:Uploading model into container now
2024-10-13 14:01:02,942:INFO:_master_model_container: 5
2024-10-13 14:01:02,942:INFO:_display_container: 2
2024-10-13 14:01:02,942:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-13 14:01:02,942:INFO:create_model() successfully completed......................................
2024-10-13 14:01:03,006:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:03,006:INFO:Creating metrics dataframe
2024-10-13 14:01:03,014:INFO:Initializing Ridge Classifier
2024-10-13 14:01:03,014:INFO:Total runtime is 0.1283261974652608 minutes
2024-10-13 14:01:03,014:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:03,014:INFO:Initializing create_model()
2024-10-13 14:01:03,014:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:03,014:INFO:Checking exceptions
2024-10-13 14:01:03,014:INFO:Importing libraries
2024-10-13 14:01:03,014:INFO:Copying training dataset
2024-10-13 14:01:03,014:INFO:Defining folds
2024-10-13 14:01:03,014:INFO:Declaring metric variables
2024-10-13 14:01:03,014:INFO:Importing untrained model
2024-10-13 14:01:03,014:INFO:Ridge Classifier Imported successfully
2024-10-13 14:01:03,014:INFO:Starting cross validation
2024-10-13 14:01:03,014:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,070:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,078:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,086:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,118:INFO:Calculating mean and std
2024-10-13 14:01:03,118:INFO:Creating metrics dataframe
2024-10-13 14:01:03,118:INFO:Uploading results into container
2024-10-13 14:01:03,118:INFO:Uploading model into container now
2024-10-13 14:01:03,118:INFO:_master_model_container: 6
2024-10-13 14:01:03,118:INFO:_display_container: 2
2024-10-13 14:01:03,118:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-13 14:01:03,118:INFO:create_model() successfully completed......................................
2024-10-13 14:01:03,190:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:03,190:INFO:Creating metrics dataframe
2024-10-13 14:01:03,190:INFO:Initializing Random Forest Classifier
2024-10-13 14:01:03,190:INFO:Total runtime is 0.13126108249028523 minutes
2024-10-13 14:01:03,190:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:03,190:INFO:Initializing create_model()
2024-10-13 14:01:03,190:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:03,190:INFO:Checking exceptions
2024-10-13 14:01:03,190:INFO:Importing libraries
2024-10-13 14:01:03,190:INFO:Copying training dataset
2024-10-13 14:01:03,190:INFO:Defining folds
2024-10-13 14:01:03,190:INFO:Declaring metric variables
2024-10-13 14:01:03,190:INFO:Importing untrained model
2024-10-13 14:01:03,198:INFO:Random Forest Classifier Imported successfully
2024-10-13 14:01:03,198:INFO:Starting cross validation
2024-10-13 14:01:03,198:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:03,830:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,830:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,830:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,830:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,830:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,838:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,838:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,838:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,838:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,838:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,846:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,854:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,854:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,862:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,862:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,862:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,862:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:03,870:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,014:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,022:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,022:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,054:INFO:Calculating mean and std
2024-10-13 14:01:04,054:INFO:Creating metrics dataframe
2024-10-13 14:01:04,054:INFO:Uploading results into container
2024-10-13 14:01:04,054:INFO:Uploading model into container now
2024-10-13 14:01:04,054:INFO:_master_model_container: 7
2024-10-13 14:01:04,054:INFO:_display_container: 2
2024-10-13 14:01:04,054:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-13 14:01:04,054:INFO:create_model() successfully completed......................................
2024-10-13 14:01:04,126:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:04,126:INFO:Creating metrics dataframe
2024-10-13 14:01:04,126:INFO:Initializing Quadratic Discriminant Analysis
2024-10-13 14:01:04,126:INFO:Total runtime is 0.1468704303105672 minutes
2024-10-13 14:01:04,126:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:04,126:INFO:Initializing create_model()
2024-10-13 14:01:04,126:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:04,126:INFO:Checking exceptions
2024-10-13 14:01:04,126:INFO:Importing libraries
2024-10-13 14:01:04,126:INFO:Copying training dataset
2024-10-13 14:01:04,126:INFO:Defining folds
2024-10-13 14:01:04,126:INFO:Declaring metric variables
2024-10-13 14:01:04,126:INFO:Importing untrained model
2024-10-13 14:01:04,126:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-13 14:01:04,126:INFO:Starting cross validation
2024-10-13 14:01:04,134:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,190:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,198:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,205:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,206:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,238:INFO:Calculating mean and std
2024-10-13 14:01:04,238:INFO:Creating metrics dataframe
2024-10-13 14:01:04,238:INFO:Uploading results into container
2024-10-13 14:01:04,238:INFO:Uploading model into container now
2024-10-13 14:01:04,238:INFO:_master_model_container: 8
2024-10-13 14:01:04,238:INFO:_display_container: 2
2024-10-13 14:01:04,238:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 14:01:04,238:INFO:create_model() successfully completed......................................
2024-10-13 14:01:04,305:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:04,305:INFO:Creating metrics dataframe
2024-10-13 14:01:04,311:INFO:Initializing Ada Boost Classifier
2024-10-13 14:01:04,311:INFO:Total runtime is 0.14994078874588013 minutes
2024-10-13 14:01:04,311:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:04,311:INFO:Initializing create_model()
2024-10-13 14:01:04,311:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:04,311:INFO:Checking exceptions
2024-10-13 14:01:04,311:INFO:Importing libraries
2024-10-13 14:01:04,311:INFO:Copying training dataset
2024-10-13 14:01:04,311:INFO:Defining folds
2024-10-13 14:01:04,311:INFO:Declaring metric variables
2024-10-13 14:01:04,311:INFO:Importing untrained model
2024-10-13 14:01:04,311:INFO:Ada Boost Classifier Imported successfully
2024-10-13 14:01:04,311:INFO:Starting cross validation
2024-10-13 14:01:04,311:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:04,335:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,343:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,343:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,343:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,343:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,343:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,351:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,351:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,351:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,351:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-13 14:01:04,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,639:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,639:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,639:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,639:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,647:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,655:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,655:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,655:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,655:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,655:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,663:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:04,687:INFO:Calculating mean and std
2024-10-13 14:01:04,687:INFO:Creating metrics dataframe
2024-10-13 14:01:04,687:INFO:Uploading results into container
2024-10-13 14:01:04,687:INFO:Uploading model into container now
2024-10-13 14:01:04,687:INFO:_master_model_container: 9
2024-10-13 14:01:04,687:INFO:_display_container: 2
2024-10-13 14:01:04,687:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-13 14:01:04,687:INFO:create_model() successfully completed......................................
2024-10-13 14:01:04,759:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:04,759:INFO:Creating metrics dataframe
2024-10-13 14:01:04,759:INFO:Initializing Gradient Boosting Classifier
2024-10-13 14:01:04,759:INFO:Total runtime is 0.1574109435081482 minutes
2024-10-13 14:01:04,759:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:04,759:INFO:Initializing create_model()
2024-10-13 14:01:04,759:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:04,759:INFO:Checking exceptions
2024-10-13 14:01:04,759:INFO:Importing libraries
2024-10-13 14:01:04,759:INFO:Copying training dataset
2024-10-13 14:01:04,759:INFO:Defining folds
2024-10-13 14:01:04,759:INFO:Declaring metric variables
2024-10-13 14:01:04,759:INFO:Importing untrained model
2024-10-13 14:01:04,759:INFO:Gradient Boosting Classifier Imported successfully
2024-10-13 14:01:04,759:INFO:Starting cross validation
2024-10-13 14:01:04,767:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:05,431:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,439:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,439:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,439:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,439:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,439:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,447:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,455:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,463:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,463:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,463:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,463:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,471:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,471:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,471:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,487:INFO:Calculating mean and std
2024-10-13 14:01:05,487:INFO:Creating metrics dataframe
2024-10-13 14:01:05,487:INFO:Uploading results into container
2024-10-13 14:01:05,487:INFO:Uploading model into container now
2024-10-13 14:01:05,487:INFO:_master_model_container: 10
2024-10-13 14:01:05,487:INFO:_display_container: 2
2024-10-13 14:01:05,487:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-13 14:01:05,487:INFO:create_model() successfully completed......................................
2024-10-13 14:01:05,551:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:05,551:INFO:Creating metrics dataframe
2024-10-13 14:01:05,551:INFO:Initializing Linear Discriminant Analysis
2024-10-13 14:01:05,551:INFO:Total runtime is 0.17061513662338257 minutes
2024-10-13 14:01:05,551:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:05,551:INFO:Initializing create_model()
2024-10-13 14:01:05,551:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:05,551:INFO:Checking exceptions
2024-10-13 14:01:05,551:INFO:Importing libraries
2024-10-13 14:01:05,551:INFO:Copying training dataset
2024-10-13 14:01:05,559:INFO:Defining folds
2024-10-13 14:01:05,559:INFO:Declaring metric variables
2024-10-13 14:01:05,559:INFO:Importing untrained model
2024-10-13 14:01:05,559:INFO:Linear Discriminant Analysis Imported successfully
2024-10-13 14:01:05,559:INFO:Starting cross validation
2024-10-13 14:01:05,559:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:05,599:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,599:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,607:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,615:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,623:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,631:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:05,655:INFO:Calculating mean and std
2024-10-13 14:01:05,655:INFO:Creating metrics dataframe
2024-10-13 14:01:05,655:INFO:Uploading results into container
2024-10-13 14:01:05,655:INFO:Uploading model into container now
2024-10-13 14:01:05,655:INFO:_master_model_container: 11
2024-10-13 14:01:05,655:INFO:_display_container: 2
2024-10-13 14:01:05,655:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-13 14:01:05,655:INFO:create_model() successfully completed......................................
2024-10-13 14:01:05,719:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:05,719:INFO:Creating metrics dataframe
2024-10-13 14:01:05,719:INFO:Initializing Extra Trees Classifier
2024-10-13 14:01:05,719:INFO:Total runtime is 0.1734203894933065 minutes
2024-10-13 14:01:05,719:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:05,719:INFO:Initializing create_model()
2024-10-13 14:01:05,719:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:05,719:INFO:Checking exceptions
2024-10-13 14:01:05,719:INFO:Importing libraries
2024-10-13 14:01:05,727:INFO:Copying training dataset
2024-10-13 14:01:05,727:INFO:Defining folds
2024-10-13 14:01:05,727:INFO:Declaring metric variables
2024-10-13 14:01:05,727:INFO:Importing untrained model
2024-10-13 14:01:05,727:INFO:Extra Trees Classifier Imported successfully
2024-10-13 14:01:05,727:INFO:Starting cross validation
2024-10-13 14:01:05,727:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:06,064:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,064:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,064:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,064:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,072:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,072:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,072:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,072:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,080:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,080:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,080:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,080:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,080:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,088:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,088:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,088:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,096:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,096:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,096:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,096:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,096:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,104:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,106:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,106:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,106:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,106:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,112:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,112:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:06,136:INFO:Calculating mean and std
2024-10-13 14:01:06,136:INFO:Creating metrics dataframe
2024-10-13 14:01:06,136:INFO:Uploading results into container
2024-10-13 14:01:06,136:INFO:Uploading model into container now
2024-10-13 14:01:06,136:INFO:_master_model_container: 12
2024-10-13 14:01:06,136:INFO:_display_container: 2
2024-10-13 14:01:06,136:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-13 14:01:06,136:INFO:create_model() successfully completed......................................
2024-10-13 14:01:06,200:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:06,200:INFO:Creating metrics dataframe
2024-10-13 14:01:06,200:INFO:Initializing Extreme Gradient Boosting
2024-10-13 14:01:06,200:INFO:Total runtime is 0.18142311573028566 minutes
2024-10-13 14:01:06,206:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:06,206:INFO:Initializing create_model()
2024-10-13 14:01:06,206:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:06,206:INFO:Checking exceptions
2024-10-13 14:01:06,206:INFO:Importing libraries
2024-10-13 14:01:06,206:INFO:Copying training dataset
2024-10-13 14:01:06,208:INFO:Defining folds
2024-10-13 14:01:06,208:INFO:Declaring metric variables
2024-10-13 14:01:06,208:INFO:Importing untrained model
2024-10-13 14:01:06,208:INFO:Extreme Gradient Boosting Imported successfully
2024-10-13 14:01:06,208:INFO:Starting cross validation
2024-10-13 14:01:06,208:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:08,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,250:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,258:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,258:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,258:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,258:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,266:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,274:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,274:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,274:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,274:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,274:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,282:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,282:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,282:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,282:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,290:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,298:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,298:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:08,314:INFO:Calculating mean and std
2024-10-13 14:01:08,314:INFO:Creating metrics dataframe
2024-10-13 14:01:08,314:INFO:Uploading results into container
2024-10-13 14:01:08,314:INFO:Uploading model into container now
2024-10-13 14:01:08,314:INFO:_master_model_container: 13
2024-10-13 14:01:08,314:INFO:_display_container: 2
2024-10-13 14:01:08,314:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-13 14:01:08,314:INFO:create_model() successfully completed......................................
2024-10-13 14:01:08,378:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:08,378:INFO:Creating metrics dataframe
2024-10-13 14:01:08,378:INFO:Initializing Light Gradient Boosting Machine
2024-10-13 14:01:08,378:INFO:Total runtime is 0.2177358865737915 minutes
2024-10-13 14:01:08,386:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:08,386:INFO:Initializing create_model()
2024-10-13 14:01:08,386:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:08,386:INFO:Checking exceptions
2024-10-13 14:01:08,386:INFO:Importing libraries
2024-10-13 14:01:08,386:INFO:Copying training dataset
2024-10-13 14:01:08,386:INFO:Defining folds
2024-10-13 14:01:08,386:INFO:Declaring metric variables
2024-10-13 14:01:08,386:INFO:Importing untrained model
2024-10-13 14:01:08,386:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-13 14:01:08,386:INFO:Starting cross validation
2024-10-13 14:01:08,386:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:09,435:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,443:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,443:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,443:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,443:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,451:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,451:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,451:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,451:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,459:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,459:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,467:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,507:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,509:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,571:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,571:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,579:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,587:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,611:INFO:Calculating mean and std
2024-10-13 14:01:09,611:INFO:Creating metrics dataframe
2024-10-13 14:01:09,611:INFO:Uploading results into container
2024-10-13 14:01:09,611:INFO:Uploading model into container now
2024-10-13 14:01:09,611:INFO:_master_model_container: 14
2024-10-13 14:01:09,611:INFO:_display_container: 2
2024-10-13 14:01:09,611:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-13 14:01:09,611:INFO:create_model() successfully completed......................................
2024-10-13 14:01:09,691:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:09,691:INFO:Creating metrics dataframe
2024-10-13 14:01:09,699:INFO:Initializing Dummy Classifier
2024-10-13 14:01:09,699:INFO:Total runtime is 0.23974183797836304 minutes
2024-10-13 14:01:09,699:INFO:SubProcess create_model() called ==================================
2024-10-13 14:01:09,699:INFO:Initializing create_model()
2024-10-13 14:01:09,699:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021822342890>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:09,699:INFO:Checking exceptions
2024-10-13 14:01:09,699:INFO:Importing libraries
2024-10-13 14:01:09,699:INFO:Copying training dataset
2024-10-13 14:01:09,699:INFO:Defining folds
2024-10-13 14:01:09,699:INFO:Declaring metric variables
2024-10-13 14:01:09,699:INFO:Importing untrained model
2024-10-13 14:01:09,699:INFO:Dummy Classifier Imported successfully
2024-10-13 14:01:09,699:INFO:Starting cross validation
2024-10-13 14:01:09,699:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-13 14:01:09,731:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,739:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,747:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,755:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,763:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,763:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,763:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,763:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-13 14:01:09,763:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,763:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-13 14:01:09,787:INFO:Calculating mean and std
2024-10-13 14:01:09,787:INFO:Creating metrics dataframe
2024-10-13 14:01:09,787:INFO:Uploading results into container
2024-10-13 14:01:09,787:INFO:Uploading model into container now
2024-10-13 14:01:09,787:INFO:_master_model_container: 15
2024-10-13 14:01:09,787:INFO:_display_container: 2
2024-10-13 14:01:09,787:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-13 14:01:09,787:INFO:create_model() successfully completed......................................
2024-10-13 14:01:09,851:INFO:SubProcess create_model() end ==================================
2024-10-13 14:01:09,851:INFO:Creating metrics dataframe
2024-10-13 14:01:09,859:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-13 14:01:09,859:INFO:Initializing create_model()
2024-10-13 14:01:09,859:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:09,859:INFO:Checking exceptions
2024-10-13 14:01:09,859:INFO:Importing libraries
2024-10-13 14:01:09,859:INFO:Copying training dataset
2024-10-13 14:01:09,859:INFO:Defining folds
2024-10-13 14:01:09,859:INFO:Declaring metric variables
2024-10-13 14:01:09,859:INFO:Importing untrained model
2024-10-13 14:01:09,859:INFO:Declaring custom model
2024-10-13 14:01:09,859:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-13 14:01:09,859:INFO:Cross validation set to False
2024-10-13 14:01:09,859:INFO:Fitting Model
2024-10-13 14:01:09,867:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:09,867:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 14:01:09,867:INFO:create_model() successfully completed......................................
2024-10-13 14:01:09,947:INFO:_master_model_container: 15
2024-10-13 14:01:09,947:INFO:_display_container: 2
2024-10-13 14:01:09,947:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 14:01:09,947:INFO:compare_models() successfully completed......................................
2024-10-13 14:01:23,301:INFO:Initializing finalize_model()
2024-10-13 14:01:23,309:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-13 14:01:23,309:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-13 14:01:23,309:INFO:Initializing create_model()
2024-10-13 14:01:23,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-13 14:01:23,309:INFO:Checking exceptions
2024-10-13 14:01:23,309:INFO:Importing libraries
2024-10-13 14:01:23,309:INFO:Copying training dataset
2024-10-13 14:01:23,309:INFO:Defining folds
2024-10-13 14:01:23,309:INFO:Declaring metric variables
2024-10-13 14:01:23,309:INFO:Importing untrained model
2024-10-13 14:01:23,309:INFO:Declaring custom model
2024-10-13 14:01:23,309:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-13 14:01:23,309:INFO:Cross validation set to False
2024-10-13 14:01:23,309:INFO:Fitting Model
2024-10-13 14:01:23,325:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-13 14:01:23,333:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-13 14:01:23,333:INFO:create_model() successfully completed......................................
2024-10-13 14:01:23,389:INFO:_master_model_container: 15
2024-10-13 14:01:23,389:INFO:_display_container: 2
2024-10-13 14:01:23,397:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-13 14:01:23,397:INFO:finalize_model() successfully completed......................................
2024-10-13 14:01:27,817:INFO:Initializing evaluate_model()
2024-10-13 14:01:27,823:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-13 14:01:27,841:INFO:Initializing plot_model()
2024-10-13 14:01:27,841:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, system=True)
2024-10-13 14:01:27,841:INFO:Checking exceptions
2024-10-13 14:01:27,841:INFO:Preloading libraries
2024-10-13 14:01:27,841:INFO:Copying training dataset
2024-10-13 14:01:27,841:INFO:Plot type: pipeline
2024-10-13 14:01:28,009:INFO:Visual Rendered Successfully
2024-10-13 14:01:28,073:INFO:plot_model() successfully completed......................................
2024-10-13 14:01:39,211:INFO:Initializing plot_model()
2024-10-13 14:01:39,211:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000218418A31F0>, system=True)
2024-10-13 14:01:39,211:INFO:Checking exceptions
2024-10-13 14:01:39,211:INFO:Preloading libraries
2024-10-13 14:01:39,211:INFO:Copying training dataset
2024-10-13 14:01:39,211:INFO:Plot type: confusion_matrix
2024-10-13 14:01:39,267:INFO:Fitting Model
2024-10-13 14:01:39,275:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-13 14:01:39,275:INFO:Scoring test/hold-out set
2024-10-13 14:01:39,363:INFO:Visual Rendered Successfully
2024-10-13 14:01:39,435:INFO:plot_model() successfully completed......................................
2024-10-28 13:36:02,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:36:02,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:36:02,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:36:02,388:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:36:03,364:INFO:PyCaret ClassificationExperiment
2024-10-28 13:36:03,364:INFO:Logging name: clf-default-name
2024-10-28 13:36:03,364:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-28 13:36:03,364:INFO:version 3.3.2
2024-10-28 13:36:03,364:INFO:Initializing setup()
2024-10-28 13:36:03,364:INFO:self.USI: 97c1
2024-10-28 13:36:03,364:INFO:self._variable_keys: {'target_param', 'X', 'seed', 'gpu_n_jobs_param', 'USI', 'X_test', 'memory', 'fold_groups_param', 'n_jobs_param', 'is_multiclass', 'logging_param', 'exp_id', 'gpu_param', 'exp_name_log', 'log_plots_param', '_ml_usecase', 'html_param', 'fold_generator', 'pipeline', 'y_test', 'fold_shuffle_param', 'X_train', 'idx', 'y_train', '_available_plots', 'y', 'fix_imbalance', 'data'}
2024-10-28 13:36:03,364:INFO:Checking environment
2024-10-28 13:36:03,364:INFO:python_version: 3.10.14
2024-10-28 13:36:03,364:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-28 13:36:03,364:INFO:machine: AMD64
2024-10-28 13:36:03,364:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-28 13:36:03,372:INFO:Memory: svmem(total=16747851776, available=2251575296, percent=86.6, used=14496276480, free=2251575296)
2024-10-28 13:36:03,372:INFO:Physical Core: 8
2024-10-28 13:36:03,372:INFO:Logical Core: 16
2024-10-28 13:36:03,372:INFO:Checking libraries
2024-10-28 13:36:03,372:INFO:System:
2024-10-28 13:36:03,372:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-28 13:36:03,372:INFO:executable: c:\Users\Khambhati\anaconda3\envs\subvocal\python.exe
2024-10-28 13:36:03,372:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-28 13:36:03,372:INFO:PyCaret required dependencies:
2024-10-28 13:36:03,413:INFO:                 pip: 24.2
2024-10-28 13:36:03,413:INFO:          setuptools: 75.1.0
2024-10-28 13:36:03,413:INFO:             pycaret: 3.3.2
2024-10-28 13:36:03,413:INFO:             IPython: 8.27.0
2024-10-28 13:36:03,413:INFO:          ipywidgets: 8.1.5
2024-10-28 13:36:03,413:INFO:                tqdm: 4.66.5
2024-10-28 13:36:03,413:INFO:               numpy: 1.26.4
2024-10-28 13:36:03,413:INFO:              pandas: 2.1.4
2024-10-28 13:36:03,413:INFO:              jinja2: 3.1.4
2024-10-28 13:36:03,413:INFO:               scipy: 1.11.4
2024-10-28 13:36:03,413:INFO:              joblib: 1.3.2
2024-10-28 13:36:03,413:INFO:             sklearn: 1.4.2
2024-10-28 13:36:03,413:INFO:                pyod: 2.0.2
2024-10-28 13:36:03,413:INFO:            imblearn: 0.12.3
2024-10-28 13:36:03,413:INFO:   category_encoders: 2.6.3
2024-10-28 13:36:03,413:INFO:            lightgbm: 4.5.0
2024-10-28 13:36:03,413:INFO:               numba: 0.60.0
2024-10-28 13:36:03,413:INFO:            requests: 2.32.3
2024-10-28 13:36:03,413:INFO:          matplotlib: 3.7.5
2024-10-28 13:36:03,413:INFO:          scikitplot: 0.3.7
2024-10-28 13:36:03,413:INFO:         yellowbrick: 1.5
2024-10-28 13:36:03,413:INFO:              plotly: 5.24.1
2024-10-28 13:36:03,413:INFO:    plotly-resampler: Not installed
2024-10-28 13:36:03,413:INFO:             kaleido: 0.2.1
2024-10-28 13:36:03,413:INFO:           schemdraw: 0.15
2024-10-28 13:36:03,413:INFO:         statsmodels: 0.14.3
2024-10-28 13:36:03,413:INFO:              sktime: 0.26.0
2024-10-28 13:36:03,413:INFO:               tbats: 1.1.3
2024-10-28 13:36:03,413:INFO:            pmdarima: 2.0.4
2024-10-28 13:36:03,413:INFO:              psutil: 6.0.0
2024-10-28 13:36:03,413:INFO:          markupsafe: 2.1.5
2024-10-28 13:36:03,413:INFO:             pickle5: Not installed
2024-10-28 13:36:03,413:INFO:         cloudpickle: 3.0.0
2024-10-28 13:36:03,413:INFO:         deprecation: 2.1.0
2024-10-28 13:36:03,413:INFO:              xxhash: 3.5.0
2024-10-28 13:36:03,413:INFO:           wurlitzer: Not installed
2024-10-28 13:36:03,413:INFO:PyCaret optional dependencies:
2024-10-28 13:36:03,565:INFO:                shap: Not installed
2024-10-28 13:36:03,565:INFO:           interpret: Not installed
2024-10-28 13:36:03,565:INFO:                umap: Not installed
2024-10-28 13:36:03,565:INFO:     ydata_profiling: Not installed
2024-10-28 13:36:03,565:INFO:  explainerdashboard: Not installed
2024-10-28 13:36:03,565:INFO:             autoviz: Not installed
2024-10-28 13:36:03,565:INFO:           fairlearn: Not installed
2024-10-28 13:36:03,565:INFO:          deepchecks: Not installed
2024-10-28 13:36:03,565:INFO:             xgboost: 2.1.1
2024-10-28 13:36:03,565:INFO:            catboost: Not installed
2024-10-28 13:36:03,565:INFO:              kmodes: Not installed
2024-10-28 13:36:03,565:INFO:             mlxtend: Not installed
2024-10-28 13:36:03,565:INFO:       statsforecast: Not installed
2024-10-28 13:36:03,565:INFO:        tune_sklearn: Not installed
2024-10-28 13:36:03,565:INFO:                 ray: Not installed
2024-10-28 13:36:03,565:INFO:            hyperopt: Not installed
2024-10-28 13:36:03,565:INFO:              optuna: Not installed
2024-10-28 13:36:03,565:INFO:               skopt: Not installed
2024-10-28 13:36:03,565:INFO:              mlflow: Not installed
2024-10-28 13:36:03,565:INFO:              gradio: Not installed
2024-10-28 13:36:03,565:INFO:             fastapi: Not installed
2024-10-28 13:36:03,565:INFO:             uvicorn: Not installed
2024-10-28 13:36:03,565:INFO:              m2cgen: Not installed
2024-10-28 13:36:03,565:INFO:           evidently: Not installed
2024-10-28 13:36:03,565:INFO:               fugue: Not installed
2024-10-28 13:36:03,565:INFO:           streamlit: Not installed
2024-10-28 13:36:03,565:INFO:             prophet: Not installed
2024-10-28 13:36:03,565:INFO:None
2024-10-28 13:36:03,565:INFO:Set up data.
2024-10-28 13:36:03,581:INFO:Set up folding strategy.
2024-10-28 13:36:03,581:INFO:Set up train/test split.
2024-10-28 13:36:03,597:INFO:Set up index.
2024-10-28 13:36:03,597:INFO:Assigning column types.
2024-10-28 13:36:03,605:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-28 13:36:03,637:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-28 13:36:03,645:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 13:36:03,677:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:03,685:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:03,725:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-28 13:36:03,725:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 13:36:03,741:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:03,749:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:03,749:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-28 13:36:03,789:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 13:36:03,813:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:03,813:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:03,853:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 13:36:03,877:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:03,877:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:03,877:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-28 13:36:03,941:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:03,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:04,005:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:04,005:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:04,013:INFO:Preparing preprocessing pipeline...
2024-10-28 13:36:04,013:INFO:Set up label encoding.
2024-10-28 13:36:04,013:INFO:Set up simple imputation.
2024-10-28 13:36:04,053:INFO:Finished creating preprocessing pipeline.
2024-10-28 13:36:04,061:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-28 13:36:04,061:INFO:Creating final display dataframe.
2024-10-28 13:36:04,141:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (9613, 4)
5        Transformed data shape         (9613, 4)
6   Transformed train set shape         (6729, 4)
7    Transformed test set shape         (2884, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              97c1
2024-10-28 13:36:04,205:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:04,205:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:04,261:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 13:36:04,269:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 13:36:04,269:INFO:setup() successfully completed in 0.91s...............
2024-10-28 13:36:04,286:INFO:Initializing compare_models()
2024-10-28 13:36:04,286:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-28 13:36:04,286:INFO:Checking exceptions
2024-10-28 13:36:04,286:INFO:Preparing display monitor
2024-10-28 13:36:04,294:INFO:Initializing Logistic Regression
2024-10-28 13:36:04,294:INFO:Total runtime is 0.0 minutes
2024-10-28 13:36:04,294:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:04,294:INFO:Initializing create_model()
2024-10-28 13:36:04,294:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:04,294:INFO:Checking exceptions
2024-10-28 13:36:04,294:INFO:Importing libraries
2024-10-28 13:36:04,294:INFO:Copying training dataset
2024-10-28 13:36:04,302:INFO:Defining folds
2024-10-28 13:36:04,302:INFO:Declaring metric variables
2024-10-28 13:36:04,302:INFO:Importing untrained model
2024-10-28 13:36:04,302:INFO:Logistic Regression Imported successfully
2024-10-28 13:36:04,302:INFO:Starting cross validation
2024-10-28 13:36:04,302:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:09,448:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,464:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,464:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,476:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,480:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,608:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,616:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,624:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,696:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,704:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,712:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,728:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,736:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,736:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,736:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,744:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,744:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,744:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,752:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,752:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,752:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,752:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,752:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,760:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,760:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,760:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,768:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,768:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,768:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:09,800:INFO:Calculating mean and std
2024-10-28 13:36:09,800:INFO:Creating metrics dataframe
2024-10-28 13:36:09,800:INFO:Uploading results into container
2024-10-28 13:36:09,808:INFO:Uploading model into container now
2024-10-28 13:36:09,808:INFO:_master_model_container: 1
2024-10-28 13:36:09,808:INFO:_display_container: 2
2024-10-28 13:36:09,808:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-28 13:36:09,808:INFO:create_model() successfully completed......................................
2024-10-28 13:36:09,881:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:09,881:INFO:Creating metrics dataframe
2024-10-28 13:36:09,889:INFO:Initializing K Neighbors Classifier
2024-10-28 13:36:09,889:INFO:Total runtime is 0.09325238863627115 minutes
2024-10-28 13:36:09,889:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:09,889:INFO:Initializing create_model()
2024-10-28 13:36:09,889:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:09,889:INFO:Checking exceptions
2024-10-28 13:36:09,889:INFO:Importing libraries
2024-10-28 13:36:09,889:INFO:Copying training dataset
2024-10-28 13:36:09,889:INFO:Defining folds
2024-10-28 13:36:09,889:INFO:Declaring metric variables
2024-10-28 13:36:09,889:INFO:Importing untrained model
2024-10-28 13:36:09,889:INFO:K Neighbors Classifier Imported successfully
2024-10-28 13:36:09,889:INFO:Starting cross validation
2024-10-28 13:36:09,889:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:10,073:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,081:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,081:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,081:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,081:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,089:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,089:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,089:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:10,089:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,299:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,307:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,307:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,315:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,315:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,315:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,315:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,323:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,323:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,323:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,323:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,323:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,323:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,323:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,331:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,331:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,331:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,331:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,363:INFO:Calculating mean and std
2024-10-28 13:36:13,363:INFO:Creating metrics dataframe
2024-10-28 13:36:13,363:INFO:Uploading results into container
2024-10-28 13:36:13,371:INFO:Uploading model into container now
2024-10-28 13:36:13,371:INFO:_master_model_container: 2
2024-10-28 13:36:13,371:INFO:_display_container: 2
2024-10-28 13:36:13,371:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-28 13:36:13,371:INFO:create_model() successfully completed......................................
2024-10-28 13:36:13,451:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:13,451:INFO:Creating metrics dataframe
2024-10-28 13:36:13,451:INFO:Initializing Naive Bayes
2024-10-28 13:36:13,451:INFO:Total runtime is 0.15262639919916787 minutes
2024-10-28 13:36:13,451:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:13,451:INFO:Initializing create_model()
2024-10-28 13:36:13,451:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:13,451:INFO:Checking exceptions
2024-10-28 13:36:13,451:INFO:Importing libraries
2024-10-28 13:36:13,451:INFO:Copying training dataset
2024-10-28 13:36:13,451:INFO:Defining folds
2024-10-28 13:36:13,451:INFO:Declaring metric variables
2024-10-28 13:36:13,451:INFO:Importing untrained model
2024-10-28 13:36:13,451:INFO:Naive Bayes Imported successfully
2024-10-28 13:36:13,451:INFO:Starting cross validation
2024-10-28 13:36:13,459:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:13,507:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,507:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,515:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,523:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,531:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,539:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,547:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,547:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,563:INFO:Calculating mean and std
2024-10-28 13:36:13,563:INFO:Creating metrics dataframe
2024-10-28 13:36:13,563:INFO:Uploading results into container
2024-10-28 13:36:13,563:INFO:Uploading model into container now
2024-10-28 13:36:13,563:INFO:_master_model_container: 3
2024-10-28 13:36:13,563:INFO:_display_container: 2
2024-10-28 13:36:13,563:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-28 13:36:13,563:INFO:create_model() successfully completed......................................
2024-10-28 13:36:13,628:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:13,628:INFO:Creating metrics dataframe
2024-10-28 13:36:13,636:INFO:Initializing Decision Tree Classifier
2024-10-28 13:36:13,636:INFO:Total runtime is 0.15570370753606158 minutes
2024-10-28 13:36:13,636:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:13,636:INFO:Initializing create_model()
2024-10-28 13:36:13,636:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:13,636:INFO:Checking exceptions
2024-10-28 13:36:13,636:INFO:Importing libraries
2024-10-28 13:36:13,636:INFO:Copying training dataset
2024-10-28 13:36:13,636:INFO:Defining folds
2024-10-28 13:36:13,636:INFO:Declaring metric variables
2024-10-28 13:36:13,636:INFO:Importing untrained model
2024-10-28 13:36:13,636:INFO:Decision Tree Classifier Imported successfully
2024-10-28 13:36:13,636:INFO:Starting cross validation
2024-10-28 13:36:13,636:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:13,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,700:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,708:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,713:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,716:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,723:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,724:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,732:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,732:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,756:INFO:Calculating mean and std
2024-10-28 13:36:13,756:INFO:Creating metrics dataframe
2024-10-28 13:36:13,756:INFO:Uploading results into container
2024-10-28 13:36:13,756:INFO:Uploading model into container now
2024-10-28 13:36:13,756:INFO:_master_model_container: 4
2024-10-28 13:36:13,756:INFO:_display_container: 2
2024-10-28 13:36:13,756:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-28 13:36:13,756:INFO:create_model() successfully completed......................................
2024-10-28 13:36:13,828:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:13,828:INFO:Creating metrics dataframe
2024-10-28 13:36:13,836:INFO:Initializing SVM - Linear Kernel
2024-10-28 13:36:13,836:INFO:Total runtime is 0.15903294881184893 minutes
2024-10-28 13:36:13,836:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:13,836:INFO:Initializing create_model()
2024-10-28 13:36:13,836:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:13,836:INFO:Checking exceptions
2024-10-28 13:36:13,836:INFO:Importing libraries
2024-10-28 13:36:13,836:INFO:Copying training dataset
2024-10-28 13:36:13,836:INFO:Defining folds
2024-10-28 13:36:13,836:INFO:Declaring metric variables
2024-10-28 13:36:13,836:INFO:Importing untrained model
2024-10-28 13:36:13,836:INFO:SVM - Linear Kernel Imported successfully
2024-10-28 13:36:13,836:INFO:Starting cross validation
2024-10-28 13:36:13,836:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:13,940:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,940:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,940:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,940:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,948:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,948:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,948:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,956:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,956:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,956:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,956:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,956:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,956:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,964:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,964:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,964:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,972:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,972:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,980:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,980:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,980:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:13,988:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,988:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,988:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,988:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,988:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,996:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,996:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,996:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:13,996:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,012:INFO:Calculating mean and std
2024-10-28 13:36:14,012:INFO:Creating metrics dataframe
2024-10-28 13:36:14,012:INFO:Uploading results into container
2024-10-28 13:36:14,012:INFO:Uploading model into container now
2024-10-28 13:36:14,012:INFO:_master_model_container: 5
2024-10-28 13:36:14,012:INFO:_display_container: 2
2024-10-28 13:36:14,012:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-28 13:36:14,012:INFO:create_model() successfully completed......................................
2024-10-28 13:36:14,092:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:14,092:INFO:Creating metrics dataframe
2024-10-28 13:36:14,096:INFO:Initializing Ridge Classifier
2024-10-28 13:36:14,096:INFO:Total runtime is 0.16337174971898394 minutes
2024-10-28 13:36:14,096:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:14,097:INFO:Initializing create_model()
2024-10-28 13:36:14,097:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:14,097:INFO:Checking exceptions
2024-10-28 13:36:14,097:INFO:Importing libraries
2024-10-28 13:36:14,097:INFO:Copying training dataset
2024-10-28 13:36:14,100:INFO:Defining folds
2024-10-28 13:36:14,100:INFO:Declaring metric variables
2024-10-28 13:36:14,101:INFO:Importing untrained model
2024-10-28 13:36:14,101:INFO:Ridge Classifier Imported successfully
2024-10-28 13:36:14,101:INFO:Starting cross validation
2024-10-28 13:36:14,102:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:14,157:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,157:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,165:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,173:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,180:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,181:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,189:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,197:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,221:INFO:Calculating mean and std
2024-10-28 13:36:14,221:INFO:Creating metrics dataframe
2024-10-28 13:36:14,221:INFO:Uploading results into container
2024-10-28 13:36:14,221:INFO:Uploading model into container now
2024-10-28 13:36:14,221:INFO:_master_model_container: 6
2024-10-28 13:36:14,221:INFO:_display_container: 2
2024-10-28 13:36:14,221:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-28 13:36:14,221:INFO:create_model() successfully completed......................................
2024-10-28 13:36:14,293:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:14,293:INFO:Creating metrics dataframe
2024-10-28 13:36:14,301:INFO:Initializing Random Forest Classifier
2024-10-28 13:36:14,301:INFO:Total runtime is 0.16679550806681312 minutes
2024-10-28 13:36:14,301:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:14,301:INFO:Initializing create_model()
2024-10-28 13:36:14,301:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:14,301:INFO:Checking exceptions
2024-10-28 13:36:14,301:INFO:Importing libraries
2024-10-28 13:36:14,301:INFO:Copying training dataset
2024-10-28 13:36:14,301:INFO:Defining folds
2024-10-28 13:36:14,301:INFO:Declaring metric variables
2024-10-28 13:36:14,301:INFO:Importing untrained model
2024-10-28 13:36:14,301:INFO:Random Forest Classifier Imported successfully
2024-10-28 13:36:14,301:INFO:Starting cross validation
2024-10-28 13:36:14,309:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:14,958:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,966:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,966:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,966:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,974:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,974:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,974:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,974:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,982:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,982:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,982:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,982:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,982:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,982:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,990:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,990:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,990:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,990:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,990:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,998:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,998:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,998:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:14,998:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,006:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,006:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,006:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,014:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,014:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,030:INFO:Calculating mean and std
2024-10-28 13:36:15,030:INFO:Creating metrics dataframe
2024-10-28 13:36:15,030:INFO:Uploading results into container
2024-10-28 13:36:15,030:INFO:Uploading model into container now
2024-10-28 13:36:15,030:INFO:_master_model_container: 7
2024-10-28 13:36:15,030:INFO:_display_container: 2
2024-10-28 13:36:15,030:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-28 13:36:15,030:INFO:create_model() successfully completed......................................
2024-10-28 13:36:15,094:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:15,094:INFO:Creating metrics dataframe
2024-10-28 13:36:15,094:INFO:Initializing Quadratic Discriminant Analysis
2024-10-28 13:36:15,094:INFO:Total runtime is 0.18000242312749223 minutes
2024-10-28 13:36:15,094:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:15,094:INFO:Initializing create_model()
2024-10-28 13:36:15,094:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:15,094:INFO:Checking exceptions
2024-10-28 13:36:15,094:INFO:Importing libraries
2024-10-28 13:36:15,094:INFO:Copying training dataset
2024-10-28 13:36:15,094:INFO:Defining folds
2024-10-28 13:36:15,094:INFO:Declaring metric variables
2024-10-28 13:36:15,094:INFO:Importing untrained model
2024-10-28 13:36:15,094:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-28 13:36:15,094:INFO:Starting cross validation
2024-10-28 13:36:15,094:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:15,134:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,134:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,134:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,134:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,134:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,134:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,142:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,142:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,142:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,142:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:15,150:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,150:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,150:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,158:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,166:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,174:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,180:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,182:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,182:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,182:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,182:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,182:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,214:INFO:Calculating mean and std
2024-10-28 13:36:15,214:INFO:Creating metrics dataframe
2024-10-28 13:36:15,214:INFO:Uploading results into container
2024-10-28 13:36:15,214:INFO:Uploading model into container now
2024-10-28 13:36:15,214:INFO:_master_model_container: 8
2024-10-28 13:36:15,214:INFO:_display_container: 2
2024-10-28 13:36:15,214:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 13:36:15,214:INFO:create_model() successfully completed......................................
2024-10-28 13:36:15,278:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:15,278:INFO:Creating metrics dataframe
2024-10-28 13:36:15,281:INFO:Initializing Ada Boost Classifier
2024-10-28 13:36:15,281:INFO:Total runtime is 0.18311523993810014 minutes
2024-10-28 13:36:15,281:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:15,281:INFO:Initializing create_model()
2024-10-28 13:36:15,281:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:15,281:INFO:Checking exceptions
2024-10-28 13:36:15,281:INFO:Importing libraries
2024-10-28 13:36:15,281:INFO:Copying training dataset
2024-10-28 13:36:15,281:INFO:Defining folds
2024-10-28 13:36:15,281:INFO:Declaring metric variables
2024-10-28 13:36:15,281:INFO:Importing untrained model
2024-10-28 13:36:15,281:INFO:Ada Boost Classifier Imported successfully
2024-10-28 13:36:15,281:INFO:Starting cross validation
2024-10-28 13:36:15,286:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:15,310:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,310:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,310:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,318:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,318:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,321:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,326:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,326:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,326:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,326:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 13:36:15,654:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,662:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,662:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,670:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,678:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,681:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,681:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,681:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,686:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,686:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,686:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,686:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,686:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,694:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,702:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,702:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,702:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,702:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,702:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:15,734:INFO:Calculating mean and std
2024-10-28 13:36:15,734:INFO:Creating metrics dataframe
2024-10-28 13:36:15,734:INFO:Uploading results into container
2024-10-28 13:36:15,734:INFO:Uploading model into container now
2024-10-28 13:36:15,734:INFO:_master_model_container: 9
2024-10-28 13:36:15,734:INFO:_display_container: 2
2024-10-28 13:36:15,734:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-28 13:36:15,734:INFO:create_model() successfully completed......................................
2024-10-28 13:36:15,806:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:15,806:INFO:Creating metrics dataframe
2024-10-28 13:36:15,806:INFO:Initializing Gradient Boosting Classifier
2024-10-28 13:36:15,806:INFO:Total runtime is 0.19188134272893265 minutes
2024-10-28 13:36:15,806:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:15,806:INFO:Initializing create_model()
2024-10-28 13:36:15,806:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:15,806:INFO:Checking exceptions
2024-10-28 13:36:15,806:INFO:Importing libraries
2024-10-28 13:36:15,806:INFO:Copying training dataset
2024-10-28 13:36:15,815:INFO:Defining folds
2024-10-28 13:36:15,815:INFO:Declaring metric variables
2024-10-28 13:36:15,815:INFO:Importing untrained model
2024-10-28 13:36:15,815:INFO:Gradient Boosting Classifier Imported successfully
2024-10-28 13:36:15,815:INFO:Starting cross validation
2024-10-28 13:36:15,815:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:16,527:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,535:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,535:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,543:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,543:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,543:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,551:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,551:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,559:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,559:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,559:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,559:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,559:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,559:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,567:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,575:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,575:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,575:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,575:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,575:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,581:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,583:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,583:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,599:INFO:Calculating mean and std
2024-10-28 13:36:16,599:INFO:Creating metrics dataframe
2024-10-28 13:36:16,599:INFO:Uploading results into container
2024-10-28 13:36:16,599:INFO:Uploading model into container now
2024-10-28 13:36:16,599:INFO:_master_model_container: 10
2024-10-28 13:36:16,599:INFO:_display_container: 2
2024-10-28 13:36:16,599:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-28 13:36:16,599:INFO:create_model() successfully completed......................................
2024-10-28 13:36:16,671:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:16,671:INFO:Creating metrics dataframe
2024-10-28 13:36:16,679:INFO:Initializing Linear Discriminant Analysis
2024-10-28 13:36:16,679:INFO:Total runtime is 0.20642224550247187 minutes
2024-10-28 13:36:16,679:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:16,679:INFO:Initializing create_model()
2024-10-28 13:36:16,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:16,681:INFO:Checking exceptions
2024-10-28 13:36:16,681:INFO:Importing libraries
2024-10-28 13:36:16,681:INFO:Copying training dataset
2024-10-28 13:36:16,681:INFO:Defining folds
2024-10-28 13:36:16,681:INFO:Declaring metric variables
2024-10-28 13:36:16,681:INFO:Importing untrained model
2024-10-28 13:36:16,681:INFO:Linear Discriminant Analysis Imported successfully
2024-10-28 13:36:16,687:INFO:Starting cross validation
2024-10-28 13:36:16,687:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:16,751:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,751:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,751:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,751:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,759:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,767:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,775:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,782:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,782:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,782:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,783:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:16,799:INFO:Calculating mean and std
2024-10-28 13:36:16,799:INFO:Creating metrics dataframe
2024-10-28 13:36:16,799:INFO:Uploading results into container
2024-10-28 13:36:16,799:INFO:Uploading model into container now
2024-10-28 13:36:16,799:INFO:_master_model_container: 11
2024-10-28 13:36:16,799:INFO:_display_container: 2
2024-10-28 13:36:16,799:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-28 13:36:16,799:INFO:create_model() successfully completed......................................
2024-10-28 13:36:16,882:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:16,882:INFO:Creating metrics dataframe
2024-10-28 13:36:16,887:INFO:Initializing Extra Trees Classifier
2024-10-28 13:36:16,887:INFO:Total runtime is 0.20989442666371658 minutes
2024-10-28 13:36:16,887:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:16,887:INFO:Initializing create_model()
2024-10-28 13:36:16,887:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:16,887:INFO:Checking exceptions
2024-10-28 13:36:16,887:INFO:Importing libraries
2024-10-28 13:36:16,887:INFO:Copying training dataset
2024-10-28 13:36:16,887:INFO:Defining folds
2024-10-28 13:36:16,887:INFO:Declaring metric variables
2024-10-28 13:36:16,887:INFO:Importing untrained model
2024-10-28 13:36:16,887:INFO:Extra Trees Classifier Imported successfully
2024-10-28 13:36:16,887:INFO:Starting cross validation
2024-10-28 13:36:16,887:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:17,359:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,359:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,359:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,359:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,359:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,359:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,359:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,375:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,384:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,392:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,400:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,456:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,464:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,464:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,464:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,464:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:17,496:INFO:Calculating mean and std
2024-10-28 13:36:17,496:INFO:Creating metrics dataframe
2024-10-28 13:36:17,496:INFO:Uploading results into container
2024-10-28 13:36:17,496:INFO:Uploading model into container now
2024-10-28 13:36:17,496:INFO:_master_model_container: 12
2024-10-28 13:36:17,496:INFO:_display_container: 2
2024-10-28 13:36:17,496:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-28 13:36:17,496:INFO:create_model() successfully completed......................................
2024-10-28 13:36:17,584:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:17,584:INFO:Creating metrics dataframe
2024-10-28 13:36:17,592:INFO:Initializing Extreme Gradient Boosting
2024-10-28 13:36:17,592:INFO:Total runtime is 0.2216353813807169 minutes
2024-10-28 13:36:17,592:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:17,592:INFO:Initializing create_model()
2024-10-28 13:36:17,592:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:17,592:INFO:Checking exceptions
2024-10-28 13:36:17,592:INFO:Importing libraries
2024-10-28 13:36:17,592:INFO:Copying training dataset
2024-10-28 13:36:17,592:INFO:Defining folds
2024-10-28 13:36:17,592:INFO:Declaring metric variables
2024-10-28 13:36:17,600:INFO:Importing untrained model
2024-10-28 13:36:17,600:INFO:Extreme Gradient Boosting Imported successfully
2024-10-28 13:36:17,600:INFO:Starting cross validation
2024-10-28 13:36:17,600:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:19,963:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,971:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,979:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,979:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,979:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,979:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,979:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,979:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,985:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,985:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,987:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,995:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:19,995:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:20,003:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:20,003:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:20,019:INFO:Calculating mean and std
2024-10-28 13:36:20,019:INFO:Creating metrics dataframe
2024-10-28 13:36:20,019:INFO:Uploading results into container
2024-10-28 13:36:20,019:INFO:Uploading model into container now
2024-10-28 13:36:20,019:INFO:_master_model_container: 13
2024-10-28 13:36:20,019:INFO:_display_container: 2
2024-10-28 13:36:20,019:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-28 13:36:20,019:INFO:create_model() successfully completed......................................
2024-10-28 13:36:20,085:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:20,085:INFO:Creating metrics dataframe
2024-10-28 13:36:20,092:INFO:Initializing Light Gradient Boosting Machine
2024-10-28 13:36:20,092:INFO:Total runtime is 0.26330011288324984 minutes
2024-10-28 13:36:20,092:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:20,092:INFO:Initializing create_model()
2024-10-28 13:36:20,092:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:20,092:INFO:Checking exceptions
2024-10-28 13:36:20,092:INFO:Importing libraries
2024-10-28 13:36:20,092:INFO:Copying training dataset
2024-10-28 13:36:20,092:INFO:Defining folds
2024-10-28 13:36:20,092:INFO:Declaring metric variables
2024-10-28 13:36:20,092:INFO:Importing untrained model
2024-10-28 13:36:20,092:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-28 13:36:20,092:INFO:Starting cross validation
2024-10-28 13:36:20,092:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:21,077:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,093:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,101:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,269:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,269:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,269:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,277:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,277:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,277:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,285:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,285:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,285:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,293:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,293:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,293:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,341:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,349:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,349:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,357:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,365:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,365:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,365:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,365:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,373:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,373:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,381:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,389:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,413:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,426:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,429:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,453:INFO:Calculating mean and std
2024-10-28 13:36:21,453:INFO:Creating metrics dataframe
2024-10-28 13:36:21,453:INFO:Uploading results into container
2024-10-28 13:36:21,453:INFO:Uploading model into container now
2024-10-28 13:36:21,453:INFO:_master_model_container: 14
2024-10-28 13:36:21,453:INFO:_display_container: 2
2024-10-28 13:36:21,453:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-28 13:36:21,453:INFO:create_model() successfully completed......................................
2024-10-28 13:36:21,541:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:21,541:INFO:Creating metrics dataframe
2024-10-28 13:36:21,541:INFO:Initializing Dummy Classifier
2024-10-28 13:36:21,541:INFO:Total runtime is 0.2874631762504577 minutes
2024-10-28 13:36:21,541:INFO:SubProcess create_model() called ==================================
2024-10-28 13:36:21,541:INFO:Initializing create_model()
2024-10-28 13:36:21,541:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028A4D47EAA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:21,541:INFO:Checking exceptions
2024-10-28 13:36:21,541:INFO:Importing libraries
2024-10-28 13:36:21,541:INFO:Copying training dataset
2024-10-28 13:36:21,549:INFO:Defining folds
2024-10-28 13:36:21,549:INFO:Declaring metric variables
2024-10-28 13:36:21,549:INFO:Importing untrained model
2024-10-28 13:36:21,549:INFO:Dummy Classifier Imported successfully
2024-10-28 13:36:21,549:INFO:Starting cross validation
2024-10-28 13:36:21,549:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 13:36:21,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,589:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,597:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,605:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,613:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,621:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,621:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,621:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 13:36:21,621:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,621:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,621:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 13:36:21,653:INFO:Calculating mean and std
2024-10-28 13:36:21,653:INFO:Creating metrics dataframe
2024-10-28 13:36:21,653:INFO:Uploading results into container
2024-10-28 13:36:21,653:INFO:Uploading model into container now
2024-10-28 13:36:21,653:INFO:_master_model_container: 15
2024-10-28 13:36:21,653:INFO:_display_container: 2
2024-10-28 13:36:21,653:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-28 13:36:21,653:INFO:create_model() successfully completed......................................
2024-10-28 13:36:21,718:INFO:SubProcess create_model() end ==================================
2024-10-28 13:36:21,718:INFO:Creating metrics dataframe
2024-10-28 13:36:21,725:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-28 13:36:21,725:INFO:Initializing create_model()
2024-10-28 13:36:21,725:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:21,725:INFO:Checking exceptions
2024-10-28 13:36:21,725:INFO:Importing libraries
2024-10-28 13:36:21,725:INFO:Copying training dataset
2024-10-28 13:36:21,725:INFO:Defining folds
2024-10-28 13:36:21,725:INFO:Declaring metric variables
2024-10-28 13:36:21,725:INFO:Importing untrained model
2024-10-28 13:36:21,725:INFO:Declaring custom model
2024-10-28 13:36:21,725:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-28 13:36:21,725:INFO:Cross validation set to False
2024-10-28 13:36:21,734:INFO:Fitting Model
2024-10-28 13:36:21,734:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:21,741:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 13:36:21,741:INFO:create_model() successfully completed......................................
2024-10-28 13:36:21,822:INFO:_master_model_container: 15
2024-10-28 13:36:21,830:INFO:_display_container: 2
2024-10-28 13:36:21,830:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 13:36:21,830:INFO:compare_models() successfully completed......................................
2024-10-28 13:36:21,854:INFO:Initializing finalize_model()
2024-10-28 13:36:21,854:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-28 13:36:21,854:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 13:36:21,854:INFO:Initializing create_model()
2024-10-28 13:36:21,854:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:21,854:INFO:Checking exceptions
2024-10-28 13:36:21,854:INFO:Importing libraries
2024-10-28 13:36:21,854:INFO:Copying training dataset
2024-10-28 13:36:21,854:INFO:Defining folds
2024-10-28 13:36:21,854:INFO:Declaring metric variables
2024-10-28 13:36:21,854:INFO:Importing untrained model
2024-10-28 13:36:21,862:INFO:Declaring custom model
2024-10-28 13:36:21,862:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-28 13:36:21,862:INFO:Cross validation set to False
2024-10-28 13:36:21,862:INFO:Fitting Model
2024-10-28 13:36:21,870:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:21,878:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 13:36:21,878:INFO:create_model() successfully completed......................................
2024-10-28 13:36:21,966:INFO:_master_model_container: 15
2024-10-28 13:36:21,966:INFO:_display_container: 2
2024-10-28 13:36:21,966:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 13:36:21,966:INFO:finalize_model() successfully completed......................................
2024-10-28 13:36:22,054:INFO:Initializing evaluate_model()
2024-10-28 13:36:22,054:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-28 13:36:22,070:INFO:Initializing plot_model()
2024-10-28 13:36:22,070:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, system=True)
2024-10-28 13:36:22,070:INFO:Checking exceptions
2024-10-28 13:36:22,078:INFO:Preloading libraries
2024-10-28 13:36:22,078:INFO:Copying training dataset
2024-10-28 13:36:22,078:INFO:Plot type: pipeline
2024-10-28 13:36:22,262:INFO:Visual Rendered Successfully
2024-10-28 13:36:22,326:INFO:plot_model() successfully completed......................................
2024-10-28 13:36:22,366:INFO:Initializing save_model()
2024-10-28 13:36:22,366:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-28 13:36:22,366:INFO:Adding model into prep_pipe
2024-10-28 13:36:22,366:WARNING:Only Model saved as it was a pipeline.
2024-10-28 13:36:22,374:INFO:best_emg_model.pkl saved in current working directory
2024-10-28 13:36:22,382:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 13:36:22,382:INFO:save_model() successfully completed......................................
2024-10-28 13:36:24,001:INFO:Initializing finalize_model()
2024-10-28 13:36:24,001:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-28 13:36:24,001:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 13:36:24,001:INFO:Initializing create_model()
2024-10-28 13:36:24,001:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 13:36:24,001:INFO:Checking exceptions
2024-10-28 13:36:24,001:INFO:Importing libraries
2024-10-28 13:36:24,001:INFO:Copying training dataset
2024-10-28 13:36:24,001:INFO:Defining folds
2024-10-28 13:36:24,001:INFO:Declaring metric variables
2024-10-28 13:36:24,001:INFO:Importing untrained model
2024-10-28 13:36:24,001:INFO:Declaring custom model
2024-10-28 13:36:24,009:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-28 13:36:24,009:INFO:Cross validation set to False
2024-10-28 13:36:24,009:INFO:Fitting Model
2024-10-28 13:36:24,017:WARNING:c:\Users\Khambhati\anaconda3\envs\subvocal\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 13:36:24,025:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 13:36:24,025:INFO:create_model() successfully completed......................................
2024-10-28 13:36:24,105:INFO:_master_model_container: 15
2024-10-28 13:36:24,105:INFO:_display_container: 2
2024-10-28 13:36:24,113:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 13:36:24,113:INFO:finalize_model() successfully completed......................................
2024-10-28 13:36:25,939:INFO:Initializing evaluate_model()
2024-10-28 13:36:25,939:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-28 13:36:25,955:INFO:Initializing plot_model()
2024-10-28 13:36:25,955:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028A28DC71F0>, system=True)
2024-10-28 13:36:25,955:INFO:Checking exceptions
2024-10-28 13:36:25,963:INFO:Preloading libraries
2024-10-28 13:36:25,963:INFO:Copying training dataset
2024-10-28 13:36:25,963:INFO:Plot type: pipeline
2024-10-28 13:36:26,043:INFO:Visual Rendered Successfully
2024-10-28 13:36:26,116:INFO:plot_model() successfully completed......................................
2024-10-28 13:36:28,214:INFO:Initializing save_model()
2024-10-28 13:36:28,214:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-28 13:36:28,214:INFO:Adding model into prep_pipe
2024-10-28 13:36:28,214:WARNING:Only Model saved as it was a pipeline.
2024-10-28 13:36:28,214:INFO:best_emg_model.pkl saved in current working directory
2024-10-28 13:36:28,222:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 13:36:28,222:INFO:save_model() successfully completed......................................
2024-10-28 13:37:18,493:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:37:18,493:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:37:18,493:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:37:18,493:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:37:19,897:INFO:Initializing load_model()
2024-10-28 13:37:19,897:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 13:40:40,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:40:40,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:40:40,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:40:40,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:40:42,240:INFO:Initializing load_model()
2024-10-28 13:40:42,240:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 13:42:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:42:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:42:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:42:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:42:24,973:INFO:Initializing load_model()
2024-10-28 13:42:24,973:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 13:43:01,265:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:43:01,265:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:43:01,265:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:43:01,265:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:43:02,210:INFO:Initializing load_model()
2024-10-28 13:43:02,210:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 13:46:10,735:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:10,735:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:10,735:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:10,735:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:11,840:INFO:Initializing load_model()
2024-10-28 13:46:11,840:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 13:46:30,611:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:30,611:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:30,611:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:30,611:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 13:46:31,551:INFO:Initializing load_model()
2024-10-28 13:46:31,551:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 22:31:50,515:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:50,515:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:50,515:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:50,515:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:51,534:INFO:Initializing load_model()
2024-10-28 22:31:51,534:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 22:31:51,633:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-28 22:31:58,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:58,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:58,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:58,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:31:59,775:INFO:Initializing load_model()
2024-10-28 22:31:59,775:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 22:31:59,803:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-28 22:33:56,006:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:33:56,006:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:33:56,006:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:33:56,006:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:33:57,479:INFO:Initializing load_model()
2024-10-28 22:33:57,479:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 22:34:29,024:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:34:29,024:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:34:29,024:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:34:29,024:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:34:30,214:INFO:Initializing load_model()
2024-10-28 22:34:30,214:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-28 22:34:30,254:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-28 22:50:50,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:50:50,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:50:50,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:50:50,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:51:06,333:INFO:PyCaret ClassificationExperiment
2024-10-28 22:51:06,333:INFO:Logging name: clf-default-name
2024-10-28 22:51:06,333:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-28 22:51:06,333:INFO:version 3.3.2
2024-10-28 22:51:06,333:INFO:Initializing setup()
2024-10-28 22:51:06,333:INFO:self.USI: 0caa
2024-10-28 22:51:06,333:INFO:self._variable_keys: {'USI', 'exp_name_log', 'html_param', 'pipeline', 'X_train', 'memory', 'idx', 'logging_param', 'data', '_ml_usecase', 'fold_shuffle_param', 'y_test', 'y_train', 'X', 'is_multiclass', 'seed', 'X_test', 'fix_imbalance', 'fold_groups_param', 'gpu_n_jobs_param', 'exp_id', 'fold_generator', 'target_param', '_available_plots', 'n_jobs_param', 'y', 'gpu_param', 'log_plots_param'}
2024-10-28 22:51:06,333:INFO:Checking environment
2024-10-28 22:51:06,333:INFO:python_version: 3.10.14
2024-10-28 22:51:06,333:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-28 22:51:06,333:INFO:machine: AMD64
2024-10-28 22:51:06,333:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-28 22:51:06,341:INFO:Memory: svmem(total=16747851776, available=4175413248, percent=75.1, used=12572438528, free=4175413248)
2024-10-28 22:51:06,341:INFO:Physical Core: 8
2024-10-28 22:51:06,341:INFO:Logical Core: 16
2024-10-28 22:51:06,341:INFO:Checking libraries
2024-10-28 22:51:06,341:INFO:System:
2024-10-28 22:51:06,341:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-28 22:51:06,341:INFO:executable: c:\Users\Khambhati\anaconda3\envs\brainwave\python.exe
2024-10-28 22:51:06,341:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-28 22:51:06,341:INFO:PyCaret required dependencies:
2024-10-28 22:51:06,373:INFO:                 pip: 24.2
2024-10-28 22:51:06,381:INFO:          setuptools: 75.1.0
2024-10-28 22:51:06,381:INFO:             pycaret: 3.3.2
2024-10-28 22:51:06,381:INFO:             IPython: 8.29.0
2024-10-28 22:51:06,381:INFO:          ipywidgets: 8.1.5
2024-10-28 22:51:06,381:INFO:                tqdm: 4.66.6
2024-10-28 22:51:06,381:INFO:               numpy: 1.23.3
2024-10-28 22:51:06,381:INFO:              pandas: 2.1.4
2024-10-28 22:51:06,381:INFO:              jinja2: 3.1.4
2024-10-28 22:51:06,381:INFO:               scipy: 1.9.1
2024-10-28 22:51:06,381:INFO:              joblib: 1.3.2
2024-10-28 22:51:06,381:INFO:             sklearn: 1.4.2
2024-10-28 22:51:06,381:INFO:                pyod: 2.0.2
2024-10-28 22:51:06,381:INFO:            imblearn: 0.12.4
2024-10-28 22:51:06,381:INFO:   category_encoders: 2.6.4
2024-10-28 22:51:06,381:INFO:            lightgbm: 4.5.0
2024-10-28 22:51:06,381:INFO:               numba: 0.60.0
2024-10-28 22:51:06,381:INFO:            requests: 2.32.3
2024-10-28 22:51:06,381:INFO:          matplotlib: 3.7.5
2024-10-28 22:51:06,381:INFO:          scikitplot: 0.3.7
2024-10-28 22:51:06,381:INFO:         yellowbrick: 1.5
2024-10-28 22:51:06,381:INFO:              plotly: 5.24.1
2024-10-28 22:51:06,381:INFO:    plotly-resampler: Not installed
2024-10-28 22:51:06,381:INFO:             kaleido: 0.2.1
2024-10-28 22:51:06,381:INFO:           schemdraw: 0.15
2024-10-28 22:51:06,381:INFO:         statsmodels: 0.14.4
2024-10-28 22:51:06,381:INFO:              sktime: 0.26.0
2024-10-28 22:51:06,381:INFO:               tbats: 1.1.3
2024-10-28 22:51:06,381:INFO:            pmdarima: 2.0.4
2024-10-28 22:51:06,381:INFO:              psutil: 6.1.0
2024-10-28 22:51:06,381:INFO:          markupsafe: 2.1.5
2024-10-28 22:51:06,381:INFO:             pickle5: Not installed
2024-10-28 22:51:06,381:INFO:         cloudpickle: 3.1.0
2024-10-28 22:51:06,381:INFO:         deprecation: 2.1.0
2024-10-28 22:51:06,381:INFO:              xxhash: 3.5.0
2024-10-28 22:51:06,381:INFO:           wurlitzer: Not installed
2024-10-28 22:51:06,381:INFO:PyCaret optional dependencies:
2024-10-28 22:51:06,597:INFO:                shap: Not installed
2024-10-28 22:51:06,597:INFO:           interpret: Not installed
2024-10-28 22:51:06,597:INFO:                umap: Not installed
2024-10-28 22:51:06,597:INFO:     ydata_profiling: Not installed
2024-10-28 22:51:06,597:INFO:  explainerdashboard: Not installed
2024-10-28 22:51:06,597:INFO:             autoviz: Not installed
2024-10-28 22:51:06,597:INFO:           fairlearn: Not installed
2024-10-28 22:51:06,597:INFO:          deepchecks: Not installed
2024-10-28 22:51:06,597:INFO:             xgboost: 2.1.1
2024-10-28 22:51:06,597:INFO:            catboost: Not installed
2024-10-28 22:51:06,597:INFO:              kmodes: Not installed
2024-10-28 22:51:06,597:INFO:             mlxtend: Not installed
2024-10-28 22:51:06,597:INFO:       statsforecast: Not installed
2024-10-28 22:51:06,597:INFO:        tune_sklearn: Not installed
2024-10-28 22:51:06,597:INFO:                 ray: Not installed
2024-10-28 22:51:06,597:INFO:            hyperopt: Not installed
2024-10-28 22:51:06,597:INFO:              optuna: Not installed
2024-10-28 22:51:06,597:INFO:               skopt: Not installed
2024-10-28 22:51:06,597:INFO:              mlflow: Not installed
2024-10-28 22:51:06,597:INFO:              gradio: Not installed
2024-10-28 22:51:06,597:INFO:             fastapi: Not installed
2024-10-28 22:51:06,597:INFO:             uvicorn: Not installed
2024-10-28 22:51:06,597:INFO:              m2cgen: Not installed
2024-10-28 22:51:06,597:INFO:           evidently: Not installed
2024-10-28 22:51:06,597:INFO:               fugue: Not installed
2024-10-28 22:51:06,597:INFO:           streamlit: Not installed
2024-10-28 22:51:06,597:INFO:             prophet: Not installed
2024-10-28 22:51:06,597:INFO:None
2024-10-28 22:51:06,597:INFO:Set up data.
2024-10-28 22:51:06,613:INFO:Set up folding strategy.
2024-10-28 22:51:06,613:INFO:Set up train/test split.
2024-10-28 22:51:06,637:INFO:Set up index.
2024-10-28 22:51:06,637:INFO:Assigning column types.
2024-10-28 22:51:06,645:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-28 22:51:06,685:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-28 22:51:06,693:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 22:51:06,757:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:06,757:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:06,805:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-28 22:51:06,805:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 22:51:06,829:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:06,829:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:06,829:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-28 22:51:06,869:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 22:51:06,901:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:06,901:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:06,941:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-28 22:51:06,965:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:06,973:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:06,973:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-28 22:51:07,045:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:07,045:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:07,109:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:07,109:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:07,117:INFO:Preparing preprocessing pipeline...
2024-10-28 22:51:07,117:INFO:Set up label encoding.
2024-10-28 22:51:07,117:INFO:Set up simple imputation.
2024-10-28 22:51:07,166:INFO:Finished creating preprocessing pipeline.
2024-10-28 22:51:07,174:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-28 22:51:07,174:INFO:Creating final display dataframe.
2024-10-28 22:51:07,270:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (9338, 4)
5        Transformed data shape         (9338, 4)
6   Transformed train set shape         (6536, 4)
7    Transformed test set shape         (2802, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              0caa
2024-10-28 22:51:07,342:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:07,342:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:07,414:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-28 22:51:07,414:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-28 22:51:07,422:INFO:setup() successfully completed in 1.1s...............
2024-10-28 22:51:13,426:INFO:Initializing compare_models()
2024-10-28 22:51:13,426:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-28 22:51:13,426:INFO:Checking exceptions
2024-10-28 22:51:13,434:INFO:Preparing display monitor
2024-10-28 22:51:13,442:INFO:Initializing Logistic Regression
2024-10-28 22:51:13,442:INFO:Total runtime is 0.0 minutes
2024-10-28 22:51:13,442:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:13,442:INFO:Initializing create_model()
2024-10-28 22:51:13,442:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:13,442:INFO:Checking exceptions
2024-10-28 22:51:13,442:INFO:Importing libraries
2024-10-28 22:51:13,442:INFO:Copying training dataset
2024-10-28 22:51:13,450:INFO:Defining folds
2024-10-28 22:51:13,450:INFO:Declaring metric variables
2024-10-28 22:51:13,450:INFO:Importing untrained model
2024-10-28 22:51:13,450:INFO:Logistic Regression Imported successfully
2024-10-28 22:51:13,450:INFO:Starting cross validation
2024-10-28 22:51:13,450:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:18,236:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,252:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,263:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,276:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,284:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,292:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,404:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,404:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,404:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,412:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,412:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,412:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,420:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,420:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,428:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,428:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,436:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,444:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,460:INFO:Calculating mean and std
2024-10-28 22:51:18,463:INFO:Creating metrics dataframe
2024-10-28 22:51:18,468:INFO:Uploading results into container
2024-10-28 22:51:18,468:INFO:Uploading model into container now
2024-10-28 22:51:18,468:INFO:_master_model_container: 1
2024-10-28 22:51:18,468:INFO:_display_container: 2
2024-10-28 22:51:18,468:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-28 22:51:18,468:INFO:create_model() successfully completed......................................
2024-10-28 22:51:18,605:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:18,605:INFO:Creating metrics dataframe
2024-10-28 22:51:18,605:INFO:Initializing K Neighbors Classifier
2024-10-28 22:51:18,605:INFO:Total runtime is 0.08604052861531576 minutes
2024-10-28 22:51:18,605:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:18,605:INFO:Initializing create_model()
2024-10-28 22:51:18,605:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:18,605:INFO:Checking exceptions
2024-10-28 22:51:18,605:INFO:Importing libraries
2024-10-28 22:51:18,605:INFO:Copying training dataset
2024-10-28 22:51:18,613:INFO:Defining folds
2024-10-28 22:51:18,613:INFO:Declaring metric variables
2024-10-28 22:51:18,613:INFO:Importing untrained model
2024-10-28 22:51:18,613:INFO:K Neighbors Classifier Imported successfully
2024-10-28 22:51:18,613:INFO:Starting cross validation
2024-10-28 22:51:18,613:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:18,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,797:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,797:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,797:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,805:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,813:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,813:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,813:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:18,813:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,950:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,950:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,958:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,966:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,974:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,974:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,998:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:21,998:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,006:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,006:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,006:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,014:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,014:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,014:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,022:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,022:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,030:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,030:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,054:INFO:Calculating mean and std
2024-10-28 22:51:22,054:INFO:Creating metrics dataframe
2024-10-28 22:51:22,054:INFO:Uploading results into container
2024-10-28 22:51:22,054:INFO:Uploading model into container now
2024-10-28 22:51:22,054:INFO:_master_model_container: 2
2024-10-28 22:51:22,054:INFO:_display_container: 2
2024-10-28 22:51:22,054:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-28 22:51:22,054:INFO:create_model() successfully completed......................................
2024-10-28 22:51:22,134:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:22,134:INFO:Creating metrics dataframe
2024-10-28 22:51:22,142:INFO:Initializing Naive Bayes
2024-10-28 22:51:22,142:INFO:Total runtime is 0.14499887228012087 minutes
2024-10-28 22:51:22,142:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:22,142:INFO:Initializing create_model()
2024-10-28 22:51:22,142:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:22,142:INFO:Checking exceptions
2024-10-28 22:51:22,142:INFO:Importing libraries
2024-10-28 22:51:22,142:INFO:Copying training dataset
2024-10-28 22:51:22,142:INFO:Defining folds
2024-10-28 22:51:22,142:INFO:Declaring metric variables
2024-10-28 22:51:22,142:INFO:Importing untrained model
2024-10-28 22:51:22,142:INFO:Naive Bayes Imported successfully
2024-10-28 22:51:22,142:INFO:Starting cross validation
2024-10-28 22:51:22,142:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:22,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,206:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,206:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,206:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,206:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,206:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,206:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,206:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,222:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,222:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,222:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,222:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,222:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,230:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,230:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,270:INFO:Calculating mean and std
2024-10-28 22:51:22,270:INFO:Creating metrics dataframe
2024-10-28 22:51:22,270:INFO:Uploading results into container
2024-10-28 22:51:22,270:INFO:Uploading model into container now
2024-10-28 22:51:22,270:INFO:_master_model_container: 3
2024-10-28 22:51:22,270:INFO:_display_container: 2
2024-10-28 22:51:22,270:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-28 22:51:22,270:INFO:create_model() successfully completed......................................
2024-10-28 22:51:22,350:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:22,350:INFO:Creating metrics dataframe
2024-10-28 22:51:22,358:INFO:Initializing Decision Tree Classifier
2024-10-28 22:51:22,358:INFO:Total runtime is 0.14860348701477052 minutes
2024-10-28 22:51:22,358:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:22,358:INFO:Initializing create_model()
2024-10-28 22:51:22,358:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:22,358:INFO:Checking exceptions
2024-10-28 22:51:22,358:INFO:Importing libraries
2024-10-28 22:51:22,358:INFO:Copying training dataset
2024-10-28 22:51:22,358:INFO:Defining folds
2024-10-28 22:51:22,358:INFO:Declaring metric variables
2024-10-28 22:51:22,358:INFO:Importing untrained model
2024-10-28 22:51:22,358:INFO:Decision Tree Classifier Imported successfully
2024-10-28 22:51:22,358:INFO:Starting cross validation
2024-10-28 22:51:22,358:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:22,414:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,446:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,446:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,446:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,454:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,470:INFO:Calculating mean and std
2024-10-28 22:51:22,470:INFO:Creating metrics dataframe
2024-10-28 22:51:22,470:INFO:Uploading results into container
2024-10-28 22:51:22,470:INFO:Uploading model into container now
2024-10-28 22:51:22,470:INFO:_master_model_container: 4
2024-10-28 22:51:22,470:INFO:_display_container: 2
2024-10-28 22:51:22,470:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-28 22:51:22,470:INFO:create_model() successfully completed......................................
2024-10-28 22:51:22,550:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:22,550:INFO:Creating metrics dataframe
2024-10-28 22:51:22,550:INFO:Initializing SVM - Linear Kernel
2024-10-28 22:51:22,558:INFO:Total runtime is 0.1519397020339966 minutes
2024-10-28 22:51:22,558:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:22,558:INFO:Initializing create_model()
2024-10-28 22:51:22,558:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:22,558:INFO:Checking exceptions
2024-10-28 22:51:22,558:INFO:Importing libraries
2024-10-28 22:51:22,558:INFO:Copying training dataset
2024-10-28 22:51:22,558:INFO:Defining folds
2024-10-28 22:51:22,558:INFO:Declaring metric variables
2024-10-28 22:51:22,558:INFO:Importing untrained model
2024-10-28 22:51:22,558:INFO:SVM - Linear Kernel Imported successfully
2024-10-28 22:51:22,558:INFO:Starting cross validation
2024-10-28 22:51:22,558:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:22,639:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,647:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,655:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,655:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,665:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,671:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,671:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,703:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,703:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,703:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,703:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,711:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,727:INFO:Calculating mean and std
2024-10-28 22:51:22,727:INFO:Creating metrics dataframe
2024-10-28 22:51:22,727:INFO:Uploading results into container
2024-10-28 22:51:22,727:INFO:Uploading model into container now
2024-10-28 22:51:22,727:INFO:_master_model_container: 5
2024-10-28 22:51:22,727:INFO:_display_container: 2
2024-10-28 22:51:22,727:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-28 22:51:22,727:INFO:create_model() successfully completed......................................
2024-10-28 22:51:22,807:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:22,807:INFO:Creating metrics dataframe
2024-10-28 22:51:22,807:INFO:Initializing Ridge Classifier
2024-10-28 22:51:22,807:INFO:Total runtime is 0.15607564051946005 minutes
2024-10-28 22:51:22,807:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:22,807:INFO:Initializing create_model()
2024-10-28 22:51:22,807:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:22,807:INFO:Checking exceptions
2024-10-28 22:51:22,807:INFO:Importing libraries
2024-10-28 22:51:22,807:INFO:Copying training dataset
2024-10-28 22:51:22,815:INFO:Defining folds
2024-10-28 22:51:22,815:INFO:Declaring metric variables
2024-10-28 22:51:22,815:INFO:Importing untrained model
2024-10-28 22:51:22,815:INFO:Ridge Classifier Imported successfully
2024-10-28 22:51:22,815:INFO:Starting cross validation
2024-10-28 22:51:22,815:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:22,871:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,871:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,871:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,895:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,903:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,903:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,903:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,903:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,903:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,911:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:22,927:INFO:Calculating mean and std
2024-10-28 22:51:22,927:INFO:Creating metrics dataframe
2024-10-28 22:51:22,927:INFO:Uploading results into container
2024-10-28 22:51:22,927:INFO:Uploading model into container now
2024-10-28 22:51:22,927:INFO:_master_model_container: 6
2024-10-28 22:51:22,927:INFO:_display_container: 2
2024-10-28 22:51:22,927:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-28 22:51:22,927:INFO:create_model() successfully completed......................................
2024-10-28 22:51:23,007:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:23,007:INFO:Creating metrics dataframe
2024-10-28 22:51:23,015:INFO:Initializing Random Forest Classifier
2024-10-28 22:51:23,015:INFO:Total runtime is 0.15954450368881226 minutes
2024-10-28 22:51:23,015:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:23,015:INFO:Initializing create_model()
2024-10-28 22:51:23,015:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:23,015:INFO:Checking exceptions
2024-10-28 22:51:23,015:INFO:Importing libraries
2024-10-28 22:51:23,015:INFO:Copying training dataset
2024-10-28 22:51:23,015:INFO:Defining folds
2024-10-28 22:51:23,015:INFO:Declaring metric variables
2024-10-28 22:51:23,015:INFO:Importing untrained model
2024-10-28 22:51:23,015:INFO:Random Forest Classifier Imported successfully
2024-10-28 22:51:23,015:INFO:Starting cross validation
2024-10-28 22:51:23,015:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:23,487:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,487:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,503:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,503:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,511:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,511:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,543:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,543:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,631:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,639:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,647:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,663:INFO:Calculating mean and std
2024-10-28 22:51:23,663:INFO:Creating metrics dataframe
2024-10-28 22:51:23,666:INFO:Uploading results into container
2024-10-28 22:51:23,666:INFO:Uploading model into container now
2024-10-28 22:51:23,666:INFO:_master_model_container: 7
2024-10-28 22:51:23,666:INFO:_display_container: 2
2024-10-28 22:51:23,666:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-28 22:51:23,666:INFO:create_model() successfully completed......................................
2024-10-28 22:51:23,735:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:23,735:INFO:Creating metrics dataframe
2024-10-28 22:51:23,743:INFO:Initializing Quadratic Discriminant Analysis
2024-10-28 22:51:23,743:INFO:Total runtime is 0.17168442010879517 minutes
2024-10-28 22:51:23,743:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:23,743:INFO:Initializing create_model()
2024-10-28 22:51:23,743:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:23,743:INFO:Checking exceptions
2024-10-28 22:51:23,743:INFO:Importing libraries
2024-10-28 22:51:23,743:INFO:Copying training dataset
2024-10-28 22:51:23,743:INFO:Defining folds
2024-10-28 22:51:23,743:INFO:Declaring metric variables
2024-10-28 22:51:23,743:INFO:Importing untrained model
2024-10-28 22:51:23,743:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-28 22:51:23,743:INFO:Starting cross validation
2024-10-28 22:51:23,743:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:23,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,791:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,791:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,791:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,791:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:23,799:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,799:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,807:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,807:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,807:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,807:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,807:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,807:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,815:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,831:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,831:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,831:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:23,863:INFO:Calculating mean and std
2024-10-28 22:51:23,863:INFO:Creating metrics dataframe
2024-10-28 22:51:23,866:INFO:Uploading results into container
2024-10-28 22:51:23,866:INFO:Uploading model into container now
2024-10-28 22:51:23,866:INFO:_master_model_container: 8
2024-10-28 22:51:23,866:INFO:_display_container: 2
2024-10-28 22:51:23,866:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 22:51:23,866:INFO:create_model() successfully completed......................................
2024-10-28 22:51:23,935:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:23,935:INFO:Creating metrics dataframe
2024-10-28 22:51:23,935:INFO:Initializing Ada Boost Classifier
2024-10-28 22:51:23,935:INFO:Total runtime is 0.17488929430643718 minutes
2024-10-28 22:51:23,935:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:23,935:INFO:Initializing create_model()
2024-10-28 22:51:23,935:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:23,935:INFO:Checking exceptions
2024-10-28 22:51:23,935:INFO:Importing libraries
2024-10-28 22:51:23,935:INFO:Copying training dataset
2024-10-28 22:51:23,943:INFO:Defining folds
2024-10-28 22:51:23,943:INFO:Declaring metric variables
2024-10-28 22:51:23,943:INFO:Importing untrained model
2024-10-28 22:51:23,943:INFO:Ada Boost Classifier Imported successfully
2024-10-28 22:51:23,943:INFO:Starting cross validation
2024-10-28 22:51:23,943:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:23,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,976:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,976:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,976:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,984:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,984:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,984:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:23,984:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-28 22:51:24,248:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,266:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,266:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,296:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,296:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,296:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,296:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,304:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,304:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,304:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,312:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,320:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,328:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,352:INFO:Calculating mean and std
2024-10-28 22:51:24,352:INFO:Creating metrics dataframe
2024-10-28 22:51:24,352:INFO:Uploading results into container
2024-10-28 22:51:24,352:INFO:Uploading model into container now
2024-10-28 22:51:24,352:INFO:_master_model_container: 9
2024-10-28 22:51:24,352:INFO:_display_container: 2
2024-10-28 22:51:24,352:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-28 22:51:24,352:INFO:create_model() successfully completed......................................
2024-10-28 22:51:24,432:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:24,432:INFO:Creating metrics dataframe
2024-10-28 22:51:24,432:INFO:Initializing Gradient Boosting Classifier
2024-10-28 22:51:24,432:INFO:Total runtime is 0.18316150108973187 minutes
2024-10-28 22:51:24,432:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:24,432:INFO:Initializing create_model()
2024-10-28 22:51:24,432:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:24,432:INFO:Checking exceptions
2024-10-28 22:51:24,432:INFO:Importing libraries
2024-10-28 22:51:24,432:INFO:Copying training dataset
2024-10-28 22:51:24,440:INFO:Defining folds
2024-10-28 22:51:24,440:INFO:Declaring metric variables
2024-10-28 22:51:24,440:INFO:Importing untrained model
2024-10-28 22:51:24,440:INFO:Gradient Boosting Classifier Imported successfully
2024-10-28 22:51:24,440:INFO:Starting cross validation
2024-10-28 22:51:24,440:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:24,920:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,920:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,928:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,928:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,928:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,936:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,936:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,936:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,936:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,936:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,936:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,944:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,944:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,944:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,944:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,944:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,952:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,952:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,952:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,952:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,952:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,976:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:24,992:INFO:Calculating mean and std
2024-10-28 22:51:24,992:INFO:Creating metrics dataframe
2024-10-28 22:51:24,992:INFO:Uploading results into container
2024-10-28 22:51:24,992:INFO:Uploading model into container now
2024-10-28 22:51:24,992:INFO:_master_model_container: 10
2024-10-28 22:51:24,992:INFO:_display_container: 2
2024-10-28 22:51:24,992:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-28 22:51:24,992:INFO:create_model() successfully completed......................................
2024-10-28 22:51:25,072:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:25,072:INFO:Creating metrics dataframe
2024-10-28 22:51:25,072:INFO:Initializing Linear Discriminant Analysis
2024-10-28 22:51:25,072:INFO:Total runtime is 0.19383395115534466 minutes
2024-10-28 22:51:25,072:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:25,072:INFO:Initializing create_model()
2024-10-28 22:51:25,072:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:25,072:INFO:Checking exceptions
2024-10-28 22:51:25,072:INFO:Importing libraries
2024-10-28 22:51:25,072:INFO:Copying training dataset
2024-10-28 22:51:25,072:INFO:Defining folds
2024-10-28 22:51:25,072:INFO:Declaring metric variables
2024-10-28 22:51:25,072:INFO:Importing untrained model
2024-10-28 22:51:25,080:INFO:Linear Discriminant Analysis Imported successfully
2024-10-28 22:51:25,080:INFO:Starting cross validation
2024-10-28 22:51:25,080:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:25,128:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,128:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,136:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,136:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,136:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,136:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,136:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,152:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,160:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,160:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,160:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,160:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,167:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,168:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,168:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,168:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,184:INFO:Calculating mean and std
2024-10-28 22:51:25,184:INFO:Creating metrics dataframe
2024-10-28 22:51:25,184:INFO:Uploading results into container
2024-10-28 22:51:25,184:INFO:Uploading model into container now
2024-10-28 22:51:25,184:INFO:_master_model_container: 11
2024-10-28 22:51:25,184:INFO:_display_container: 2
2024-10-28 22:51:25,184:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-28 22:51:25,184:INFO:create_model() successfully completed......................................
2024-10-28 22:51:25,264:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:25,264:INFO:Creating metrics dataframe
2024-10-28 22:51:25,267:INFO:Initializing Extra Trees Classifier
2024-10-28 22:51:25,267:INFO:Total runtime is 0.1970794995625814 minutes
2024-10-28 22:51:25,267:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:25,267:INFO:Initializing create_model()
2024-10-28 22:51:25,267:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:25,267:INFO:Checking exceptions
2024-10-28 22:51:25,267:INFO:Importing libraries
2024-10-28 22:51:25,267:INFO:Copying training dataset
2024-10-28 22:51:25,267:INFO:Defining folds
2024-10-28 22:51:25,267:INFO:Declaring metric variables
2024-10-28 22:51:25,272:INFO:Importing untrained model
2024-10-28 22:51:25,272:INFO:Extra Trees Classifier Imported successfully
2024-10-28 22:51:25,272:INFO:Starting cross validation
2024-10-28 22:51:25,272:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:25,601:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,601:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,601:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,609:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,609:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,609:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,609:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,617:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,617:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,617:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,617:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,625:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,625:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,625:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,625:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,625:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,625:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:25,665:INFO:Calculating mean and std
2024-10-28 22:51:25,665:INFO:Creating metrics dataframe
2024-10-28 22:51:25,667:INFO:Uploading results into container
2024-10-28 22:51:25,667:INFO:Uploading model into container now
2024-10-28 22:51:25,667:INFO:_master_model_container: 12
2024-10-28 22:51:25,667:INFO:_display_container: 2
2024-10-28 22:51:25,667:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-28 22:51:25,667:INFO:create_model() successfully completed......................................
2024-10-28 22:51:25,745:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:25,745:INFO:Creating metrics dataframe
2024-10-28 22:51:25,745:INFO:Initializing Extreme Gradient Boosting
2024-10-28 22:51:25,745:INFO:Total runtime is 0.20504249731699625 minutes
2024-10-28 22:51:25,745:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:25,745:INFO:Initializing create_model()
2024-10-28 22:51:25,745:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:25,745:INFO:Checking exceptions
2024-10-28 22:51:25,745:INFO:Importing libraries
2024-10-28 22:51:25,745:INFO:Copying training dataset
2024-10-28 22:51:25,745:INFO:Defining folds
2024-10-28 22:51:25,745:INFO:Declaring metric variables
2024-10-28 22:51:25,745:INFO:Importing untrained model
2024-10-28 22:51:25,753:INFO:Extreme Gradient Boosting Imported successfully
2024-10-28 22:51:25,753:INFO:Starting cross validation
2024-10-28 22:51:25,753:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:28,035:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,035:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,051:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,051:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,051:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,051:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,075:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,075:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,075:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,091:INFO:Calculating mean and std
2024-10-28 22:51:28,091:INFO:Creating metrics dataframe
2024-10-28 22:51:28,091:INFO:Uploading results into container
2024-10-28 22:51:28,091:INFO:Uploading model into container now
2024-10-28 22:51:28,091:INFO:_master_model_container: 13
2024-10-28 22:51:28,091:INFO:_display_container: 2
2024-10-28 22:51:28,091:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-28 22:51:28,091:INFO:create_model() successfully completed......................................
2024-10-28 22:51:28,171:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:28,171:INFO:Creating metrics dataframe
2024-10-28 22:51:28,171:INFO:Initializing Light Gradient Boosting Machine
2024-10-28 22:51:28,171:INFO:Total runtime is 0.24548738400141398 minutes
2024-10-28 22:51:28,171:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:28,179:INFO:Initializing create_model()
2024-10-28 22:51:28,179:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:28,179:INFO:Checking exceptions
2024-10-28 22:51:28,179:INFO:Importing libraries
2024-10-28 22:51:28,179:INFO:Copying training dataset
2024-10-28 22:51:28,179:INFO:Defining folds
2024-10-28 22:51:28,179:INFO:Declaring metric variables
2024-10-28 22:51:28,179:INFO:Importing untrained model
2024-10-28 22:51:28,179:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-28 22:51:28,179:INFO:Starting cross validation
2024-10-28 22:51:28,179:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:28,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,932:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,956:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,956:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,964:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,969:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,972:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,980:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:28,996:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,004:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,012:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,020:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,028:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,036:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,092:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,108:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,108:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,108:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,116:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,116:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,116:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,124:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,132:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,156:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,169:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,172:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,172:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,180:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,196:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,212:INFO:Calculating mean and std
2024-10-28 22:51:29,212:INFO:Creating metrics dataframe
2024-10-28 22:51:29,212:INFO:Uploading results into container
2024-10-28 22:51:29,212:INFO:Uploading model into container now
2024-10-28 22:51:29,212:INFO:_master_model_container: 14
2024-10-28 22:51:29,212:INFO:_display_container: 2
2024-10-28 22:51:29,212:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-28 22:51:29,212:INFO:create_model() successfully completed......................................
2024-10-28 22:51:29,308:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:29,308:INFO:Creating metrics dataframe
2024-10-28 22:51:29,308:INFO:Initializing Dummy Classifier
2024-10-28 22:51:29,308:INFO:Total runtime is 0.2644279440244039 minutes
2024-10-28 22:51:29,308:INFO:SubProcess create_model() called ==================================
2024-10-28 22:51:29,308:INFO:Initializing create_model()
2024-10-28 22:51:29,308:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0E8427670>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:29,308:INFO:Checking exceptions
2024-10-28 22:51:29,308:INFO:Importing libraries
2024-10-28 22:51:29,308:INFO:Copying training dataset
2024-10-28 22:51:29,316:INFO:Defining folds
2024-10-28 22:51:29,316:INFO:Declaring metric variables
2024-10-28 22:51:29,316:INFO:Importing untrained model
2024-10-28 22:51:29,316:INFO:Dummy Classifier Imported successfully
2024-10-28 22:51:29,316:INFO:Starting cross validation
2024-10-28 22:51:29,316:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-28 22:51:29,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,369:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-28 22:51:29,404:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-28 22:51:29,428:INFO:Calculating mean and std
2024-10-28 22:51:29,428:INFO:Creating metrics dataframe
2024-10-28 22:51:29,428:INFO:Uploading results into container
2024-10-28 22:51:29,428:INFO:Uploading model into container now
2024-10-28 22:51:29,428:INFO:_master_model_container: 15
2024-10-28 22:51:29,428:INFO:_display_container: 2
2024-10-28 22:51:29,428:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-28 22:51:29,428:INFO:create_model() successfully completed......................................
2024-10-28 22:51:29,516:INFO:SubProcess create_model() end ==================================
2024-10-28 22:51:29,516:INFO:Creating metrics dataframe
2024-10-28 22:51:29,516:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-28 22:51:29,516:INFO:Initializing create_model()
2024-10-28 22:51:29,516:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:29,516:INFO:Checking exceptions
2024-10-28 22:51:29,516:INFO:Importing libraries
2024-10-28 22:51:29,516:INFO:Copying training dataset
2024-10-28 22:51:29,524:INFO:Defining folds
2024-10-28 22:51:29,524:INFO:Declaring metric variables
2024-10-28 22:51:29,524:INFO:Importing untrained model
2024-10-28 22:51:29,524:INFO:Declaring custom model
2024-10-28 22:51:29,524:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-28 22:51:29,524:INFO:Cross validation set to False
2024-10-28 22:51:29,524:INFO:Fitting Model
2024-10-28 22:51:29,532:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:29,532:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 22:51:29,532:INFO:create_model() successfully completed......................................
2024-10-28 22:51:29,636:INFO:_master_model_container: 15
2024-10-28 22:51:29,636:INFO:_display_container: 2
2024-10-28 22:51:29,636:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 22:51:29,636:INFO:compare_models() successfully completed......................................
2024-10-28 22:51:39,940:INFO:Initializing finalize_model()
2024-10-28 22:51:39,940:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-28 22:51:39,948:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-28 22:51:39,948:INFO:Initializing create_model()
2024-10-28 22:51:39,948:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-28 22:51:39,948:INFO:Checking exceptions
2024-10-28 22:51:39,948:INFO:Importing libraries
2024-10-28 22:51:39,948:INFO:Copying training dataset
2024-10-28 22:51:39,948:INFO:Defining folds
2024-10-28 22:51:39,948:INFO:Declaring metric variables
2024-10-28 22:51:39,948:INFO:Importing untrained model
2024-10-28 22:51:39,948:INFO:Declaring custom model
2024-10-28 22:51:39,948:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-28 22:51:39,948:INFO:Cross validation set to False
2024-10-28 22:51:39,948:INFO:Fitting Model
2024-10-28 22:51:39,964:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-28 22:51:39,972:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 22:51:39,972:INFO:create_model() successfully completed......................................
2024-10-28 22:51:40,044:INFO:_master_model_container: 15
2024-10-28 22:51:40,044:INFO:_display_container: 2
2024-10-28 22:51:40,044:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 22:51:40,044:INFO:finalize_model() successfully completed......................................
2024-10-28 22:51:41,405:INFO:Initializing evaluate_model()
2024-10-28 22:51:41,405:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-28 22:51:41,421:INFO:Initializing plot_model()
2024-10-28 22:51:41,421:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0A4234B50>, system=True)
2024-10-28 22:51:41,421:INFO:Checking exceptions
2024-10-28 22:51:41,421:INFO:Preloading libraries
2024-10-28 22:51:41,421:INFO:Copying training dataset
2024-10-28 22:51:41,421:INFO:Plot type: pipeline
2024-10-28 22:51:41,741:INFO:Visual Rendered Successfully
2024-10-28 22:51:41,821:INFO:plot_model() successfully completed......................................
2024-10-28 22:51:43,591:INFO:Initializing save_model()
2024-10-28 22:51:43,591:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-28 22:51:43,591:INFO:Adding model into prep_pipe
2024-10-28 22:51:43,591:WARNING:Only Model saved as it was a pipeline.
2024-10-28 22:51:43,599:INFO:best_emg_model.pkl saved in current working directory
2024-10-28 22:51:43,607:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-28 22:51:43,607:INFO:save_model() successfully completed......................................
2024-10-28 22:52:34,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:52:34,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:52:34,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:52:34,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:52:35,619:INFO:Initializing load_model()
2024-10-28 22:52:35,619:INFO:load_model(model_name=k_best, platform=None, authentication=None, verbose=True)
2024-10-28 22:53:12,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:12,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:12,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:12,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:13,952:INFO:Initializing load_model()
2024-10-28 22:53:13,952:INFO:load_model(model_name=k_best, platform=None, authentication=None, verbose=True)
2024-10-28 22:53:21,095:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:21,095:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:21,095:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:21,103:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-28 22:53:22,079:INFO:Initializing load_model()
2024-10-28 22:53:22,079:INFO:load_model(model_name=k_best, platform=None, authentication=None, verbose=True)
2024-10-29 08:59:48,185:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:48,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:48,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:48,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:49,081:INFO:Initializing load_model()
2024-10-29 08:59:49,081:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 08:59:49,120:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 08:59:57,077:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:57,077:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:57,077:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:57,077:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 08:59:58,048:INFO:Initializing load_model()
2024-10-29 08:59:58,048:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 08:59:58,071:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:01:37,798:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:01:37,798:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:01:37,798:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:01:37,799:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:01:38,679:INFO:Initializing load_model()
2024-10-29 09:01:38,679:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:01:38,702:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:15:43,974:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:15:43,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:15:43,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:15:43,975:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:15:44,876:INFO:Initializing load_model()
2024-10-29 09:15:44,876:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:15:44,899:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:24:28,816:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:24:28,816:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:24:28,816:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:24:28,816:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:24:30,038:INFO:Initializing load_model()
2024-10-29 09:24:30,038:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:24:30,060:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:26:47,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:47,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:47,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:47,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:49,077:INFO:Initializing load_model()
2024-10-29 09:26:49,077:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:26:49,101:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:26:55,904:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:55,904:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:55,904:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:55,904:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:26:57,152:INFO:Initializing load_model()
2024-10-29 09:26:57,152:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:26:57,184:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:27:08,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:08,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:08,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:08,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:09,355:INFO:Initializing load_model()
2024-10-29 09:27:09,355:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:27:09,387:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:27:49,791:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:49,791:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:49,791:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:49,791:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:27:50,943:INFO:Initializing load_model()
2024-10-29 09:27:50,943:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:27:50,967:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:28:48,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:28:48,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:28:48,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:28:48,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:28:50,075:INFO:Initializing load_model()
2024-10-29 09:28:50,075:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:28:50,108:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:29:46,097:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:29:46,097:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:29:46,097:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:29:46,097:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:29:47,329:INFO:Initializing load_model()
2024-10-29 09:29:47,329:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:29:47,354:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:31:18,209:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:31:18,209:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:31:18,209:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:31:18,209:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:31:19,408:INFO:Initializing load_model()
2024-10-29 09:31:19,408:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:31:19,435:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:32:46,644:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:46,644:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:46,644:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:46,644:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:47,895:INFO:Initializing load_model()
2024-10-29 09:32:47,895:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:32:47,934:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:32:54,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:54,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:54,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:54,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:32:55,332:INFO:Initializing load_model()
2024-10-29 09:32:55,332:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:32:55,357:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:34:56,005:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:34:56,005:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:34:56,005:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:34:56,005:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:34:57,159:INFO:Initializing load_model()
2024-10-29 09:34:57,159:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:34:57,186:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:50:55,778:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:50:55,778:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:50:55,778:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:50:55,778:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:50:56,929:INFO:Initializing load_model()
2024-10-29 09:50:56,929:INFO:load_model(model_name=k_best, platform=None, authentication=None, verbose=True)
2024-10-29 09:51:29,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:51:29,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:51:29,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:51:29,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:51:30,823:INFO:Initializing load_model()
2024-10-29 09:51:30,823:INFO:load_model(model_name=k_best, platform=None, authentication=None, verbose=True)
2024-10-29 09:52:23,135:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:52:23,135:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:52:23,135:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:52:23,135:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:52:24,278:INFO:Initializing load_model()
2024-10-29 09:52:24,278:INFO:load_model(model_name=k_best, platform=None, authentication=None, verbose=True)
2024-10-29 09:53:18,451:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:53:18,451:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:53:18,451:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:53:18,451:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:53:19,722:INFO:Initializing load_model()
2024-10-29 09:53:19,722:INFO:load_model(model_name=k_best, platform=None, authentication=None, verbose=True)
2024-10-29 09:54:59,862:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:54:59,862:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:54:59,862:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:54:59,862:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:55:01,092:INFO:Initializing load_model()
2024-10-29 09:55:01,092:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:55:01,116:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:58:07,106:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:07,115:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:07,115:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:07,115:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:08,441:INFO:Initializing load_model()
2024-10-29 09:58:08,441:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:58:08,489:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:58:52,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:52,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:52,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:52,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:58:53,254:INFO:Initializing load_model()
2024-10-29 09:58:53,254:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:58:53,284:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 09:59:00,397:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:59:00,397:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:59:00,397:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:59:00,397:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 09:59:01,647:INFO:Initializing load_model()
2024-10-29 09:59:01,647:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 09:59:01,677:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 10:02:55,198:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:02:55,198:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:02:55,198:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:02:55,198:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:02:56,390:INFO:Initializing load_model()
2024-10-29 10:02:56,390:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 10:02:56,432:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 10:05:45,023:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:45,023:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:45,023:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:45,023:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:46,089:INFO:Initializing load_model()
2024-10-29 10:05:46,089:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 10:05:46,114:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 10:05:53,029:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:53,029:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:53,029:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:53,029:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:05:54,067:INFO:Initializing load_model()
2024-10-29 10:05:54,067:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 10:05:54,091:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 10:06:00,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:06:00,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:06:00,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:06:00,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:06:01,235:INFO:Initializing load_model()
2024-10-29 10:06:01,235:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 10:06:01,261:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 10:16:10,808:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:16:10,808:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:16:10,808:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:16:10,808:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:17:10,550:INFO:PyCaret ClassificationExperiment
2024-10-29 10:17:10,550:INFO:Logging name: clf-default-name
2024-10-29 10:17:10,550:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-29 10:17:10,550:INFO:version 3.3.2
2024-10-29 10:17:10,550:INFO:Initializing setup()
2024-10-29 10:17:10,550:INFO:self.USI: 7cf1
2024-10-29 10:17:10,550:INFO:self._variable_keys: {'fold_groups_param', 'gpu_n_jobs_param', 'gpu_param', 'idx', 'log_plots_param', 'USI', 'fold_generator', 'y_train', 'fold_shuffle_param', 'target_param', 'exp_id', 'exp_name_log', 'logging_param', 'pipeline', 'X_test', '_ml_usecase', 'X', 'X_train', 'is_multiclass', 'html_param', 'memory', 'fix_imbalance', '_available_plots', 'seed', 'y', 'data', 'y_test', 'n_jobs_param'}
2024-10-29 10:17:10,550:INFO:Checking environment
2024-10-29 10:17:10,550:INFO:python_version: 3.10.14
2024-10-29 10:17:10,550:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-29 10:17:10,550:INFO:machine: AMD64
2024-10-29 10:17:10,550:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-29 10:17:10,550:INFO:Memory: svmem(total=16747851776, available=6560321536, percent=60.8, used=10187530240, free=6560321536)
2024-10-29 10:17:10,550:INFO:Physical Core: 8
2024-10-29 10:17:10,550:INFO:Logical Core: 16
2024-10-29 10:17:10,550:INFO:Checking libraries
2024-10-29 10:17:10,550:INFO:System:
2024-10-29 10:17:10,550:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-29 10:17:10,550:INFO:executable: c:\Users\Khambhati\anaconda3\envs\brainwave\python.exe
2024-10-29 10:17:10,550:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-29 10:17:10,550:INFO:PyCaret required dependencies:
2024-10-29 10:17:10,582:INFO:                 pip: 24.2
2024-10-29 10:17:10,582:INFO:          setuptools: 75.1.0
2024-10-29 10:17:10,582:INFO:             pycaret: 3.3.2
2024-10-29 10:17:10,582:INFO:             IPython: 8.29.0
2024-10-29 10:17:10,582:INFO:          ipywidgets: 8.1.5
2024-10-29 10:17:10,582:INFO:                tqdm: 4.66.6
2024-10-29 10:17:10,582:INFO:               numpy: 1.23.3
2024-10-29 10:17:10,582:INFO:              pandas: 2.1.4
2024-10-29 10:17:10,582:INFO:              jinja2: 3.1.4
2024-10-29 10:17:10,582:INFO:               scipy: 1.9.1
2024-10-29 10:17:10,582:INFO:              joblib: 1.3.2
2024-10-29 10:17:10,582:INFO:             sklearn: 1.4.2
2024-10-29 10:17:10,582:INFO:                pyod: 2.0.2
2024-10-29 10:17:10,582:INFO:            imblearn: 0.12.4
2024-10-29 10:17:10,582:INFO:   category_encoders: 2.6.4
2024-10-29 10:17:10,582:INFO:            lightgbm: 4.5.0
2024-10-29 10:17:10,582:INFO:               numba: 0.60.0
2024-10-29 10:17:10,582:INFO:            requests: 2.32.3
2024-10-29 10:17:10,582:INFO:          matplotlib: 3.7.5
2024-10-29 10:17:10,582:INFO:          scikitplot: 0.3.7
2024-10-29 10:17:10,582:INFO:         yellowbrick: 1.5
2024-10-29 10:17:10,582:INFO:              plotly: 5.24.1
2024-10-29 10:17:10,582:INFO:    plotly-resampler: Not installed
2024-10-29 10:17:10,582:INFO:             kaleido: 0.2.1
2024-10-29 10:17:10,582:INFO:           schemdraw: 0.15
2024-10-29 10:17:10,582:INFO:         statsmodels: 0.14.4
2024-10-29 10:17:10,582:INFO:              sktime: 0.26.0
2024-10-29 10:17:10,582:INFO:               tbats: 1.1.3
2024-10-29 10:17:10,582:INFO:            pmdarima: 2.0.4
2024-10-29 10:17:10,582:INFO:              psutil: 6.1.0
2024-10-29 10:17:10,582:INFO:          markupsafe: 2.1.5
2024-10-29 10:17:10,582:INFO:             pickle5: Not installed
2024-10-29 10:17:10,582:INFO:         cloudpickle: 3.1.0
2024-10-29 10:17:10,582:INFO:         deprecation: 2.1.0
2024-10-29 10:17:10,582:INFO:              xxhash: 3.5.0
2024-10-29 10:17:10,582:INFO:           wurlitzer: Not installed
2024-10-29 10:17:10,582:INFO:PyCaret optional dependencies:
2024-10-29 10:17:10,744:INFO:                shap: Not installed
2024-10-29 10:17:10,744:INFO:           interpret: Not installed
2024-10-29 10:17:10,744:INFO:                umap: Not installed
2024-10-29 10:17:10,744:INFO:     ydata_profiling: Not installed
2024-10-29 10:17:10,744:INFO:  explainerdashboard: Not installed
2024-10-29 10:17:10,744:INFO:             autoviz: Not installed
2024-10-29 10:17:10,744:INFO:           fairlearn: Not installed
2024-10-29 10:17:10,744:INFO:          deepchecks: Not installed
2024-10-29 10:17:10,752:INFO:             xgboost: 2.1.1
2024-10-29 10:17:10,752:INFO:            catboost: Not installed
2024-10-29 10:17:10,752:INFO:              kmodes: Not installed
2024-10-29 10:17:10,752:INFO:             mlxtend: Not installed
2024-10-29 10:17:10,752:INFO:       statsforecast: Not installed
2024-10-29 10:17:10,752:INFO:        tune_sklearn: Not installed
2024-10-29 10:17:10,752:INFO:                 ray: Not installed
2024-10-29 10:17:10,752:INFO:            hyperopt: Not installed
2024-10-29 10:17:10,752:INFO:              optuna: Not installed
2024-10-29 10:17:10,752:INFO:               skopt: Not installed
2024-10-29 10:17:10,752:INFO:              mlflow: Not installed
2024-10-29 10:17:10,752:INFO:              gradio: Not installed
2024-10-29 10:17:10,752:INFO:             fastapi: Not installed
2024-10-29 10:17:10,752:INFO:             uvicorn: Not installed
2024-10-29 10:17:10,752:INFO:              m2cgen: Not installed
2024-10-29 10:17:10,752:INFO:           evidently: Not installed
2024-10-29 10:17:10,752:INFO:               fugue: Not installed
2024-10-29 10:17:10,752:INFO:           streamlit: Not installed
2024-10-29 10:17:10,752:INFO:             prophet: Not installed
2024-10-29 10:17:10,752:INFO:None
2024-10-29 10:17:10,752:INFO:Set up data.
2024-10-29 10:17:10,761:INFO:Set up folding strategy.
2024-10-29 10:17:10,761:INFO:Set up train/test split.
2024-10-29 10:17:10,777:INFO:Set up index.
2024-10-29 10:17:10,777:INFO:Assigning column types.
2024-10-29 10:17:10,785:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-29 10:17:10,817:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 10:17:10,834:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 10:17:10,866:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:10,874:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:10,923:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 10:17:10,923:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 10:17:10,956:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:10,956:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:10,956:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-29 10:17:11,005:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 10:17:11,029:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:11,029:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:11,077:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 10:17:11,102:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:11,102:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:11,102:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-29 10:17:11,175:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:11,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:11,241:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:11,249:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:11,249:INFO:Preparing preprocessing pipeline...
2024-10-29 10:17:11,265:INFO:Set up label encoding.
2024-10-29 10:17:11,265:INFO:Set up simple imputation.
2024-10-29 10:17:11,306:INFO:Finished creating preprocessing pipeline.
2024-10-29 10:17:11,314:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-29 10:17:11,314:INFO:Creating final display dataframe.
2024-10-29 10:17:11,404:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (9448, 4)
5        Transformed data shape         (9448, 4)
6   Transformed train set shape         (6613, 4)
7    Transformed test set shape         (2835, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              7cf1
2024-10-29 10:17:11,486:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:11,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:11,575:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 10:17:11,575:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 10:17:11,575:INFO:setup() successfully completed in 1.05s...............
2024-10-29 10:17:13,929:INFO:Initializing compare_models()
2024-10-29 10:17:13,929:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-29 10:17:13,929:INFO:Checking exceptions
2024-10-29 10:17:13,937:INFO:Preparing display monitor
2024-10-29 10:17:13,985:INFO:Initializing Logistic Regression
2024-10-29 10:17:13,985:INFO:Total runtime is 0.0 minutes
2024-10-29 10:17:13,985:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:13,985:INFO:Initializing create_model()
2024-10-29 10:17:13,985:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:13,985:INFO:Checking exceptions
2024-10-29 10:17:13,985:INFO:Importing libraries
2024-10-29 10:17:13,985:INFO:Copying training dataset
2024-10-29 10:17:13,994:INFO:Defining folds
2024-10-29 10:17:13,994:INFO:Declaring metric variables
2024-10-29 10:17:13,994:INFO:Importing untrained model
2024-10-29 10:17:13,994:INFO:Logistic Regression Imported successfully
2024-10-29 10:17:13,994:INFO:Starting cross validation
2024-10-29 10:17:13,994:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:19,073:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,073:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,089:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,089:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,089:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,097:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,097:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,097:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,105:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,105:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,105:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,113:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,113:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,113:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,113:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,113:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,121:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,121:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,121:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,121:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,121:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,121:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,129:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,129:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,137:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,137:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,137:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,137:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,145:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,145:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,169:INFO:Calculating mean and std
2024-10-29 10:17:19,169:INFO:Creating metrics dataframe
2024-10-29 10:17:19,177:INFO:Uploading results into container
2024-10-29 10:17:19,177:INFO:Uploading model into container now
2024-10-29 10:17:19,177:INFO:_master_model_container: 1
2024-10-29 10:17:19,177:INFO:_display_container: 2
2024-10-29 10:17:19,177:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-29 10:17:19,177:INFO:create_model() successfully completed......................................
2024-10-29 10:17:19,297:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:19,297:INFO:Creating metrics dataframe
2024-10-29 10:17:19,297:INFO:Initializing K Neighbors Classifier
2024-10-29 10:17:19,297:INFO:Total runtime is 0.08852630853652954 minutes
2024-10-29 10:17:19,297:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:19,297:INFO:Initializing create_model()
2024-10-29 10:17:19,297:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:19,297:INFO:Checking exceptions
2024-10-29 10:17:19,297:INFO:Importing libraries
2024-10-29 10:17:19,297:INFO:Copying training dataset
2024-10-29 10:17:19,297:INFO:Defining folds
2024-10-29 10:17:19,297:INFO:Declaring metric variables
2024-10-29 10:17:19,297:INFO:Importing untrained model
2024-10-29 10:17:19,305:INFO:K Neighbors Classifier Imported successfully
2024-10-29 10:17:19,305:INFO:Starting cross validation
2024-10-29 10:17:19,305:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:19,468:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,468:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,468:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,468:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,476:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,476:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,476:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,476:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,484:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,484:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,492:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:19,492:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,899:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,907:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,915:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,931:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,931:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,931:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,936:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,939:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,939:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,939:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,955:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,955:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:22,988:INFO:Calculating mean and std
2024-10-29 10:17:22,988:INFO:Creating metrics dataframe
2024-10-29 10:17:22,988:INFO:Uploading results into container
2024-10-29 10:17:22,996:INFO:Uploading model into container now
2024-10-29 10:17:22,996:INFO:_master_model_container: 2
2024-10-29 10:17:22,996:INFO:_display_container: 2
2024-10-29 10:17:22,996:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-29 10:17:22,996:INFO:create_model() successfully completed......................................
2024-10-29 10:17:23,092:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:23,092:INFO:Creating metrics dataframe
2024-10-29 10:17:23,092:INFO:Initializing Naive Bayes
2024-10-29 10:17:23,092:INFO:Total runtime is 0.151790980497996 minutes
2024-10-29 10:17:23,092:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:23,092:INFO:Initializing create_model()
2024-10-29 10:17:23,092:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:23,092:INFO:Checking exceptions
2024-10-29 10:17:23,092:INFO:Importing libraries
2024-10-29 10:17:23,092:INFO:Copying training dataset
2024-10-29 10:17:23,100:INFO:Defining folds
2024-10-29 10:17:23,100:INFO:Declaring metric variables
2024-10-29 10:17:23,100:INFO:Importing untrained model
2024-10-29 10:17:23,100:INFO:Naive Bayes Imported successfully
2024-10-29 10:17:23,100:INFO:Starting cross validation
2024-10-29 10:17:23,100:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:23,157:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,162:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,162:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,165:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,168:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,168:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,168:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,168:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,173:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,182:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,222:INFO:Calculating mean and std
2024-10-29 10:17:23,222:INFO:Creating metrics dataframe
2024-10-29 10:17:23,222:INFO:Uploading results into container
2024-10-29 10:17:23,222:INFO:Uploading model into container now
2024-10-29 10:17:23,222:INFO:_master_model_container: 3
2024-10-29 10:17:23,222:INFO:_display_container: 2
2024-10-29 10:17:23,222:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-29 10:17:23,222:INFO:create_model() successfully completed......................................
2024-10-29 10:17:23,310:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:23,310:INFO:Creating metrics dataframe
2024-10-29 10:17:23,318:INFO:Initializing Decision Tree Classifier
2024-10-29 10:17:23,318:INFO:Total runtime is 0.15555303494135536 minutes
2024-10-29 10:17:23,318:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:23,318:INFO:Initializing create_model()
2024-10-29 10:17:23,318:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:23,318:INFO:Checking exceptions
2024-10-29 10:17:23,318:INFO:Importing libraries
2024-10-29 10:17:23,318:INFO:Copying training dataset
2024-10-29 10:17:23,318:INFO:Defining folds
2024-10-29 10:17:23,318:INFO:Declaring metric variables
2024-10-29 10:17:23,318:INFO:Importing untrained model
2024-10-29 10:17:23,318:INFO:Decision Tree Classifier Imported successfully
2024-10-29 10:17:23,318:INFO:Starting cross validation
2024-10-29 10:17:23,318:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:23,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,398:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,398:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,398:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,407:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,407:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,407:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,407:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,407:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,407:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,415:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,447:INFO:Calculating mean and std
2024-10-29 10:17:23,447:INFO:Creating metrics dataframe
2024-10-29 10:17:23,447:INFO:Uploading results into container
2024-10-29 10:17:23,447:INFO:Uploading model into container now
2024-10-29 10:17:23,447:INFO:_master_model_container: 4
2024-10-29 10:17:23,447:INFO:_display_container: 2
2024-10-29 10:17:23,447:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-29 10:17:23,447:INFO:create_model() successfully completed......................................
2024-10-29 10:17:23,536:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:23,536:INFO:Creating metrics dataframe
2024-10-29 10:17:23,536:INFO:Initializing SVM - Linear Kernel
2024-10-29 10:17:23,536:INFO:Total runtime is 0.1591828147570292 minutes
2024-10-29 10:17:23,536:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:23,536:INFO:Initializing create_model()
2024-10-29 10:17:23,536:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:23,536:INFO:Checking exceptions
2024-10-29 10:17:23,536:INFO:Importing libraries
2024-10-29 10:17:23,536:INFO:Copying training dataset
2024-10-29 10:17:23,536:INFO:Defining folds
2024-10-29 10:17:23,536:INFO:Declaring metric variables
2024-10-29 10:17:23,536:INFO:Importing untrained model
2024-10-29 10:17:23,544:INFO:SVM - Linear Kernel Imported successfully
2024-10-29 10:17:23,544:INFO:Starting cross validation
2024-10-29 10:17:23,544:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:23,642:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,642:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,650:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,658:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,658:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,658:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,658:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,658:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,658:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,666:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,666:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,666:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,666:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,666:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,674:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,682:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,682:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,690:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,714:INFO:Calculating mean and std
2024-10-29 10:17:23,714:INFO:Creating metrics dataframe
2024-10-29 10:17:23,714:INFO:Uploading results into container
2024-10-29 10:17:23,714:INFO:Uploading model into container now
2024-10-29 10:17:23,714:INFO:_master_model_container: 5
2024-10-29 10:17:23,714:INFO:_display_container: 2
2024-10-29 10:17:23,714:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-29 10:17:23,714:INFO:create_model() successfully completed......................................
2024-10-29 10:17:23,803:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:23,803:INFO:Creating metrics dataframe
2024-10-29 10:17:23,811:INFO:Initializing Ridge Classifier
2024-10-29 10:17:23,811:INFO:Total runtime is 0.16376450459162392 minutes
2024-10-29 10:17:23,811:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:23,811:INFO:Initializing create_model()
2024-10-29 10:17:23,811:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:23,811:INFO:Checking exceptions
2024-10-29 10:17:23,811:INFO:Importing libraries
2024-10-29 10:17:23,811:INFO:Copying training dataset
2024-10-29 10:17:23,823:INFO:Defining folds
2024-10-29 10:17:23,823:INFO:Declaring metric variables
2024-10-29 10:17:23,823:INFO:Importing untrained model
2024-10-29 10:17:23,823:INFO:Ridge Classifier Imported successfully
2024-10-29 10:17:23,823:INFO:Starting cross validation
2024-10-29 10:17:23,823:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:23,902:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,902:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,902:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,916:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,916:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,924:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,932:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:23,948:INFO:Calculating mean and std
2024-10-29 10:17:23,948:INFO:Creating metrics dataframe
2024-10-29 10:17:23,948:INFO:Uploading results into container
2024-10-29 10:17:23,948:INFO:Uploading model into container now
2024-10-29 10:17:23,948:INFO:_master_model_container: 6
2024-10-29 10:17:23,948:INFO:_display_container: 2
2024-10-29 10:17:23,948:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-29 10:17:23,948:INFO:create_model() successfully completed......................................
2024-10-29 10:17:24,038:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:24,038:INFO:Creating metrics dataframe
2024-10-29 10:17:24,038:INFO:Initializing Random Forest Classifier
2024-10-29 10:17:24,038:INFO:Total runtime is 0.16754264434178667 minutes
2024-10-29 10:17:24,038:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:24,038:INFO:Initializing create_model()
2024-10-29 10:17:24,038:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:24,038:INFO:Checking exceptions
2024-10-29 10:17:24,038:INFO:Importing libraries
2024-10-29 10:17:24,038:INFO:Copying training dataset
2024-10-29 10:17:24,045:INFO:Defining folds
2024-10-29 10:17:24,045:INFO:Declaring metric variables
2024-10-29 10:17:24,045:INFO:Importing untrained model
2024-10-29 10:17:24,045:INFO:Random Forest Classifier Imported successfully
2024-10-29 10:17:24,045:INFO:Starting cross validation
2024-10-29 10:17:24,045:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:24,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,571:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,571:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,571:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,571:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,571:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,571:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,587:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,587:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,587:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,611:INFO:Calculating mean and std
2024-10-29 10:17:24,611:INFO:Creating metrics dataframe
2024-10-29 10:17:24,611:INFO:Uploading results into container
2024-10-29 10:17:24,611:INFO:Uploading model into container now
2024-10-29 10:17:24,611:INFO:_master_model_container: 7
2024-10-29 10:17:24,611:INFO:_display_container: 2
2024-10-29 10:17:24,611:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-29 10:17:24,611:INFO:create_model() successfully completed......................................
2024-10-29 10:17:24,691:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:24,691:INFO:Creating metrics dataframe
2024-10-29 10:17:24,699:INFO:Initializing Quadratic Discriminant Analysis
2024-10-29 10:17:24,699:INFO:Total runtime is 0.1785640676816304 minutes
2024-10-29 10:17:24,699:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:24,699:INFO:Initializing create_model()
2024-10-29 10:17:24,699:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:24,699:INFO:Checking exceptions
2024-10-29 10:17:24,699:INFO:Importing libraries
2024-10-29 10:17:24,699:INFO:Copying training dataset
2024-10-29 10:17:24,699:INFO:Defining folds
2024-10-29 10:17:24,699:INFO:Declaring metric variables
2024-10-29 10:17:24,699:INFO:Importing untrained model
2024-10-29 10:17:24,699:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 10:17:24,699:INFO:Starting cross validation
2024-10-29 10:17:24,699:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:24,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,803:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,803:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,803:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,803:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,803:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,803:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:24,835:INFO:Calculating mean and std
2024-10-29 10:17:24,835:INFO:Creating metrics dataframe
2024-10-29 10:17:24,835:INFO:Uploading results into container
2024-10-29 10:17:24,835:INFO:Uploading model into container now
2024-10-29 10:17:24,835:INFO:_master_model_container: 8
2024-10-29 10:17:24,835:INFO:_display_container: 2
2024-10-29 10:17:24,835:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 10:17:24,835:INFO:create_model() successfully completed......................................
2024-10-29 10:17:24,915:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:24,915:INFO:Creating metrics dataframe
2024-10-29 10:17:24,923:INFO:Initializing Ada Boost Classifier
2024-10-29 10:17:24,923:INFO:Total runtime is 0.1823072512944539 minutes
2024-10-29 10:17:24,923:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:24,923:INFO:Initializing create_model()
2024-10-29 10:17:24,923:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:24,923:INFO:Checking exceptions
2024-10-29 10:17:24,923:INFO:Importing libraries
2024-10-29 10:17:24,923:INFO:Copying training dataset
2024-10-29 10:17:24,923:INFO:Defining folds
2024-10-29 10:17:24,923:INFO:Declaring metric variables
2024-10-29 10:17:24,923:INFO:Importing untrained model
2024-10-29 10:17:24,923:INFO:Ada Boost Classifier Imported successfully
2024-10-29 10:17:24,923:INFO:Starting cross validation
2024-10-29 10:17:24,931:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:24,964:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,964:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,964:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,972:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,973:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,973:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,973:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,973:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,973:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:24,973:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 10:17:25,278:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,278:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,278:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,286:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,286:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,286:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,286:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,286:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,302:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,302:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,302:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,302:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,310:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,310:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,310:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,310:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,310:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,310:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,318:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,318:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,318:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,318:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,326:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:25,342:INFO:Calculating mean and std
2024-10-29 10:17:25,342:INFO:Creating metrics dataframe
2024-10-29 10:17:25,342:INFO:Uploading results into container
2024-10-29 10:17:25,342:INFO:Uploading model into container now
2024-10-29 10:17:25,342:INFO:_master_model_container: 9
2024-10-29 10:17:25,342:INFO:_display_container: 2
2024-10-29 10:17:25,342:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-29 10:17:25,342:INFO:create_model() successfully completed......................................
2024-10-29 10:17:25,431:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:25,431:INFO:Creating metrics dataframe
2024-10-29 10:17:25,431:INFO:Initializing Gradient Boosting Classifier
2024-10-29 10:17:25,431:INFO:Total runtime is 0.19076129992802934 minutes
2024-10-29 10:17:25,431:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:25,431:INFO:Initializing create_model()
2024-10-29 10:17:25,431:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:25,431:INFO:Checking exceptions
2024-10-29 10:17:25,431:INFO:Importing libraries
2024-10-29 10:17:25,431:INFO:Copying training dataset
2024-10-29 10:17:25,439:INFO:Defining folds
2024-10-29 10:17:25,439:INFO:Declaring metric variables
2024-10-29 10:17:25,439:INFO:Importing untrained model
2024-10-29 10:17:25,439:INFO:Gradient Boosting Classifier Imported successfully
2024-10-29 10:17:25,439:INFO:Starting cross validation
2024-10-29 10:17:25,439:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:26,040:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,048:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,048:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,048:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,056:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,056:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,056:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,056:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,056:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,072:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,072:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,072:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,072:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,072:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,080:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,080:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,080:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,088:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,088:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,112:INFO:Calculating mean and std
2024-10-29 10:17:26,112:INFO:Creating metrics dataframe
2024-10-29 10:17:26,112:INFO:Uploading results into container
2024-10-29 10:17:26,112:INFO:Uploading model into container now
2024-10-29 10:17:26,112:INFO:_master_model_container: 10
2024-10-29 10:17:26,112:INFO:_display_container: 2
2024-10-29 10:17:26,112:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-29 10:17:26,112:INFO:create_model() successfully completed......................................
2024-10-29 10:17:26,192:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:26,192:INFO:Creating metrics dataframe
2024-10-29 10:17:26,200:INFO:Initializing Linear Discriminant Analysis
2024-10-29 10:17:26,200:INFO:Total runtime is 0.20358738501866655 minutes
2024-10-29 10:17:26,200:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:26,200:INFO:Initializing create_model()
2024-10-29 10:17:26,200:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:26,200:INFO:Checking exceptions
2024-10-29 10:17:26,200:INFO:Importing libraries
2024-10-29 10:17:26,200:INFO:Copying training dataset
2024-10-29 10:17:26,200:INFO:Defining folds
2024-10-29 10:17:26,200:INFO:Declaring metric variables
2024-10-29 10:17:26,200:INFO:Importing untrained model
2024-10-29 10:17:26,200:INFO:Linear Discriminant Analysis Imported successfully
2024-10-29 10:17:26,200:INFO:Starting cross validation
2024-10-29 10:17:26,200:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:26,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,288:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,312:INFO:Calculating mean and std
2024-10-29 10:17:26,312:INFO:Creating metrics dataframe
2024-10-29 10:17:26,312:INFO:Uploading results into container
2024-10-29 10:17:26,312:INFO:Uploading model into container now
2024-10-29 10:17:26,312:INFO:_master_model_container: 11
2024-10-29 10:17:26,312:INFO:_display_container: 2
2024-10-29 10:17:26,312:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-29 10:17:26,312:INFO:create_model() successfully completed......................................
2024-10-29 10:17:26,392:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:26,392:INFO:Creating metrics dataframe
2024-10-29 10:17:26,400:INFO:Initializing Extra Trees Classifier
2024-10-29 10:17:26,400:INFO:Total runtime is 0.20692420005798337 minutes
2024-10-29 10:17:26,400:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:26,400:INFO:Initializing create_model()
2024-10-29 10:17:26,400:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:26,400:INFO:Checking exceptions
2024-10-29 10:17:26,400:INFO:Importing libraries
2024-10-29 10:17:26,400:INFO:Copying training dataset
2024-10-29 10:17:26,400:INFO:Defining folds
2024-10-29 10:17:26,400:INFO:Declaring metric variables
2024-10-29 10:17:26,400:INFO:Importing untrained model
2024-10-29 10:17:26,400:INFO:Extra Trees Classifier Imported successfully
2024-10-29 10:17:26,400:INFO:Starting cross validation
2024-10-29 10:17:26,400:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:26,739:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,739:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,747:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,747:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,755:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,764:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,764:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,764:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,764:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,764:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,764:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,764:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,811:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,819:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,827:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:26,843:INFO:Calculating mean and std
2024-10-29 10:17:26,843:INFO:Creating metrics dataframe
2024-10-29 10:17:26,843:INFO:Uploading results into container
2024-10-29 10:17:26,843:INFO:Uploading model into container now
2024-10-29 10:17:26,843:INFO:_master_model_container: 12
2024-10-29 10:17:26,843:INFO:_display_container: 2
2024-10-29 10:17:26,843:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-29 10:17:26,843:INFO:create_model() successfully completed......................................
2024-10-29 10:17:26,924:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:26,924:INFO:Creating metrics dataframe
2024-10-29 10:17:26,924:INFO:Initializing Extreme Gradient Boosting
2024-10-29 10:17:26,924:INFO:Total runtime is 0.21564745903015134 minutes
2024-10-29 10:17:26,924:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:26,924:INFO:Initializing create_model()
2024-10-29 10:17:26,924:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:26,924:INFO:Checking exceptions
2024-10-29 10:17:26,924:INFO:Importing libraries
2024-10-29 10:17:26,924:INFO:Copying training dataset
2024-10-29 10:17:26,932:INFO:Defining folds
2024-10-29 10:17:26,932:INFO:Declaring metric variables
2024-10-29 10:17:26,932:INFO:Importing untrained model
2024-10-29 10:17:26,932:INFO:Extreme Gradient Boosting Imported successfully
2024-10-29 10:17:26,932:INFO:Starting cross validation
2024-10-29 10:17:26,932:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:29,139:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,147:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,147:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,155:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,155:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,155:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,155:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,163:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,163:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,163:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,163:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,171:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,171:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,171:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,171:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,171:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,171:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,187:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,187:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,187:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,187:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,187:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,195:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,197:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,235:INFO:Calculating mean and std
2024-10-29 10:17:29,235:INFO:Creating metrics dataframe
2024-10-29 10:17:29,235:INFO:Uploading results into container
2024-10-29 10:17:29,235:INFO:Uploading model into container now
2024-10-29 10:17:29,235:INFO:_master_model_container: 13
2024-10-29 10:17:29,235:INFO:_display_container: 2
2024-10-29 10:17:29,235:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-29 10:17:29,235:INFO:create_model() successfully completed......................................
2024-10-29 10:17:29,315:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:29,323:INFO:Creating metrics dataframe
2024-10-29 10:17:29,323:INFO:Initializing Light Gradient Boosting Machine
2024-10-29 10:17:29,323:INFO:Total runtime is 0.25563132365544633 minutes
2024-10-29 10:17:29,323:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:29,323:INFO:Initializing create_model()
2024-10-29 10:17:29,323:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:29,323:INFO:Checking exceptions
2024-10-29 10:17:29,323:INFO:Importing libraries
2024-10-29 10:17:29,323:INFO:Copying training dataset
2024-10-29 10:17:29,331:INFO:Defining folds
2024-10-29 10:17:29,331:INFO:Declaring metric variables
2024-10-29 10:17:29,331:INFO:Importing untrained model
2024-10-29 10:17:29,331:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-29 10:17:29,331:INFO:Starting cross validation
2024-10-29 10:17:29,331:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:29,897:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,913:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,921:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:29,994:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,002:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,016:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,068:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,076:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,076:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,084:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,084:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,100:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,125:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,141:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,149:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,149:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,165:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,173:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,246:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,254:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,262:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,262:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,270:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,286:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,286:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,302:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,302:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,310:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,326:INFO:Calculating mean and std
2024-10-29 10:17:30,326:INFO:Creating metrics dataframe
2024-10-29 10:17:30,331:INFO:Uploading results into container
2024-10-29 10:17:30,331:INFO:Uploading model into container now
2024-10-29 10:17:30,331:INFO:_master_model_container: 14
2024-10-29 10:17:30,331:INFO:_display_container: 2
2024-10-29 10:17:30,331:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-29 10:17:30,331:INFO:create_model() successfully completed......................................
2024-10-29 10:17:30,431:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:30,431:INFO:Creating metrics dataframe
2024-10-29 10:17:30,431:INFO:Initializing Dummy Classifier
2024-10-29 10:17:30,431:INFO:Total runtime is 0.2741057197252909 minutes
2024-10-29 10:17:30,431:INFO:SubProcess create_model() called ==================================
2024-10-29 10:17:30,431:INFO:Initializing create_model()
2024-10-29 10:17:30,431:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021CCFC81E40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:30,431:INFO:Checking exceptions
2024-10-29 10:17:30,431:INFO:Importing libraries
2024-10-29 10:17:30,431:INFO:Copying training dataset
2024-10-29 10:17:30,439:INFO:Defining folds
2024-10-29 10:17:30,439:INFO:Declaring metric variables
2024-10-29 10:17:30,439:INFO:Importing untrained model
2024-10-29 10:17:30,439:INFO:Dummy Classifier Imported successfully
2024-10-29 10:17:30,439:INFO:Starting cross validation
2024-10-29 10:17:30,439:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 10:17:30,488:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,488:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,496:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,496:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,496:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,496:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,496:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,504:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,504:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,504:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,512:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,524:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,524:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,524:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,524:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,524:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 10:17:30,524:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,530:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 10:17:30,552:INFO:Calculating mean and std
2024-10-29 10:17:30,552:INFO:Creating metrics dataframe
2024-10-29 10:17:30,552:INFO:Uploading results into container
2024-10-29 10:17:30,552:INFO:Uploading model into container now
2024-10-29 10:17:30,552:INFO:_master_model_container: 15
2024-10-29 10:17:30,552:INFO:_display_container: 2
2024-10-29 10:17:30,552:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-29 10:17:30,552:INFO:create_model() successfully completed......................................
2024-10-29 10:17:30,657:INFO:SubProcess create_model() end ==================================
2024-10-29 10:17:30,657:INFO:Creating metrics dataframe
2024-10-29 10:17:30,657:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-29 10:17:30,666:INFO:Initializing create_model()
2024-10-29 10:17:30,666:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:30,666:INFO:Checking exceptions
2024-10-29 10:17:30,666:INFO:Importing libraries
2024-10-29 10:17:30,666:INFO:Copying training dataset
2024-10-29 10:17:30,666:INFO:Defining folds
2024-10-29 10:17:30,666:INFO:Declaring metric variables
2024-10-29 10:17:30,666:INFO:Importing untrained model
2024-10-29 10:17:30,666:INFO:Declaring custom model
2024-10-29 10:17:30,666:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 10:17:30,666:INFO:Cross validation set to False
2024-10-29 10:17:30,666:INFO:Fitting Model
2024-10-29 10:17:30,682:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:30,682:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 10:17:30,682:INFO:create_model() successfully completed......................................
2024-10-29 10:17:30,781:INFO:_master_model_container: 15
2024-10-29 10:17:30,781:INFO:_display_container: 2
2024-10-29 10:17:30,781:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 10:17:30,781:INFO:compare_models() successfully completed......................................
2024-10-29 10:17:44,157:INFO:Initializing finalize_model()
2024-10-29 10:17:44,157:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-29 10:17:44,157:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 10:17:44,162:INFO:Initializing create_model()
2024-10-29 10:17:44,162:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 10:17:44,162:INFO:Checking exceptions
2024-10-29 10:17:44,164:INFO:Importing libraries
2024-10-29 10:17:44,165:INFO:Copying training dataset
2024-10-29 10:17:44,165:INFO:Defining folds
2024-10-29 10:17:44,165:INFO:Declaring metric variables
2024-10-29 10:17:44,166:INFO:Importing untrained model
2024-10-29 10:17:44,166:INFO:Declaring custom model
2024-10-29 10:17:44,166:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 10:17:44,166:INFO:Cross validation set to False
2024-10-29 10:17:44,166:INFO:Fitting Model
2024-10-29 10:17:44,177:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 10:17:44,184:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 10:17:44,184:INFO:create_model() successfully completed......................................
2024-10-29 10:17:44,261:INFO:_master_model_container: 15
2024-10-29 10:17:44,261:INFO:_display_container: 2
2024-10-29 10:17:44,270:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 10:17:44,270:INFO:finalize_model() successfully completed......................................
2024-10-29 10:17:46,148:INFO:Initializing evaluate_model()
2024-10-29 10:17:46,148:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-29 10:17:46,171:INFO:Initializing plot_model()
2024-10-29 10:17:46,171:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, system=True)
2024-10-29 10:17:46,171:INFO:Checking exceptions
2024-10-29 10:17:46,179:INFO:Preloading libraries
2024-10-29 10:17:46,179:INFO:Copying training dataset
2024-10-29 10:17:46,179:INFO:Plot type: pipeline
2024-10-29 10:17:46,397:INFO:Visual Rendered Successfully
2024-10-29 10:17:46,478:INFO:plot_model() successfully completed......................................
2024-10-29 10:17:53,506:INFO:Initializing plot_model()
2024-10-29 10:17:53,506:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021CCFCAF5B0>, system=True)
2024-10-29 10:17:53,507:INFO:Checking exceptions
2024-10-29 10:17:53,509:INFO:Preloading libraries
2024-10-29 10:17:53,509:INFO:Copying training dataset
2024-10-29 10:17:53,509:INFO:Plot type: confusion_matrix
2024-10-29 10:17:53,571:INFO:Fitting Model
2024-10-29 10:17:53,586:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-29 10:17:53,587:INFO:Scoring test/hold-out set
2024-10-29 10:17:53,685:INFO:Visual Rendered Successfully
2024-10-29 10:17:53,783:INFO:plot_model() successfully completed......................................
2024-10-29 10:18:01,704:INFO:Initializing save_model()
2024-10-29 10:18:01,708:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-29 10:18:01,708:INFO:Adding model into prep_pipe
2024-10-29 10:18:01,708:WARNING:Only Model saved as it was a pipeline.
2024-10-29 10:18:01,712:INFO:best_emg_model.pkl saved in current working directory
2024-10-29 10:18:01,715:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 10:18:01,715:INFO:save_model() successfully completed......................................
2024-10-29 10:18:53,391:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:18:53,391:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:18:53,391:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:18:53,391:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:18:54,648:INFO:Initializing load_model()
2024-10-29 10:18:54,648:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 10:18:54,694:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 10:42:40,384:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:42:40,384:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:42:40,384:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:42:40,384:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 10:42:41,927:INFO:Initializing load_model()
2024-10-29 10:42:41,927:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 10:42:41,960:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.5', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.3', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.0.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
  warnings.warn(

2024-10-29 12:50:32,756:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:50:32,757:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:50:32,757:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:50:32,757:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:50:33,487:INFO:PyCaret ClassificationExperiment
2024-10-29 12:50:33,487:INFO:Logging name: clf-default-name
2024-10-29 12:50:33,487:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-29 12:50:33,487:INFO:version 3.3.2
2024-10-29 12:50:33,488:INFO:Initializing setup()
2024-10-29 12:50:33,488:INFO:self.USI: 91bc
2024-10-29 12:50:33,488:INFO:self._variable_keys: {'memory', 'data', 'log_plots_param', 'exp_id', '_available_plots', 'USI', 'gpu_param', 'logging_param', 'fold_groups_param', 'X', 'seed', 'exp_name_log', 'n_jobs_param', 'is_multiclass', 'idx', 'target_param', '_ml_usecase', 'y_train', 'y', 'pipeline', 'html_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'y_test', 'X_train', 'fold_generator', 'X_test'}
2024-10-29 12:50:33,488:INFO:Checking environment
2024-10-29 12:50:33,488:INFO:python_version: 3.10.14
2024-10-29 12:50:33,488:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-29 12:50:33,488:INFO:machine: AMD64
2024-10-29 12:50:33,488:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-29 12:50:33,492:INFO:Memory: svmem(total=16747851776, available=4268363776, percent=74.5, used=12479488000, free=4268363776)
2024-10-29 12:50:33,492:INFO:Physical Core: 8
2024-10-29 12:50:33,492:INFO:Logical Core: 16
2024-10-29 12:50:33,492:INFO:Checking libraries
2024-10-29 12:50:33,492:INFO:System:
2024-10-29 12:50:33,492:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-29 12:50:33,492:INFO:executable: c:\Users\Khambhati\anaconda3\envs\brainwave\python.exe
2024-10-29 12:50:33,492:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-29 12:50:33,492:INFO:PyCaret required dependencies:
2024-10-29 12:50:33,525:INFO:                 pip: 24.2
2024-10-29 12:50:33,525:INFO:          setuptools: 75.1.0
2024-10-29 12:50:33,525:INFO:             pycaret: 3.3.2
2024-10-29 12:50:33,525:INFO:             IPython: 8.29.0
2024-10-29 12:50:33,525:INFO:          ipywidgets: 8.1.5
2024-10-29 12:50:33,525:INFO:                tqdm: 4.66.6
2024-10-29 12:50:33,525:INFO:               numpy: 1.23.3
2024-10-29 12:50:33,525:INFO:              pandas: 2.1.4
2024-10-29 12:50:33,525:INFO:              jinja2: 3.1.4
2024-10-29 12:50:33,525:INFO:               scipy: 1.9.1
2024-10-29 12:50:33,525:INFO:              joblib: 1.3.2
2024-10-29 12:50:33,525:INFO:             sklearn: 1.4.2
2024-10-29 12:50:33,525:INFO:                pyod: 2.0.2
2024-10-29 12:50:33,525:INFO:            imblearn: 0.12.4
2024-10-29 12:50:33,525:INFO:   category_encoders: 2.6.4
2024-10-29 12:50:33,526:INFO:            lightgbm: 4.5.0
2024-10-29 12:50:33,526:INFO:               numba: 0.60.0
2024-10-29 12:50:33,526:INFO:            requests: 2.32.3
2024-10-29 12:50:33,526:INFO:          matplotlib: 3.7.5
2024-10-29 12:50:33,526:INFO:          scikitplot: 0.3.7
2024-10-29 12:50:33,526:INFO:         yellowbrick: 1.5
2024-10-29 12:50:33,526:INFO:              plotly: 5.24.1
2024-10-29 12:50:33,526:INFO:    plotly-resampler: Not installed
2024-10-29 12:50:33,526:INFO:             kaleido: 0.2.1
2024-10-29 12:50:33,526:INFO:           schemdraw: 0.15
2024-10-29 12:50:33,526:INFO:         statsmodels: 0.14.4
2024-10-29 12:50:33,526:INFO:              sktime: 0.26.0
2024-10-29 12:50:33,526:INFO:               tbats: 1.1.3
2024-10-29 12:50:33,526:INFO:            pmdarima: 2.0.4
2024-10-29 12:50:33,526:INFO:              psutil: 6.1.0
2024-10-29 12:50:33,526:INFO:          markupsafe: 2.1.5
2024-10-29 12:50:33,526:INFO:             pickle5: Not installed
2024-10-29 12:50:33,526:INFO:         cloudpickle: 3.1.0
2024-10-29 12:50:33,526:INFO:         deprecation: 2.1.0
2024-10-29 12:50:33,526:INFO:              xxhash: 3.5.0
2024-10-29 12:50:33,526:INFO:           wurlitzer: Not installed
2024-10-29 12:50:33,526:INFO:PyCaret optional dependencies:
2024-10-29 12:50:33,668:INFO:                shap: Not installed
2024-10-29 12:50:33,668:INFO:           interpret: Not installed
2024-10-29 12:50:33,668:INFO:                umap: Not installed
2024-10-29 12:50:33,668:INFO:     ydata_profiling: Not installed
2024-10-29 12:50:33,668:INFO:  explainerdashboard: Not installed
2024-10-29 12:50:33,668:INFO:             autoviz: Not installed
2024-10-29 12:50:33,668:INFO:           fairlearn: Not installed
2024-10-29 12:50:33,668:INFO:          deepchecks: Not installed
2024-10-29 12:50:33,668:INFO:             xgboost: 2.1.1
2024-10-29 12:50:33,668:INFO:            catboost: Not installed
2024-10-29 12:50:33,668:INFO:              kmodes: Not installed
2024-10-29 12:50:33,668:INFO:             mlxtend: Not installed
2024-10-29 12:50:33,669:INFO:       statsforecast: Not installed
2024-10-29 12:50:33,669:INFO:        tune_sklearn: Not installed
2024-10-29 12:50:33,669:INFO:                 ray: Not installed
2024-10-29 12:50:33,669:INFO:            hyperopt: Not installed
2024-10-29 12:50:33,669:INFO:              optuna: Not installed
2024-10-29 12:50:33,669:INFO:               skopt: Not installed
2024-10-29 12:50:33,669:INFO:              mlflow: Not installed
2024-10-29 12:50:33,669:INFO:              gradio: Not installed
2024-10-29 12:50:33,669:INFO:             fastapi: Not installed
2024-10-29 12:50:33,669:INFO:             uvicorn: Not installed
2024-10-29 12:50:33,669:INFO:              m2cgen: Not installed
2024-10-29 12:50:33,669:INFO:           evidently: Not installed
2024-10-29 12:50:33,669:INFO:               fugue: Not installed
2024-10-29 12:50:33,669:INFO:           streamlit: Not installed
2024-10-29 12:50:33,669:INFO:             prophet: Not installed
2024-10-29 12:50:33,669:INFO:None
2024-10-29 12:50:33,669:INFO:Set up data.
2024-10-29 12:50:33,683:INFO:Set up folding strategy.
2024-10-29 12:50:33,683:INFO:Set up train/test split.
2024-10-29 12:50:33,696:INFO:Set up index.
2024-10-29 12:50:33,697:INFO:Assigning column types.
2024-10-29 12:50:33,700:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-29 12:50:33,753:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 12:50:33,760:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 12:50:33,805:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:33,808:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:33,862:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 12:50:33,863:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 12:50:33,896:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:33,900:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:33,901:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-29 12:50:33,956:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 12:50:33,988:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:33,991:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:34,044:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 12:50:34,078:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:34,081:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:34,081:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-29 12:50:34,168:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:34,170:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:34,253:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:34,255:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:34,258:INFO:Preparing preprocessing pipeline...
2024-10-29 12:50:34,261:INFO:Set up label encoding.
2024-10-29 12:50:34,261:INFO:Set up simple imputation.
2024-10-29 12:50:34,297:INFO:Finished creating preprocessing pipeline.
2024-10-29 12:50:34,301:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-29 12:50:34,301:INFO:Creating final display dataframe.
2024-10-29 12:50:34,375:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (6790, 4)
5        Transformed data shape         (6790, 4)
6   Transformed train set shape         (4753, 4)
7    Transformed test set shape         (2037, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              91bc
2024-10-29 12:50:34,464:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:34,467:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:34,551:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 12:50:34,554:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 12:50:34,556:INFO:setup() successfully completed in 1.08s...............
2024-10-29 12:50:36,903:INFO:Initializing compare_models()
2024-10-29 12:50:36,904:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-29 12:50:36,904:INFO:Checking exceptions
2024-10-29 12:50:36,908:INFO:Preparing display monitor
2024-10-29 12:50:36,914:INFO:Initializing Logistic Regression
2024-10-29 12:50:36,914:INFO:Total runtime is 0.0 minutes
2024-10-29 12:50:36,914:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:36,915:INFO:Initializing create_model()
2024-10-29 12:50:36,915:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:36,915:INFO:Checking exceptions
2024-10-29 12:50:36,915:INFO:Importing libraries
2024-10-29 12:50:36,915:INFO:Copying training dataset
2024-10-29 12:50:36,919:INFO:Defining folds
2024-10-29 12:50:36,919:INFO:Declaring metric variables
2024-10-29 12:50:36,919:INFO:Importing untrained model
2024-10-29 12:50:36,920:INFO:Logistic Regression Imported successfully
2024-10-29 12:50:36,920:INFO:Starting cross validation
2024-10-29 12:50:36,922:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:41,045:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,050:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,054:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,055:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,064:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,234:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,241:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,256:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,269:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,292:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,294:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,299:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,301:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,307:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,308:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,312:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,313:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,314:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,317:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,319:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,320:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,322:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,324:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,325:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,326:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,331:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,337:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,351:INFO:Calculating mean and std
2024-10-29 12:50:41,354:INFO:Creating metrics dataframe
2024-10-29 12:50:41,357:INFO:Uploading results into container
2024-10-29 12:50:41,358:INFO:Uploading model into container now
2024-10-29 12:50:41,359:INFO:_master_model_container: 1
2024-10-29 12:50:41,360:INFO:_display_container: 2
2024-10-29 12:50:41,360:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-29 12:50:41,360:INFO:create_model() successfully completed......................................
2024-10-29 12:50:41,439:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:41,440:INFO:Creating metrics dataframe
2024-10-29 12:50:41,442:INFO:Initializing K Neighbors Classifier
2024-10-29 12:50:41,442:INFO:Total runtime is 0.07547574440638224 minutes
2024-10-29 12:50:41,442:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:41,443:INFO:Initializing create_model()
2024-10-29 12:50:41,443:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:41,443:INFO:Checking exceptions
2024-10-29 12:50:41,443:INFO:Importing libraries
2024-10-29 12:50:41,443:INFO:Copying training dataset
2024-10-29 12:50:41,446:INFO:Defining folds
2024-10-29 12:50:41,446:INFO:Declaring metric variables
2024-10-29 12:50:41,446:INFO:Importing untrained model
2024-10-29 12:50:41,446:INFO:K Neighbors Classifier Imported successfully
2024-10-29 12:50:41,446:INFO:Starting cross validation
2024-10-29 12:50:41,447:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:41,580:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,580:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,580:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,580:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,586:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,586:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,587:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,588:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,591:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,594:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,594:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:41,595:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,169:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,169:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,169:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,173:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,174:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,174:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,177:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,177:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,177:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,185:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,185:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,186:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,189:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,192:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,192:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,194:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,199:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,224:INFO:Calculating mean and std
2024-10-29 12:50:44,226:INFO:Creating metrics dataframe
2024-10-29 12:50:44,228:INFO:Uploading results into container
2024-10-29 12:50:44,229:INFO:Uploading model into container now
2024-10-29 12:50:44,230:INFO:_master_model_container: 2
2024-10-29 12:50:44,230:INFO:_display_container: 2
2024-10-29 12:50:44,231:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-29 12:50:44,231:INFO:create_model() successfully completed......................................
2024-10-29 12:50:44,306:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:44,306:INFO:Creating metrics dataframe
2024-10-29 12:50:44,309:INFO:Initializing Naive Bayes
2024-10-29 12:50:44,309:INFO:Total runtime is 0.12325169245402018 minutes
2024-10-29 12:50:44,309:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:44,309:INFO:Initializing create_model()
2024-10-29 12:50:44,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:44,309:INFO:Checking exceptions
2024-10-29 12:50:44,309:INFO:Importing libraries
2024-10-29 12:50:44,309:INFO:Copying training dataset
2024-10-29 12:50:44,312:INFO:Defining folds
2024-10-29 12:50:44,312:INFO:Declaring metric variables
2024-10-29 12:50:44,312:INFO:Importing untrained model
2024-10-29 12:50:44,313:INFO:Naive Bayes Imported successfully
2024-10-29 12:50:44,313:INFO:Starting cross validation
2024-10-29 12:50:44,313:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:44,352:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,356:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,357:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,357:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,359:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,362:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,366:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,369:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,369:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,369:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,369:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,370:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,370:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,374:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,375:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,376:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,378:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,378:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,378:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,383:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,385:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,395:INFO:Calculating mean and std
2024-10-29 12:50:44,396:INFO:Creating metrics dataframe
2024-10-29 12:50:44,398:INFO:Uploading results into container
2024-10-29 12:50:44,398:INFO:Uploading model into container now
2024-10-29 12:50:44,399:INFO:_master_model_container: 3
2024-10-29 12:50:44,399:INFO:_display_container: 2
2024-10-29 12:50:44,399:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-29 12:50:44,399:INFO:create_model() successfully completed......................................
2024-10-29 12:50:44,462:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:44,462:INFO:Creating metrics dataframe
2024-10-29 12:50:44,464:INFO:Initializing Decision Tree Classifier
2024-10-29 12:50:44,464:INFO:Total runtime is 0.1258272926012675 minutes
2024-10-29 12:50:44,464:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:44,464:INFO:Initializing create_model()
2024-10-29 12:50:44,464:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:44,465:INFO:Checking exceptions
2024-10-29 12:50:44,465:INFO:Importing libraries
2024-10-29 12:50:44,465:INFO:Copying training dataset
2024-10-29 12:50:44,467:INFO:Defining folds
2024-10-29 12:50:44,467:INFO:Declaring metric variables
2024-10-29 12:50:44,467:INFO:Importing untrained model
2024-10-29 12:50:44,467:INFO:Decision Tree Classifier Imported successfully
2024-10-29 12:50:44,468:INFO:Starting cross validation
2024-10-29 12:50:44,468:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:44,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,515:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,515:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,515:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,515:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,516:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,516:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,520:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,521:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,522:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,522:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,523:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,523:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,523:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,523:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,525:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,525:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,526:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,526:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,528:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,528:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,528:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,530:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,530:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,531:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,532:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,532:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,539:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,552:INFO:Calculating mean and std
2024-10-29 12:50:44,554:INFO:Creating metrics dataframe
2024-10-29 12:50:44,555:INFO:Uploading results into container
2024-10-29 12:50:44,556:INFO:Uploading model into container now
2024-10-29 12:50:44,556:INFO:_master_model_container: 4
2024-10-29 12:50:44,556:INFO:_display_container: 2
2024-10-29 12:50:44,557:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-29 12:50:44,557:INFO:create_model() successfully completed......................................
2024-10-29 12:50:44,621:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:44,621:INFO:Creating metrics dataframe
2024-10-29 12:50:44,623:INFO:Initializing SVM - Linear Kernel
2024-10-29 12:50:44,623:INFO:Total runtime is 0.12848383982976277 minutes
2024-10-29 12:50:44,623:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:44,623:INFO:Initializing create_model()
2024-10-29 12:50:44,623:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:44,623:INFO:Checking exceptions
2024-10-29 12:50:44,623:INFO:Importing libraries
2024-10-29 12:50:44,623:INFO:Copying training dataset
2024-10-29 12:50:44,626:INFO:Defining folds
2024-10-29 12:50:44,626:INFO:Declaring metric variables
2024-10-29 12:50:44,626:INFO:Importing untrained model
2024-10-29 12:50:44,627:INFO:SVM - Linear Kernel Imported successfully
2024-10-29 12:50:44,627:INFO:Starting cross validation
2024-10-29 12:50:44,628:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:44,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,680:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,684:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,684:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,685:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,685:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,686:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,689:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,689:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,690:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,690:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,691:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,692:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,692:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,692:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,694:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,696:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:44,696:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:44,696:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,697:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,697:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,699:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:44,699:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,700:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,700:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,701:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,702:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,702:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,704:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,706:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,725:INFO:Calculating mean and std
2024-10-29 12:50:44,726:INFO:Creating metrics dataframe
2024-10-29 12:50:44,727:INFO:Uploading results into container
2024-10-29 12:50:44,728:INFO:Uploading model into container now
2024-10-29 12:50:44,729:INFO:_master_model_container: 5
2024-10-29 12:50:44,729:INFO:_display_container: 2
2024-10-29 12:50:44,729:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-29 12:50:44,729:INFO:create_model() successfully completed......................................
2024-10-29 12:50:44,796:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:44,796:INFO:Creating metrics dataframe
2024-10-29 12:50:44,799:INFO:Initializing Ridge Classifier
2024-10-29 12:50:44,799:INFO:Total runtime is 0.13141195774078368 minutes
2024-10-29 12:50:44,799:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:44,799:INFO:Initializing create_model()
2024-10-29 12:50:44,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:44,799:INFO:Checking exceptions
2024-10-29 12:50:44,799:INFO:Importing libraries
2024-10-29 12:50:44,799:INFO:Copying training dataset
2024-10-29 12:50:44,802:INFO:Defining folds
2024-10-29 12:50:44,802:INFO:Declaring metric variables
2024-10-29 12:50:44,802:INFO:Importing untrained model
2024-10-29 12:50:44,803:INFO:Ridge Classifier Imported successfully
2024-10-29 12:50:44,803:INFO:Starting cross validation
2024-10-29 12:50:44,803:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:44,845:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,847:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,848:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,850:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,850:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,851:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,851:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,853:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,854:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,854:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,854:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,856:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,856:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,860:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,860:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,861:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,861:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,863:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,864:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,865:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,865:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,866:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,866:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,869:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,872:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:44,896:INFO:Calculating mean and std
2024-10-29 12:50:44,897:INFO:Creating metrics dataframe
2024-10-29 12:50:44,899:INFO:Uploading results into container
2024-10-29 12:50:44,900:INFO:Uploading model into container now
2024-10-29 12:50:44,900:INFO:_master_model_container: 6
2024-10-29 12:50:44,901:INFO:_display_container: 2
2024-10-29 12:50:44,901:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-29 12:50:44,901:INFO:create_model() successfully completed......................................
2024-10-29 12:50:44,964:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:44,964:INFO:Creating metrics dataframe
2024-10-29 12:50:44,967:INFO:Initializing Random Forest Classifier
2024-10-29 12:50:44,967:INFO:Total runtime is 0.1342183232307434 minutes
2024-10-29 12:50:44,967:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:44,968:INFO:Initializing create_model()
2024-10-29 12:50:44,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:44,968:INFO:Checking exceptions
2024-10-29 12:50:44,968:INFO:Importing libraries
2024-10-29 12:50:44,968:INFO:Copying training dataset
2024-10-29 12:50:44,970:INFO:Defining folds
2024-10-29 12:50:44,970:INFO:Declaring metric variables
2024-10-29 12:50:44,971:INFO:Importing untrained model
2024-10-29 12:50:44,971:INFO:Random Forest Classifier Imported successfully
2024-10-29 12:50:44,971:INFO:Starting cross validation
2024-10-29 12:50:44,972:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:45,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,404:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,411:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,411:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,416:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,416:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,416:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,416:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,416:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,423:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,423:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,423:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,423:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,424:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,428:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,429:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,430:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,431:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,431:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,431:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,436:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,438:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,442:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,442:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,443:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,456:INFO:Calculating mean and std
2024-10-29 12:50:45,457:INFO:Creating metrics dataframe
2024-10-29 12:50:45,459:INFO:Uploading results into container
2024-10-29 12:50:45,459:INFO:Uploading model into container now
2024-10-29 12:50:45,460:INFO:_master_model_container: 7
2024-10-29 12:50:45,460:INFO:_display_container: 2
2024-10-29 12:50:45,460:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-29 12:50:45,460:INFO:create_model() successfully completed......................................
2024-10-29 12:50:45,521:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:45,521:INFO:Creating metrics dataframe
2024-10-29 12:50:45,523:INFO:Initializing Quadratic Discriminant Analysis
2024-10-29 12:50:45,524:INFO:Total runtime is 0.14349711338678994 minutes
2024-10-29 12:50:45,524:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:45,524:INFO:Initializing create_model()
2024-10-29 12:50:45,524:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:45,524:INFO:Checking exceptions
2024-10-29 12:50:45,524:INFO:Importing libraries
2024-10-29 12:50:45,524:INFO:Copying training dataset
2024-10-29 12:50:45,527:INFO:Defining folds
2024-10-29 12:50:45,527:INFO:Declaring metric variables
2024-10-29 12:50:45,527:INFO:Importing untrained model
2024-10-29 12:50:45,527:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 12:50:45,527:INFO:Starting cross validation
2024-10-29 12:50:45,528:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:45,565:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,565:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,565:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,565:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,566:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,566:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,567:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,567:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,568:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,568:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:45,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,579:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,580:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,581:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,582:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,582:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,583:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,583:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,584:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,585:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,586:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,586:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,586:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,586:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,587:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,587:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,589:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,590:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,590:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,591:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,592:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,592:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,593:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,593:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,593:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,594:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,594:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,596:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,597:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,599:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,612:INFO:Calculating mean and std
2024-10-29 12:50:45,614:INFO:Creating metrics dataframe
2024-10-29 12:50:45,616:INFO:Uploading results into container
2024-10-29 12:50:45,616:INFO:Uploading model into container now
2024-10-29 12:50:45,616:INFO:_master_model_container: 8
2024-10-29 12:50:45,616:INFO:_display_container: 2
2024-10-29 12:50:45,617:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 12:50:45,617:INFO:create_model() successfully completed......................................
2024-10-29 12:50:45,677:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:45,677:INFO:Creating metrics dataframe
2024-10-29 12:50:45,681:INFO:Initializing Ada Boost Classifier
2024-10-29 12:50:45,681:INFO:Total runtime is 0.14611463546752929 minutes
2024-10-29 12:50:45,681:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:45,681:INFO:Initializing create_model()
2024-10-29 12:50:45,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:45,681:INFO:Checking exceptions
2024-10-29 12:50:45,681:INFO:Importing libraries
2024-10-29 12:50:45,681:INFO:Copying training dataset
2024-10-29 12:50:45,684:INFO:Defining folds
2024-10-29 12:50:45,684:INFO:Declaring metric variables
2024-10-29 12:50:45,684:INFO:Importing untrained model
2024-10-29 12:50:45,684:INFO:Ada Boost Classifier Imported successfully
2024-10-29 12:50:45,684:INFO:Starting cross validation
2024-10-29 12:50:45,685:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:45,708:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,709:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,709:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,713:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,714:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,715:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,717:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,717:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,718:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 12:50:45,954:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,959:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,962:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,965:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,969:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,969:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,970:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,972:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,972:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,974:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,974:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,974:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,976:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,976:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,977:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,979:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,979:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,979:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,981:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,981:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,984:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,985:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,986:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:45,994:INFO:Calculating mean and std
2024-10-29 12:50:45,995:INFO:Creating metrics dataframe
2024-10-29 12:50:45,997:INFO:Uploading results into container
2024-10-29 12:50:45,998:INFO:Uploading model into container now
2024-10-29 12:50:45,998:INFO:_master_model_container: 9
2024-10-29 12:50:45,998:INFO:_display_container: 2
2024-10-29 12:50:45,998:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-29 12:50:45,998:INFO:create_model() successfully completed......................................
2024-10-29 12:50:46,059:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:46,059:INFO:Creating metrics dataframe
2024-10-29 12:50:46,062:INFO:Initializing Gradient Boosting Classifier
2024-10-29 12:50:46,062:INFO:Total runtime is 0.1524742841720581 minutes
2024-10-29 12:50:46,062:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:46,062:INFO:Initializing create_model()
2024-10-29 12:50:46,062:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:46,062:INFO:Checking exceptions
2024-10-29 12:50:46,062:INFO:Importing libraries
2024-10-29 12:50:46,062:INFO:Copying training dataset
2024-10-29 12:50:46,065:INFO:Defining folds
2024-10-29 12:50:46,065:INFO:Declaring metric variables
2024-10-29 12:50:46,065:INFO:Importing untrained model
2024-10-29 12:50:46,065:INFO:Gradient Boosting Classifier Imported successfully
2024-10-29 12:50:46,065:INFO:Starting cross validation
2024-10-29 12:50:46,066:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:46,602:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,605:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,607:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,610:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,612:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,615:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,615:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,617:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,617:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,617:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,621:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,623:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,623:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,624:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,624:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,626:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,627:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,628:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,628:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,628:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,629:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,632:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,632:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,634:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,634:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,636:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,637:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,638:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,642:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,655:INFO:Calculating mean and std
2024-10-29 12:50:46,656:INFO:Creating metrics dataframe
2024-10-29 12:50:46,658:INFO:Uploading results into container
2024-10-29 12:50:46,658:INFO:Uploading model into container now
2024-10-29 12:50:46,659:INFO:_master_model_container: 10
2024-10-29 12:50:46,659:INFO:_display_container: 2
2024-10-29 12:50:46,659:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-29 12:50:46,659:INFO:create_model() successfully completed......................................
2024-10-29 12:50:46,720:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:46,720:INFO:Creating metrics dataframe
2024-10-29 12:50:46,722:INFO:Initializing Linear Discriminant Analysis
2024-10-29 12:50:46,723:INFO:Total runtime is 0.1634694735209147 minutes
2024-10-29 12:50:46,723:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:46,723:INFO:Initializing create_model()
2024-10-29 12:50:46,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:46,723:INFO:Checking exceptions
2024-10-29 12:50:46,723:INFO:Importing libraries
2024-10-29 12:50:46,723:INFO:Copying training dataset
2024-10-29 12:50:46,725:INFO:Defining folds
2024-10-29 12:50:46,725:INFO:Declaring metric variables
2024-10-29 12:50:46,726:INFO:Importing untrained model
2024-10-29 12:50:46,726:INFO:Linear Discriminant Analysis Imported successfully
2024-10-29 12:50:46,726:INFO:Starting cross validation
2024-10-29 12:50:46,726:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:46,770:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,772:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,772:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,773:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,773:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,775:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,775:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,775:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,776:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,777:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,777:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,777:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,778:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,780:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,782:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,782:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,782:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,782:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,784:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,784:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,790:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,791:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:46,809:INFO:Calculating mean and std
2024-10-29 12:50:46,810:INFO:Creating metrics dataframe
2024-10-29 12:50:46,812:INFO:Uploading results into container
2024-10-29 12:50:46,812:INFO:Uploading model into container now
2024-10-29 12:50:46,813:INFO:_master_model_container: 11
2024-10-29 12:50:46,813:INFO:_display_container: 2
2024-10-29 12:50:46,813:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-29 12:50:46,813:INFO:create_model() successfully completed......................................
2024-10-29 12:50:46,877:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:46,877:INFO:Creating metrics dataframe
2024-10-29 12:50:46,879:INFO:Initializing Extra Trees Classifier
2024-10-29 12:50:46,879:INFO:Total runtime is 0.16608982880910236 minutes
2024-10-29 12:50:46,879:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:46,879:INFO:Initializing create_model()
2024-10-29 12:50:46,879:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:46,879:INFO:Checking exceptions
2024-10-29 12:50:46,879:INFO:Importing libraries
2024-10-29 12:50:46,879:INFO:Copying training dataset
2024-10-29 12:50:46,882:INFO:Defining folds
2024-10-29 12:50:46,882:INFO:Declaring metric variables
2024-10-29 12:50:46,882:INFO:Importing untrained model
2024-10-29 12:50:46,882:INFO:Extra Trees Classifier Imported successfully
2024-10-29 12:50:46,883:INFO:Starting cross validation
2024-10-29 12:50:46,883:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:47,143:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,144:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,150:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,151:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,157:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,158:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,173:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,174:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,178:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,181:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,183:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,189:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,189:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,190:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,191:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,194:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,195:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,195:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,195:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,196:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,196:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,199:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,200:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,200:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,200:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,200:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,201:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:47,214:INFO:Calculating mean and std
2024-10-29 12:50:47,215:INFO:Creating metrics dataframe
2024-10-29 12:50:47,217:INFO:Uploading results into container
2024-10-29 12:50:47,217:INFO:Uploading model into container now
2024-10-29 12:50:47,218:INFO:_master_model_container: 12
2024-10-29 12:50:47,218:INFO:_display_container: 2
2024-10-29 12:50:47,218:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-29 12:50:47,218:INFO:create_model() successfully completed......................................
2024-10-29 12:50:47,276:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:47,277:INFO:Creating metrics dataframe
2024-10-29 12:50:47,280:INFO:Initializing Extreme Gradient Boosting
2024-10-29 12:50:47,281:INFO:Total runtime is 0.172784682114919 minutes
2024-10-29 12:50:47,281:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:47,281:INFO:Initializing create_model()
2024-10-29 12:50:47,281:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:47,281:INFO:Checking exceptions
2024-10-29 12:50:47,281:INFO:Importing libraries
2024-10-29 12:50:47,281:INFO:Copying training dataset
2024-10-29 12:50:47,284:INFO:Defining folds
2024-10-29 12:50:47,284:INFO:Declaring metric variables
2024-10-29 12:50:47,284:INFO:Importing untrained model
2024-10-29 12:50:47,284:INFO:Extreme Gradient Boosting Imported successfully
2024-10-29 12:50:47,285:INFO:Starting cross validation
2024-10-29 12:50:47,285:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:48,116:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,117:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,118:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,119:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,122:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,122:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,123:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,124:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,124:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,124:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,125:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,126:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,127:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,129:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,129:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,129:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,129:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,130:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,130:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,131:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,131:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,132:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,132:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,136:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,137:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,137:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,138:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,139:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,141:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,142:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,151:INFO:Calculating mean and std
2024-10-29 12:50:48,152:INFO:Creating metrics dataframe
2024-10-29 12:50:48,154:INFO:Uploading results into container
2024-10-29 12:50:48,154:INFO:Uploading model into container now
2024-10-29 12:50:48,154:INFO:_master_model_container: 13
2024-10-29 12:50:48,154:INFO:_display_container: 2
2024-10-29 12:50:48,155:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-29 12:50:48,155:INFO:create_model() successfully completed......................................
2024-10-29 12:50:48,214:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:48,215:INFO:Creating metrics dataframe
2024-10-29 12:50:48,217:INFO:Initializing Light Gradient Boosting Machine
2024-10-29 12:50:48,217:INFO:Total runtime is 0.188384477297465 minutes
2024-10-29 12:50:48,217:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:48,217:INFO:Initializing create_model()
2024-10-29 12:50:48,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:48,217:INFO:Checking exceptions
2024-10-29 12:50:48,217:INFO:Importing libraries
2024-10-29 12:50:48,217:INFO:Copying training dataset
2024-10-29 12:50:48,220:INFO:Defining folds
2024-10-29 12:50:48,220:INFO:Declaring metric variables
2024-10-29 12:50:48,220:INFO:Importing untrained model
2024-10-29 12:50:48,220:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-29 12:50:48,221:INFO:Starting cross validation
2024-10-29 12:50:48,221:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:48,870:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,878:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,884:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,886:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,891:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,896:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,898:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,904:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,911:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,958:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,965:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:48,971:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,007:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,014:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,014:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,021:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,021:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,022:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,028:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,035:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,054:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,062:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,066:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,068:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,073:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,076:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,079:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,083:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,097:INFO:Calculating mean and std
2024-10-29 12:50:49,099:INFO:Creating metrics dataframe
2024-10-29 12:50:49,102:INFO:Uploading results into container
2024-10-29 12:50:49,102:INFO:Uploading model into container now
2024-10-29 12:50:49,103:INFO:_master_model_container: 14
2024-10-29 12:50:49,103:INFO:_display_container: 2
2024-10-29 12:50:49,103:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-29 12:50:49,103:INFO:create_model() successfully completed......................................
2024-10-29 12:50:49,174:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:49,174:INFO:Creating metrics dataframe
2024-10-29 12:50:49,177:INFO:Initializing Dummy Classifier
2024-10-29 12:50:49,177:INFO:Total runtime is 0.20437739690144854 minutes
2024-10-29 12:50:49,177:INFO:SubProcess create_model() called ==================================
2024-10-29 12:50:49,177:INFO:Initializing create_model()
2024-10-29 12:50:49,177:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266AE0FFFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:49,177:INFO:Checking exceptions
2024-10-29 12:50:49,177:INFO:Importing libraries
2024-10-29 12:50:49,177:INFO:Copying training dataset
2024-10-29 12:50:49,180:INFO:Defining folds
2024-10-29 12:50:49,180:INFO:Declaring metric variables
2024-10-29 12:50:49,180:INFO:Importing untrained model
2024-10-29 12:50:49,181:INFO:Dummy Classifier Imported successfully
2024-10-29 12:50:49,181:INFO:Starting cross validation
2024-10-29 12:50:49,181:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 12:50:49,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,217:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,217:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,219:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,219:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,220:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,221:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,223:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,223:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,223:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,223:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,224:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,225:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,226:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,226:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,226:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,227:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,227:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,227:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,229:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,229:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,230:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,230:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,230:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,230:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,231:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,231:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,231:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,232:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,232:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,233:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,234:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,234:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,235:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,236:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,237:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,240:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 12:50:49,243:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 12:50:49,253:INFO:Calculating mean and std
2024-10-29 12:50:49,254:INFO:Creating metrics dataframe
2024-10-29 12:50:49,257:INFO:Uploading results into container
2024-10-29 12:50:49,257:INFO:Uploading model into container now
2024-10-29 12:50:49,258:INFO:_master_model_container: 15
2024-10-29 12:50:49,258:INFO:_display_container: 2
2024-10-29 12:50:49,258:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-29 12:50:49,259:INFO:create_model() successfully completed......................................
2024-10-29 12:50:49,325:INFO:SubProcess create_model() end ==================================
2024-10-29 12:50:49,326:INFO:Creating metrics dataframe
2024-10-29 12:50:49,330:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-29 12:50:49,331:INFO:Initializing create_model()
2024-10-29 12:50:49,331:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:49,331:INFO:Checking exceptions
2024-10-29 12:50:49,332:INFO:Importing libraries
2024-10-29 12:50:49,332:INFO:Copying training dataset
2024-10-29 12:50:49,335:INFO:Defining folds
2024-10-29 12:50:49,335:INFO:Declaring metric variables
2024-10-29 12:50:49,335:INFO:Importing untrained model
2024-10-29 12:50:49,335:INFO:Declaring custom model
2024-10-29 12:50:49,335:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 12:50:49,336:INFO:Cross validation set to False
2024-10-29 12:50:49,336:INFO:Fitting Model
2024-10-29 12:50:49,344:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:49,345:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 12:50:49,345:INFO:create_model() successfully completed......................................
2024-10-29 12:50:49,426:INFO:_master_model_container: 15
2024-10-29 12:50:49,427:INFO:_display_container: 2
2024-10-29 12:50:49,427:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 12:50:49,427:INFO:compare_models() successfully completed......................................
2024-10-29 12:50:54,007:INFO:Initializing finalize_model()
2024-10-29 12:50:54,007:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-29 12:50:54,007:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 12:50:54,009:INFO:Initializing create_model()
2024-10-29 12:50:54,009:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 12:50:54,010:INFO:Checking exceptions
2024-10-29 12:50:54,010:INFO:Importing libraries
2024-10-29 12:50:54,010:INFO:Copying training dataset
2024-10-29 12:50:54,011:INFO:Defining folds
2024-10-29 12:50:54,011:INFO:Declaring metric variables
2024-10-29 12:50:54,011:INFO:Importing untrained model
2024-10-29 12:50:54,011:INFO:Declaring custom model
2024-10-29 12:50:54,012:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 12:50:54,012:INFO:Cross validation set to False
2024-10-29 12:50:54,013:INFO:Fitting Model
2024-10-29 12:50:54,021:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 12:50:54,026:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 12:50:54,026:INFO:create_model() successfully completed......................................
2024-10-29 12:50:54,091:INFO:_master_model_container: 15
2024-10-29 12:50:54,091:INFO:_display_container: 2
2024-10-29 12:50:54,095:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 12:50:54,095:INFO:finalize_model() successfully completed......................................
2024-10-29 12:50:55,578:INFO:Initializing evaluate_model()
2024-10-29 12:50:55,578:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-29 12:50:55,595:INFO:Initializing plot_model()
2024-10-29 12:50:55,596:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266CD6DB9D0>, system=True)
2024-10-29 12:50:55,596:INFO:Checking exceptions
2024-10-29 12:50:55,598:INFO:Preloading libraries
2024-10-29 12:50:55,598:INFO:Copying training dataset
2024-10-29 12:50:55,598:INFO:Plot type: pipeline
2024-10-29 12:50:55,768:INFO:Visual Rendered Successfully
2024-10-29 12:50:55,829:INFO:plot_model() successfully completed......................................
2024-10-29 12:51:44,252:INFO:Initializing save_model()
2024-10-29 12:51:44,252:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=best_emg_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-29 12:51:44,252:INFO:Adding model into prep_pipe
2024-10-29 12:51:44,252:WARNING:Only Model saved as it was a pipeline.
2024-10-29 12:51:44,256:INFO:best_emg_model.pkl saved in current working directory
2024-10-29 12:51:44,263:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 12:51:44,263:INFO:save_model() successfully completed......................................
2024-10-29 12:52:38,057:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:52:38,057:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:52:38,057:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:52:38,057:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:52:38,864:INFO:Initializing load_model()
2024-10-29 12:52:38,864:INFO:load_model(model_name=bestzj, platform=None, authentication=None, verbose=True)
2024-10-29 12:53:05,469:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:05,470:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:05,470:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:05,470:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:06,363:INFO:Initializing load_model()
2024-10-29 12:53:06,363:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 12:53:10,008:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:10,008:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:10,008:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:10,008:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:11,030:INFO:Initializing load_model()
2024-10-29 12:53:11,030:INFO:load_model(model_name=best, platform=None, authentication=None, verbose=True)
2024-10-29 12:53:28,468:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:28,468:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:28,468:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:28,468:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 12:53:29,416:INFO:Initializing load_model()
2024-10-29 12:53:29,416:INFO:load_model(model_name=bestzj, platform=None, authentication=None, verbose=True)
2024-10-29 13:16:21,992:INFO:PyCaret ClassificationExperiment
2024-10-29 13:16:21,993:INFO:Logging name: clf-default-name
2024-10-29 13:16:21,993:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-29 13:16:21,993:INFO:version 3.3.2
2024-10-29 13:16:21,993:INFO:Initializing setup()
2024-10-29 13:16:21,993:INFO:self.USI: 32d4
2024-10-29 13:16:21,993:INFO:self._variable_keys: {'memory', 'data', 'log_plots_param', 'exp_id', '_available_plots', 'USI', 'gpu_param', 'logging_param', 'fold_groups_param', 'X', 'seed', 'exp_name_log', 'n_jobs_param', 'is_multiclass', 'idx', 'target_param', '_ml_usecase', 'y_train', 'y', 'pipeline', 'html_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'y_test', 'X_train', 'fold_generator', 'X_test'}
2024-10-29 13:16:21,993:INFO:Checking environment
2024-10-29 13:16:21,993:INFO:python_version: 3.10.14
2024-10-29 13:16:21,993:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-29 13:16:21,993:INFO:machine: AMD64
2024-10-29 13:16:21,993:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-29 13:16:21,997:INFO:Memory: svmem(total=16747851776, available=5066952704, percent=69.7, used=11680899072, free=5066952704)
2024-10-29 13:16:21,997:INFO:Physical Core: 8
2024-10-29 13:16:21,997:INFO:Logical Core: 16
2024-10-29 13:16:21,997:INFO:Checking libraries
2024-10-29 13:16:21,997:INFO:System:
2024-10-29 13:16:21,997:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-29 13:16:21,997:INFO:executable: c:\Users\Khambhati\anaconda3\envs\brainwave\python.exe
2024-10-29 13:16:21,997:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-29 13:16:21,997:INFO:PyCaret required dependencies:
2024-10-29 13:16:21,997:INFO:                 pip: 24.2
2024-10-29 13:16:21,997:INFO:          setuptools: 75.1.0
2024-10-29 13:16:21,997:INFO:             pycaret: 3.3.2
2024-10-29 13:16:21,997:INFO:             IPython: 8.29.0
2024-10-29 13:16:21,997:INFO:          ipywidgets: 8.1.5
2024-10-29 13:16:21,997:INFO:                tqdm: 4.66.6
2024-10-29 13:16:21,997:INFO:               numpy: 1.23.3
2024-10-29 13:16:21,997:INFO:              pandas: 2.1.4
2024-10-29 13:16:21,997:INFO:              jinja2: 3.1.4
2024-10-29 13:16:21,997:INFO:               scipy: 1.9.1
2024-10-29 13:16:21,997:INFO:              joblib: 1.3.2
2024-10-29 13:16:21,998:INFO:             sklearn: 1.4.2
2024-10-29 13:16:21,998:INFO:                pyod: 2.0.2
2024-10-29 13:16:21,998:INFO:            imblearn: 0.12.4
2024-10-29 13:16:21,998:INFO:   category_encoders: 2.6.4
2024-10-29 13:16:21,998:INFO:            lightgbm: 4.5.0
2024-10-29 13:16:21,998:INFO:               numba: 0.60.0
2024-10-29 13:16:21,998:INFO:            requests: 2.32.3
2024-10-29 13:16:21,998:INFO:          matplotlib: 3.7.5
2024-10-29 13:16:21,998:INFO:          scikitplot: 0.3.7
2024-10-29 13:16:21,998:INFO:         yellowbrick: 1.5
2024-10-29 13:16:21,998:INFO:              plotly: 5.24.1
2024-10-29 13:16:21,998:INFO:    plotly-resampler: Not installed
2024-10-29 13:16:21,998:INFO:             kaleido: 0.2.1
2024-10-29 13:16:21,998:INFO:           schemdraw: 0.15
2024-10-29 13:16:21,998:INFO:         statsmodels: 0.14.4
2024-10-29 13:16:21,998:INFO:              sktime: 0.26.0
2024-10-29 13:16:21,998:INFO:               tbats: 1.1.3
2024-10-29 13:16:21,998:INFO:            pmdarima: 2.0.4
2024-10-29 13:16:21,998:INFO:              psutil: 6.1.0
2024-10-29 13:16:21,998:INFO:          markupsafe: 2.1.5
2024-10-29 13:16:21,998:INFO:             pickle5: Not installed
2024-10-29 13:16:21,998:INFO:         cloudpickle: 3.1.0
2024-10-29 13:16:21,998:INFO:         deprecation: 2.1.0
2024-10-29 13:16:21,998:INFO:              xxhash: 3.5.0
2024-10-29 13:16:21,998:INFO:           wurlitzer: Not installed
2024-10-29 13:16:21,998:INFO:PyCaret optional dependencies:
2024-10-29 13:16:21,998:INFO:                shap: Not installed
2024-10-29 13:16:21,998:INFO:           interpret: Not installed
2024-10-29 13:16:21,998:INFO:                umap: Not installed
2024-10-29 13:16:21,998:INFO:     ydata_profiling: Not installed
2024-10-29 13:16:21,998:INFO:  explainerdashboard: Not installed
2024-10-29 13:16:21,998:INFO:             autoviz: Not installed
2024-10-29 13:16:21,999:INFO:           fairlearn: Not installed
2024-10-29 13:16:21,999:INFO:          deepchecks: Not installed
2024-10-29 13:16:21,999:INFO:             xgboost: 2.1.1
2024-10-29 13:16:21,999:INFO:            catboost: Not installed
2024-10-29 13:16:21,999:INFO:              kmodes: Not installed
2024-10-29 13:16:21,999:INFO:             mlxtend: Not installed
2024-10-29 13:16:21,999:INFO:       statsforecast: Not installed
2024-10-29 13:16:21,999:INFO:        tune_sklearn: Not installed
2024-10-29 13:16:21,999:INFO:                 ray: Not installed
2024-10-29 13:16:21,999:INFO:            hyperopt: Not installed
2024-10-29 13:16:21,999:INFO:              optuna: Not installed
2024-10-29 13:16:21,999:INFO:               skopt: Not installed
2024-10-29 13:16:21,999:INFO:              mlflow: Not installed
2024-10-29 13:16:21,999:INFO:              gradio: Not installed
2024-10-29 13:16:21,999:INFO:             fastapi: Not installed
2024-10-29 13:16:21,999:INFO:             uvicorn: Not installed
2024-10-29 13:16:21,999:INFO:              m2cgen: Not installed
2024-10-29 13:16:21,999:INFO:           evidently: Not installed
2024-10-29 13:16:21,999:INFO:               fugue: Not installed
2024-10-29 13:16:21,999:INFO:           streamlit: Not installed
2024-10-29 13:16:21,999:INFO:             prophet: Not installed
2024-10-29 13:16:21,999:INFO:None
2024-10-29 13:16:21,999:INFO:Set up data.
2024-10-29 13:16:22,003:INFO:Set up folding strategy.
2024-10-29 13:16:22,003:INFO:Set up train/test split.
2024-10-29 13:16:22,010:INFO:Set up index.
2024-10-29 13:16:22,010:INFO:Assigning column types.
2024-10-29 13:16:22,012:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-29 13:16:22,049:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 13:16:22,049:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 13:16:22,072:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,074:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,110:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 13:16:22,110:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 13:16:22,132:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,134:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,134:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-29 13:16:22,169:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 13:16:22,191:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,193:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,229:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 13:16:22,250:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,252:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,252:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-29 13:16:22,310:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,312:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,368:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,369:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,371:INFO:Preparing preprocessing pipeline...
2024-10-29 13:16:22,372:INFO:Set up label encoding.
2024-10-29 13:16:22,372:INFO:Set up simple imputation.
2024-10-29 13:16:22,393:INFO:Finished creating preprocessing pipeline.
2024-10-29 13:16:22,396:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-29 13:16:22,396:INFO:Creating final display dataframe.
2024-10-29 13:16:22,454:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (7188, 4)
5        Transformed data shape         (7188, 4)
6   Transformed train set shape         (5031, 4)
7    Transformed test set shape         (2157, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              32d4
2024-10-29 13:16:22,514:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,576:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 13:16:22,578:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 13:16:22,579:INFO:setup() successfully completed in 0.59s...............
2024-10-29 13:16:24,699:INFO:Initializing compare_models()
2024-10-29 13:16:24,699:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-29 13:16:24,699:INFO:Checking exceptions
2024-10-29 13:16:24,702:INFO:Preparing display monitor
2024-10-29 13:16:24,705:INFO:Initializing Logistic Regression
2024-10-29 13:16:24,706:INFO:Total runtime is 1.6347567240397135e-05 minutes
2024-10-29 13:16:24,706:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:24,706:INFO:Initializing create_model()
2024-10-29 13:16:24,706:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:24,706:INFO:Checking exceptions
2024-10-29 13:16:24,706:INFO:Importing libraries
2024-10-29 13:16:24,706:INFO:Copying training dataset
2024-10-29 13:16:24,710:INFO:Defining folds
2024-10-29 13:16:24,710:INFO:Declaring metric variables
2024-10-29 13:16:24,711:INFO:Importing untrained model
2024-10-29 13:16:24,711:INFO:Logistic Regression Imported successfully
2024-10-29 13:16:24,711:INFO:Starting cross validation
2024-10-29 13:16:24,712:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:29,454:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,461:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,467:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,491:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,499:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,521:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,534:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,540:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,555:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,562:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,566:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:29,570:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,573:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,578:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,580:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,581:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,583:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,584:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,585:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,588:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,588:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,589:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,590:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,591:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,594:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,594:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,599:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,614:INFO:Calculating mean and std
2024-10-29 13:16:29,616:INFO:Creating metrics dataframe
2024-10-29 13:16:29,618:INFO:Uploading results into container
2024-10-29 13:16:29,619:INFO:Uploading model into container now
2024-10-29 13:16:29,619:INFO:_master_model_container: 1
2024-10-29 13:16:29,620:INFO:_display_container: 2
2024-10-29 13:16:29,620:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-29 13:16:29,621:INFO:create_model() successfully completed......................................
2024-10-29 13:16:29,713:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:29,713:INFO:Creating metrics dataframe
2024-10-29 13:16:29,715:INFO:Initializing K Neighbors Classifier
2024-10-29 13:16:29,715:INFO:Total runtime is 0.08349606990814208 minutes
2024-10-29 13:16:29,715:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:29,715:INFO:Initializing create_model()
2024-10-29 13:16:29,715:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:29,715:INFO:Checking exceptions
2024-10-29 13:16:29,715:INFO:Importing libraries
2024-10-29 13:16:29,715:INFO:Copying training dataset
2024-10-29 13:16:29,719:INFO:Defining folds
2024-10-29 13:16:29,720:INFO:Declaring metric variables
2024-10-29 13:16:29,720:INFO:Importing untrained model
2024-10-29 13:16:29,720:INFO:K Neighbors Classifier Imported successfully
2024-10-29 13:16:29,720:INFO:Starting cross validation
2024-10-29 13:16:29,721:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:29,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,859:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,865:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,866:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,868:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,874:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,874:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,877:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,877:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,885:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:29,893:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:32,955:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:32,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:32,965:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:32,989:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:32,990:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:32,996:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:32,997:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,003:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,003:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,004:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,004:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,004:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,008:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,008:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,009:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,013:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,013:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,014:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,027:INFO:Calculating mean and std
2024-10-29 13:16:33,029:INFO:Creating metrics dataframe
2024-10-29 13:16:33,033:INFO:Uploading results into container
2024-10-29 13:16:33,033:INFO:Uploading model into container now
2024-10-29 13:16:33,034:INFO:_master_model_container: 2
2024-10-29 13:16:33,034:INFO:_display_container: 2
2024-10-29 13:16:33,034:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-29 13:16:33,034:INFO:create_model() successfully completed......................................
2024-10-29 13:16:33,140:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:33,140:INFO:Creating metrics dataframe
2024-10-29 13:16:33,142:INFO:Initializing Naive Bayes
2024-10-29 13:16:33,142:INFO:Total runtime is 0.14060827891031902 minutes
2024-10-29 13:16:33,142:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:33,142:INFO:Initializing create_model()
2024-10-29 13:16:33,143:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:33,143:INFO:Checking exceptions
2024-10-29 13:16:33,143:INFO:Importing libraries
2024-10-29 13:16:33,143:INFO:Copying training dataset
2024-10-29 13:16:33,146:INFO:Defining folds
2024-10-29 13:16:33,146:INFO:Declaring metric variables
2024-10-29 13:16:33,146:INFO:Importing untrained model
2024-10-29 13:16:33,147:INFO:Naive Bayes Imported successfully
2024-10-29 13:16:33,147:INFO:Starting cross validation
2024-10-29 13:16:33,147:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:33,187:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,191:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,192:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,193:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,194:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,195:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,195:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,196:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,197:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,197:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,197:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,200:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,201:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,202:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,202:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,202:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,204:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,204:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,204:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,204:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,204:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,205:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,205:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,207:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,208:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,208:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,209:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,209:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,209:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,210:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,211:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,212:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,213:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,216:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,219:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,232:INFO:Calculating mean and std
2024-10-29 13:16:33,232:INFO:Creating metrics dataframe
2024-10-29 13:16:33,234:INFO:Uploading results into container
2024-10-29 13:16:33,234:INFO:Uploading model into container now
2024-10-29 13:16:33,235:INFO:_master_model_container: 3
2024-10-29 13:16:33,235:INFO:_display_container: 2
2024-10-29 13:16:33,235:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-29 13:16:33,235:INFO:create_model() successfully completed......................................
2024-10-29 13:16:33,301:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:33,301:INFO:Creating metrics dataframe
2024-10-29 13:16:33,303:INFO:Initializing Decision Tree Classifier
2024-10-29 13:16:33,303:INFO:Total runtime is 0.1432924826939901 minutes
2024-10-29 13:16:33,303:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:33,304:INFO:Initializing create_model()
2024-10-29 13:16:33,304:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:33,304:INFO:Checking exceptions
2024-10-29 13:16:33,304:INFO:Importing libraries
2024-10-29 13:16:33,304:INFO:Copying training dataset
2024-10-29 13:16:33,307:INFO:Defining folds
2024-10-29 13:16:33,307:INFO:Declaring metric variables
2024-10-29 13:16:33,307:INFO:Importing untrained model
2024-10-29 13:16:33,307:INFO:Decision Tree Classifier Imported successfully
2024-10-29 13:16:33,308:INFO:Starting cross validation
2024-10-29 13:16:33,309:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:33,352:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,354:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,355:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,358:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,359:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,360:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,361:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,362:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,363:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,363:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,365:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,368:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,368:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,368:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,368:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,369:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,373:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,375:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,376:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,376:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,377:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,379:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,403:INFO:Calculating mean and std
2024-10-29 13:16:33,403:INFO:Creating metrics dataframe
2024-10-29 13:16:33,405:INFO:Uploading results into container
2024-10-29 13:16:33,406:INFO:Uploading model into container now
2024-10-29 13:16:33,406:INFO:_master_model_container: 4
2024-10-29 13:16:33,406:INFO:_display_container: 2
2024-10-29 13:16:33,406:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-29 13:16:33,406:INFO:create_model() successfully completed......................................
2024-10-29 13:16:33,469:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:33,470:INFO:Creating metrics dataframe
2024-10-29 13:16:33,472:INFO:Initializing SVM - Linear Kernel
2024-10-29 13:16:33,472:INFO:Total runtime is 0.14611305395762128 minutes
2024-10-29 13:16:33,472:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:33,472:INFO:Initializing create_model()
2024-10-29 13:16:33,472:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:33,472:INFO:Checking exceptions
2024-10-29 13:16:33,472:INFO:Importing libraries
2024-10-29 13:16:33,472:INFO:Copying training dataset
2024-10-29 13:16:33,475:INFO:Defining folds
2024-10-29 13:16:33,475:INFO:Declaring metric variables
2024-10-29 13:16:33,475:INFO:Importing untrained model
2024-10-29 13:16:33,476:INFO:SVM - Linear Kernel Imported successfully
2024-10-29 13:16:33,476:INFO:Starting cross validation
2024-10-29 13:16:33,477:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:33,519:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,521:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,525:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,526:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,526:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,527:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,528:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,530:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,531:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,532:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,532:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,533:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,533:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,534:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,536:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,536:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,537:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,537:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,538:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,539:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,539:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,540:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,542:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,543:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,543:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,543:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,545:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,548:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,548:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,549:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,561:INFO:Calculating mean and std
2024-10-29 13:16:33,561:INFO:Creating metrics dataframe
2024-10-29 13:16:33,564:INFO:Uploading results into container
2024-10-29 13:16:33,564:INFO:Uploading model into container now
2024-10-29 13:16:33,564:INFO:_master_model_container: 5
2024-10-29 13:16:33,564:INFO:_display_container: 2
2024-10-29 13:16:33,565:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-29 13:16:33,565:INFO:create_model() successfully completed......................................
2024-10-29 13:16:33,626:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:33,627:INFO:Creating metrics dataframe
2024-10-29 13:16:33,629:INFO:Initializing Ridge Classifier
2024-10-29 13:16:33,629:INFO:Total runtime is 0.14873460531234745 minutes
2024-10-29 13:16:33,629:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:33,629:INFO:Initializing create_model()
2024-10-29 13:16:33,629:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:33,629:INFO:Checking exceptions
2024-10-29 13:16:33,629:INFO:Importing libraries
2024-10-29 13:16:33,629:INFO:Copying training dataset
2024-10-29 13:16:33,633:INFO:Defining folds
2024-10-29 13:16:33,633:INFO:Declaring metric variables
2024-10-29 13:16:33,633:INFO:Importing untrained model
2024-10-29 13:16:33,634:INFO:Ridge Classifier Imported successfully
2024-10-29 13:16:33,634:INFO:Starting cross validation
2024-10-29 13:16:33,635:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:33,677:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,678:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,679:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,680:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,680:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,681:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,682:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,685:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,685:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,686:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,686:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,686:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,687:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,688:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,689:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:33,690:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,690:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,692:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,693:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,693:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,693:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,693:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,693:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,694:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,697:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,698:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,699:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,703:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:33,718:INFO:Calculating mean and std
2024-10-29 13:16:33,719:INFO:Creating metrics dataframe
2024-10-29 13:16:33,721:INFO:Uploading results into container
2024-10-29 13:16:33,721:INFO:Uploading model into container now
2024-10-29 13:16:33,721:INFO:_master_model_container: 6
2024-10-29 13:16:33,721:INFO:_display_container: 2
2024-10-29 13:16:33,722:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-29 13:16:33,722:INFO:create_model() successfully completed......................................
2024-10-29 13:16:33,786:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:33,787:INFO:Creating metrics dataframe
2024-10-29 13:16:33,789:INFO:Initializing Random Forest Classifier
2024-10-29 13:16:33,789:INFO:Total runtime is 0.15139480829238894 minutes
2024-10-29 13:16:33,789:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:33,790:INFO:Initializing create_model()
2024-10-29 13:16:33,790:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:33,790:INFO:Checking exceptions
2024-10-29 13:16:33,790:INFO:Importing libraries
2024-10-29 13:16:33,790:INFO:Copying training dataset
2024-10-29 13:16:33,793:INFO:Defining folds
2024-10-29 13:16:33,794:INFO:Declaring metric variables
2024-10-29 13:16:33,794:INFO:Importing untrained model
2024-10-29 13:16:33,794:INFO:Random Forest Classifier Imported successfully
2024-10-29 13:16:33,795:INFO:Starting cross validation
2024-10-29 13:16:33,795:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:34,197:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,198:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,204:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,205:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,207:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,212:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,213:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,214:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,215:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,215:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,221:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,221:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,222:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,222:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,227:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,232:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,236:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,242:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,246:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,250:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,268:INFO:Calculating mean and std
2024-10-29 13:16:34,268:INFO:Creating metrics dataframe
2024-10-29 13:16:34,271:INFO:Uploading results into container
2024-10-29 13:16:34,271:INFO:Uploading model into container now
2024-10-29 13:16:34,272:INFO:_master_model_container: 7
2024-10-29 13:16:34,272:INFO:_display_container: 2
2024-10-29 13:16:34,274:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-29 13:16:34,274:INFO:create_model() successfully completed......................................
2024-10-29 13:16:34,337:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:34,337:INFO:Creating metrics dataframe
2024-10-29 13:16:34,340:INFO:Initializing Quadratic Discriminant Analysis
2024-10-29 13:16:34,340:INFO:Total runtime is 0.16057594617207846 minutes
2024-10-29 13:16:34,340:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:34,341:INFO:Initializing create_model()
2024-10-29 13:16:34,341:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:34,341:INFO:Checking exceptions
2024-10-29 13:16:34,341:INFO:Importing libraries
2024-10-29 13:16:34,341:INFO:Copying training dataset
2024-10-29 13:16:34,343:INFO:Defining folds
2024-10-29 13:16:34,343:INFO:Declaring metric variables
2024-10-29 13:16:34,343:INFO:Importing untrained model
2024-10-29 13:16:34,344:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 13:16:34,344:INFO:Starting cross validation
2024-10-29 13:16:34,344:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:34,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,373:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,374:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,375:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,376:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,382:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,383:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:34,386:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,387:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,387:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,391:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,391:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,392:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,395:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,395:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,397:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,397:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,398:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,398:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,401:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,402:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,402:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,403:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,404:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,405:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,405:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,406:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,406:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,410:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,411:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,412:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,413:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,427:INFO:Calculating mean and std
2024-10-29 13:16:34,429:INFO:Creating metrics dataframe
2024-10-29 13:16:34,431:INFO:Uploading results into container
2024-10-29 13:16:34,431:INFO:Uploading model into container now
2024-10-29 13:16:34,432:INFO:_master_model_container: 8
2024-10-29 13:16:34,432:INFO:_display_container: 2
2024-10-29 13:16:34,432:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 13:16:34,432:INFO:create_model() successfully completed......................................
2024-10-29 13:16:34,494:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:34,494:INFO:Creating metrics dataframe
2024-10-29 13:16:34,497:INFO:Initializing Ada Boost Classifier
2024-10-29 13:16:34,497:INFO:Total runtime is 0.1632030248641968 minutes
2024-10-29 13:16:34,497:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:34,497:INFO:Initializing create_model()
2024-10-29 13:16:34,497:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:34,497:INFO:Checking exceptions
2024-10-29 13:16:34,497:INFO:Importing libraries
2024-10-29 13:16:34,497:INFO:Copying training dataset
2024-10-29 13:16:34,500:INFO:Defining folds
2024-10-29 13:16:34,500:INFO:Declaring metric variables
2024-10-29 13:16:34,500:INFO:Importing untrained model
2024-10-29 13:16:34,500:INFO:Ada Boost Classifier Imported successfully
2024-10-29 13:16:34,501:INFO:Starting cross validation
2024-10-29 13:16:34,501:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:34,523:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,524:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,526:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,526:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,528:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,530:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,532:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,535:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,536:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,537:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 13:16:34,763:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,767:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,768:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,775:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,776:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,777:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,778:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,780:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,781:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,784:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,785:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,785:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,787:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,790:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,791:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,792:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,793:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,794:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,797:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,802:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:34,822:INFO:Calculating mean and std
2024-10-29 13:16:34,824:INFO:Creating metrics dataframe
2024-10-29 13:16:34,825:INFO:Uploading results into container
2024-10-29 13:16:34,826:INFO:Uploading model into container now
2024-10-29 13:16:34,826:INFO:_master_model_container: 9
2024-10-29 13:16:34,826:INFO:_display_container: 2
2024-10-29 13:16:34,826:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-29 13:16:34,826:INFO:create_model() successfully completed......................................
2024-10-29 13:16:34,891:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:34,892:INFO:Creating metrics dataframe
2024-10-29 13:16:34,894:INFO:Initializing Gradient Boosting Classifier
2024-10-29 13:16:34,894:INFO:Total runtime is 0.1698151747385661 minutes
2024-10-29 13:16:34,894:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:34,894:INFO:Initializing create_model()
2024-10-29 13:16:34,894:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:34,894:INFO:Checking exceptions
2024-10-29 13:16:34,894:INFO:Importing libraries
2024-10-29 13:16:34,894:INFO:Copying training dataset
2024-10-29 13:16:34,897:INFO:Defining folds
2024-10-29 13:16:34,897:INFO:Declaring metric variables
2024-10-29 13:16:34,897:INFO:Importing untrained model
2024-10-29 13:16:34,897:INFO:Gradient Boosting Classifier Imported successfully
2024-10-29 13:16:34,897:INFO:Starting cross validation
2024-10-29 13:16:34,898:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:35,356:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,363:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,364:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,365:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,370:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,370:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,371:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,374:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,375:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,376:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,377:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,377:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,379:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,380:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,381:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,384:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,386:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,387:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,389:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,394:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,395:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,398:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,403:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,403:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,424:INFO:Calculating mean and std
2024-10-29 13:16:35,425:INFO:Creating metrics dataframe
2024-10-29 13:16:35,427:INFO:Uploading results into container
2024-10-29 13:16:35,427:INFO:Uploading model into container now
2024-10-29 13:16:35,427:INFO:_master_model_container: 10
2024-10-29 13:16:35,428:INFO:_display_container: 2
2024-10-29 13:16:35,428:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-29 13:16:35,428:INFO:create_model() successfully completed......................................
2024-10-29 13:16:35,490:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:35,490:INFO:Creating metrics dataframe
2024-10-29 13:16:35,493:INFO:Initializing Linear Discriminant Analysis
2024-10-29 13:16:35,493:INFO:Total runtime is 0.17979863882064823 minutes
2024-10-29 13:16:35,493:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:35,493:INFO:Initializing create_model()
2024-10-29 13:16:35,493:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:35,493:INFO:Checking exceptions
2024-10-29 13:16:35,493:INFO:Importing libraries
2024-10-29 13:16:35,493:INFO:Copying training dataset
2024-10-29 13:16:35,496:INFO:Defining folds
2024-10-29 13:16:35,496:INFO:Declaring metric variables
2024-10-29 13:16:35,496:INFO:Importing untrained model
2024-10-29 13:16:35,496:INFO:Linear Discriminant Analysis Imported successfully
2024-10-29 13:16:35,496:INFO:Starting cross validation
2024-10-29 13:16:35,497:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:35,533:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,534:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,540:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,540:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,541:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,542:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,542:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,544:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,546:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,547:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,547:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:35,547:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,548:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,548:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,548:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,549:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,550:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,552:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,552:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,552:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,552:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,553:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,554:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,555:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,558:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,558:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,558:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,560:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,562:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,581:INFO:Calculating mean and std
2024-10-29 13:16:35,583:INFO:Creating metrics dataframe
2024-10-29 13:16:35,585:INFO:Uploading results into container
2024-10-29 13:16:35,585:INFO:Uploading model into container now
2024-10-29 13:16:35,586:INFO:_master_model_container: 11
2024-10-29 13:16:35,586:INFO:_display_container: 2
2024-10-29 13:16:35,586:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-29 13:16:35,586:INFO:create_model() successfully completed......................................
2024-10-29 13:16:35,648:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:35,648:INFO:Creating metrics dataframe
2024-10-29 13:16:35,650:INFO:Initializing Extra Trees Classifier
2024-10-29 13:16:35,650:INFO:Total runtime is 0.18241651455561322 minutes
2024-10-29 13:16:35,650:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:35,651:INFO:Initializing create_model()
2024-10-29 13:16:35,651:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:35,651:INFO:Checking exceptions
2024-10-29 13:16:35,651:INFO:Importing libraries
2024-10-29 13:16:35,651:INFO:Copying training dataset
2024-10-29 13:16:35,653:INFO:Defining folds
2024-10-29 13:16:35,653:INFO:Declaring metric variables
2024-10-29 13:16:35,654:INFO:Importing untrained model
2024-10-29 13:16:35,654:INFO:Extra Trees Classifier Imported successfully
2024-10-29 13:16:35,654:INFO:Starting cross validation
2024-10-29 13:16:35,655:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:35,933:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,933:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,933:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,934:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,934:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,941:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,942:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,942:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,942:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,942:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,946:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,946:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,946:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,962:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,963:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,963:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,964:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,964:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,971:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,971:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,972:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,972:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,972:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:35,988:INFO:Calculating mean and std
2024-10-29 13:16:35,989:INFO:Creating metrics dataframe
2024-10-29 13:16:35,991:INFO:Uploading results into container
2024-10-29 13:16:35,992:INFO:Uploading model into container now
2024-10-29 13:16:35,992:INFO:_master_model_container: 12
2024-10-29 13:16:35,992:INFO:_display_container: 2
2024-10-29 13:16:35,992:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-29 13:16:35,992:INFO:create_model() successfully completed......................................
2024-10-29 13:16:36,057:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:36,057:INFO:Creating metrics dataframe
2024-10-29 13:16:36,059:INFO:Initializing Extreme Gradient Boosting
2024-10-29 13:16:36,059:INFO:Total runtime is 0.18922762870788576 minutes
2024-10-29 13:16:36,060:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:36,060:INFO:Initializing create_model()
2024-10-29 13:16:36,060:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:36,060:INFO:Checking exceptions
2024-10-29 13:16:36,060:INFO:Importing libraries
2024-10-29 13:16:36,060:INFO:Copying training dataset
2024-10-29 13:16:36,063:INFO:Defining folds
2024-10-29 13:16:36,063:INFO:Declaring metric variables
2024-10-29 13:16:36,063:INFO:Importing untrained model
2024-10-29 13:16:36,064:INFO:Extreme Gradient Boosting Imported successfully
2024-10-29 13:16:36,064:INFO:Starting cross validation
2024-10-29 13:16:36,064:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:36,650:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,656:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,661:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,663:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,670:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,673:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,784:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,788:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,788:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,793:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,796:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,799:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,801:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,802:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,804:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,806:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,807:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,808:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,809:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,810:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,811:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,813:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,814:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,814:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,817:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,818:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,818:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:36,835:INFO:Calculating mean and std
2024-10-29 13:16:36,836:INFO:Creating metrics dataframe
2024-10-29 13:16:36,838:INFO:Uploading results into container
2024-10-29 13:16:36,839:INFO:Uploading model into container now
2024-10-29 13:16:36,839:INFO:_master_model_container: 13
2024-10-29 13:16:36,839:INFO:_display_container: 2
2024-10-29 13:16:36,840:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-29 13:16:36,840:INFO:create_model() successfully completed......................................
2024-10-29 13:16:36,903:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:36,903:INFO:Creating metrics dataframe
2024-10-29 13:16:36,905:INFO:Initializing Light Gradient Boosting Machine
2024-10-29 13:16:36,905:INFO:Total runtime is 0.20334001382191977 minutes
2024-10-29 13:16:36,905:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:36,905:INFO:Initializing create_model()
2024-10-29 13:16:36,906:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:36,906:INFO:Checking exceptions
2024-10-29 13:16:36,906:INFO:Importing libraries
2024-10-29 13:16:36,906:INFO:Copying training dataset
2024-10-29 13:16:36,909:INFO:Defining folds
2024-10-29 13:16:36,909:INFO:Declaring metric variables
2024-10-29 13:16:36,909:INFO:Importing untrained model
2024-10-29 13:16:36,909:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-29 13:16:36,909:INFO:Starting cross validation
2024-10-29 13:16:36,910:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:37,408:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,414:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,421:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,442:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,449:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,457:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,467:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,475:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,478:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,481:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,485:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,493:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,501:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,508:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,515:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,538:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,545:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,548:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,552:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,555:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,563:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,591:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,598:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,605:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,613:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,619:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,621:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,625:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,627:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,651:INFO:Calculating mean and std
2024-10-29 13:16:37,652:INFO:Creating metrics dataframe
2024-10-29 13:16:37,655:INFO:Uploading results into container
2024-10-29 13:16:37,656:INFO:Uploading model into container now
2024-10-29 13:16:37,656:INFO:_master_model_container: 14
2024-10-29 13:16:37,656:INFO:_display_container: 2
2024-10-29 13:16:37,657:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-29 13:16:37,657:INFO:create_model() successfully completed......................................
2024-10-29 13:16:37,731:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:37,731:INFO:Creating metrics dataframe
2024-10-29 13:16:37,734:INFO:Initializing Dummy Classifier
2024-10-29 13:16:37,734:INFO:Total runtime is 0.21714192628860474 minutes
2024-10-29 13:16:37,734:INFO:SubProcess create_model() called ==================================
2024-10-29 13:16:37,734:INFO:Initializing create_model()
2024-10-29 13:16:37,734:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F4625C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:37,734:INFO:Checking exceptions
2024-10-29 13:16:37,734:INFO:Importing libraries
2024-10-29 13:16:37,734:INFO:Copying training dataset
2024-10-29 13:16:37,737:INFO:Defining folds
2024-10-29 13:16:37,737:INFO:Declaring metric variables
2024-10-29 13:16:37,737:INFO:Importing untrained model
2024-10-29 13:16:37,737:INFO:Dummy Classifier Imported successfully
2024-10-29 13:16:37,737:INFO:Starting cross validation
2024-10-29 13:16:37,738:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 13:16:37,771:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,772:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,775:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,775:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,775:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,776:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,778:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,778:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,779:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,781:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,781:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,782:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,782:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,782:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,783:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,784:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,784:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,784:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,785:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,786:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,788:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,789:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,790:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,791:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,793:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,793:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,794:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 13:16:37,795:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,797:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,797:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,798:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 13:16:37,807:INFO:Calculating mean and std
2024-10-29 13:16:37,809:INFO:Creating metrics dataframe
2024-10-29 13:16:37,810:INFO:Uploading results into container
2024-10-29 13:16:37,811:INFO:Uploading model into container now
2024-10-29 13:16:37,812:INFO:_master_model_container: 15
2024-10-29 13:16:37,812:INFO:_display_container: 2
2024-10-29 13:16:37,812:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-29 13:16:37,812:INFO:create_model() successfully completed......................................
2024-10-29 13:16:37,873:INFO:SubProcess create_model() end ==================================
2024-10-29 13:16:37,873:INFO:Creating metrics dataframe
2024-10-29 13:16:37,876:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-29 13:16:37,878:INFO:Initializing create_model()
2024-10-29 13:16:37,878:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:37,878:INFO:Checking exceptions
2024-10-29 13:16:37,878:INFO:Importing libraries
2024-10-29 13:16:37,878:INFO:Copying training dataset
2024-10-29 13:16:37,881:INFO:Defining folds
2024-10-29 13:16:37,881:INFO:Declaring metric variables
2024-10-29 13:16:37,881:INFO:Importing untrained model
2024-10-29 13:16:37,881:INFO:Declaring custom model
2024-10-29 13:16:37,881:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 13:16:37,882:INFO:Cross validation set to False
2024-10-29 13:16:37,882:INFO:Fitting Model
2024-10-29 13:16:37,888:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:37,889:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 13:16:37,889:INFO:create_model() successfully completed......................................
2024-10-29 13:16:37,962:INFO:_master_model_container: 15
2024-10-29 13:16:37,963:INFO:_display_container: 2
2024-10-29 13:16:37,963:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 13:16:37,963:INFO:compare_models() successfully completed......................................
2024-10-29 13:16:49,164:INFO:Initializing finalize_model()
2024-10-29 13:16:49,165:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-29 13:16:49,165:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 13:16:49,168:INFO:Initializing create_model()
2024-10-29 13:16:49,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 13:16:49,168:INFO:Checking exceptions
2024-10-29 13:16:49,169:INFO:Importing libraries
2024-10-29 13:16:49,169:INFO:Copying training dataset
2024-10-29 13:16:49,169:INFO:Defining folds
2024-10-29 13:16:49,169:INFO:Declaring metric variables
2024-10-29 13:16:49,169:INFO:Importing untrained model
2024-10-29 13:16:49,169:INFO:Declaring custom model
2024-10-29 13:16:49,170:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 13:16:49,170:INFO:Cross validation set to False
2024-10-29 13:16:49,170:INFO:Fitting Model
2024-10-29 13:16:49,179:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 13:16:49,184:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 13:16:49,184:INFO:create_model() successfully completed......................................
2024-10-29 13:16:49,243:INFO:_master_model_container: 15
2024-10-29 13:16:49,243:INFO:_display_container: 2
2024-10-29 13:16:49,246:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 13:16:49,247:INFO:finalize_model() successfully completed......................................
2024-10-29 13:16:50,356:INFO:Initializing evaluate_model()
2024-10-29 13:16:50,356:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-29 13:16:50,369:INFO:Initializing plot_model()
2024-10-29 13:16:50,369:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, system=True)
2024-10-29 13:16:50,369:INFO:Checking exceptions
2024-10-29 13:16:50,371:INFO:Preloading libraries
2024-10-29 13:16:50,372:INFO:Copying training dataset
2024-10-29 13:16:50,372:INFO:Plot type: pipeline
2024-10-29 13:16:50,445:INFO:Visual Rendered Successfully
2024-10-29 13:16:50,507:INFO:plot_model() successfully completed......................................
2024-10-29 13:16:53,000:INFO:Initializing plot_model()
2024-10-29 13:16:53,000:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2480070>, system=True)
2024-10-29 13:16:53,000:INFO:Checking exceptions
2024-10-29 13:16:53,003:INFO:Preloading libraries
2024-10-29 13:16:53,003:INFO:Copying training dataset
2024-10-29 13:16:53,003:INFO:Plot type: confusion_matrix
2024-10-29 13:16:53,058:INFO:Fitting Model
2024-10-29 13:16:53,061:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-29 13:16:53,061:INFO:Scoring test/hold-out set
2024-10-29 13:16:53,149:INFO:Visual Rendered Successfully
2024-10-29 13:16:53,205:INFO:plot_model() successfully completed......................................
2024-10-29 13:17:08,475:INFO:Initializing save_model()
2024-10-29 13:17:08,475:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=cbest, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-29 13:17:08,475:INFO:Adding model into prep_pipe
2024-10-29 13:17:08,476:WARNING:Only Model saved as it was a pipeline.
2024-10-29 13:17:08,479:INFO:cbest.pkl saved in current working directory
2024-10-29 13:17:08,483:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 13:17:08,483:INFO:save_model() successfully completed......................................
2024-10-29 13:17:29,087:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:17:29,087:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:17:29,087:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:17:29,087:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:17:30,036:INFO:Initializing load_model()
2024-10-29 13:17:30,036:INFO:load_model(model_name=bestzj, platform=None, authentication=None, verbose=True)
2024-10-29 13:22:19,076:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:22:19,077:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:22:19,077:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:22:19,077:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 13:22:19,965:INFO:Initializing load_model()
2024-10-29 13:22:19,965:INFO:load_model(model_name=bestzj, platform=None, authentication=None, verbose=True)
2024-10-29 15:31:21,975:INFO:PyCaret ClassificationExperiment
2024-10-29 15:31:21,975:INFO:Logging name: clf-default-name
2024-10-29 15:31:21,975:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-29 15:31:21,975:INFO:version 3.3.2
2024-10-29 15:31:21,975:INFO:Initializing setup()
2024-10-29 15:31:21,975:INFO:self.USI: e2a1
2024-10-29 15:31:21,975:INFO:self._variable_keys: {'memory', 'data', 'log_plots_param', 'exp_id', '_available_plots', 'USI', 'gpu_param', 'logging_param', 'fold_groups_param', 'X', 'seed', 'exp_name_log', 'n_jobs_param', 'is_multiclass', 'idx', 'target_param', '_ml_usecase', 'y_train', 'y', 'pipeline', 'html_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'y_test', 'X_train', 'fold_generator', 'X_test'}
2024-10-29 15:31:21,976:INFO:Checking environment
2024-10-29 15:31:21,976:INFO:python_version: 3.10.14
2024-10-29 15:31:21,976:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-10-29 15:31:21,976:INFO:machine: AMD64
2024-10-29 15:31:21,976:INFO:platform: Windows-10-10.0.22631-SP0
2024-10-29 15:31:21,984:INFO:Memory: svmem(total=16747851776, available=4058378240, percent=75.8, used=12689473536, free=4058378240)
2024-10-29 15:31:21,985:INFO:Physical Core: 8
2024-10-29 15:31:21,985:INFO:Logical Core: 16
2024-10-29 15:31:21,985:INFO:Checking libraries
2024-10-29 15:31:21,985:INFO:System:
2024-10-29 15:31:21,985:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-10-29 15:31:21,985:INFO:executable: c:\Users\Khambhati\anaconda3\envs\brainwave\python.exe
2024-10-29 15:31:21,985:INFO:   machine: Windows-10-10.0.22631-SP0
2024-10-29 15:31:21,985:INFO:PyCaret required dependencies:
2024-10-29 15:31:21,986:INFO:                 pip: 24.2
2024-10-29 15:31:21,986:INFO:          setuptools: 75.1.0
2024-10-29 15:31:21,986:INFO:             pycaret: 3.3.2
2024-10-29 15:31:21,986:INFO:             IPython: 8.29.0
2024-10-29 15:31:21,986:INFO:          ipywidgets: 8.1.5
2024-10-29 15:31:21,986:INFO:                tqdm: 4.66.6
2024-10-29 15:31:21,986:INFO:               numpy: 1.23.3
2024-10-29 15:31:21,986:INFO:              pandas: 2.1.4
2024-10-29 15:31:21,986:INFO:              jinja2: 3.1.4
2024-10-29 15:31:21,987:INFO:               scipy: 1.9.1
2024-10-29 15:31:21,987:INFO:              joblib: 1.3.2
2024-10-29 15:31:21,987:INFO:             sklearn: 1.4.2
2024-10-29 15:31:21,987:INFO:                pyod: 2.0.2
2024-10-29 15:31:21,987:INFO:            imblearn: 0.12.4
2024-10-29 15:31:21,987:INFO:   category_encoders: 2.6.4
2024-10-29 15:31:21,987:INFO:            lightgbm: 4.5.0
2024-10-29 15:31:21,987:INFO:               numba: 0.60.0
2024-10-29 15:31:21,987:INFO:            requests: 2.32.3
2024-10-29 15:31:21,987:INFO:          matplotlib: 3.7.5
2024-10-29 15:31:21,987:INFO:          scikitplot: 0.3.7
2024-10-29 15:31:21,987:INFO:         yellowbrick: 1.5
2024-10-29 15:31:21,987:INFO:              plotly: 5.24.1
2024-10-29 15:31:21,987:INFO:    plotly-resampler: Not installed
2024-10-29 15:31:21,987:INFO:             kaleido: 0.2.1
2024-10-29 15:31:21,987:INFO:           schemdraw: 0.15
2024-10-29 15:31:21,987:INFO:         statsmodels: 0.14.4
2024-10-29 15:31:21,987:INFO:              sktime: 0.26.0
2024-10-29 15:31:21,987:INFO:               tbats: 1.1.3
2024-10-29 15:31:21,987:INFO:            pmdarima: 2.0.4
2024-10-29 15:31:21,987:INFO:              psutil: 6.1.0
2024-10-29 15:31:21,987:INFO:          markupsafe: 2.1.5
2024-10-29 15:31:21,987:INFO:             pickle5: Not installed
2024-10-29 15:31:21,987:INFO:         cloudpickle: 3.1.0
2024-10-29 15:31:21,987:INFO:         deprecation: 2.1.0
2024-10-29 15:31:21,987:INFO:              xxhash: 3.5.0
2024-10-29 15:31:21,987:INFO:           wurlitzer: Not installed
2024-10-29 15:31:21,987:INFO:PyCaret optional dependencies:
2024-10-29 15:31:21,987:INFO:                shap: Not installed
2024-10-29 15:31:21,988:INFO:           interpret: Not installed
2024-10-29 15:31:21,988:INFO:                umap: Not installed
2024-10-29 15:31:21,988:INFO:     ydata_profiling: Not installed
2024-10-29 15:31:21,988:INFO:  explainerdashboard: Not installed
2024-10-29 15:31:21,988:INFO:             autoviz: Not installed
2024-10-29 15:31:21,988:INFO:           fairlearn: Not installed
2024-10-29 15:31:21,988:INFO:          deepchecks: Not installed
2024-10-29 15:31:21,988:INFO:             xgboost: 2.1.1
2024-10-29 15:31:21,988:INFO:            catboost: Not installed
2024-10-29 15:31:21,988:INFO:              kmodes: Not installed
2024-10-29 15:31:21,988:INFO:             mlxtend: Not installed
2024-10-29 15:31:21,988:INFO:       statsforecast: Not installed
2024-10-29 15:31:21,988:INFO:        tune_sklearn: Not installed
2024-10-29 15:31:21,988:INFO:                 ray: Not installed
2024-10-29 15:31:21,988:INFO:            hyperopt: Not installed
2024-10-29 15:31:21,988:INFO:              optuna: Not installed
2024-10-29 15:31:21,988:INFO:               skopt: Not installed
2024-10-29 15:31:21,988:INFO:              mlflow: Not installed
2024-10-29 15:31:21,988:INFO:              gradio: Not installed
2024-10-29 15:31:21,988:INFO:             fastapi: Not installed
2024-10-29 15:31:21,988:INFO:             uvicorn: Not installed
2024-10-29 15:31:21,988:INFO:              m2cgen: Not installed
2024-10-29 15:31:21,988:INFO:           evidently: Not installed
2024-10-29 15:31:21,988:INFO:               fugue: Not installed
2024-10-29 15:31:21,988:INFO:           streamlit: Not installed
2024-10-29 15:31:21,988:INFO:             prophet: Not installed
2024-10-29 15:31:21,988:INFO:None
2024-10-29 15:31:21,989:INFO:Set up data.
2024-10-29 15:31:22,002:INFO:Set up folding strategy.
2024-10-29 15:31:22,003:INFO:Set up train/test split.
2024-10-29 15:31:22,018:INFO:Set up index.
2024-10-29 15:31:22,018:INFO:Assigning column types.
2024-10-29 15:31:22,022:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-29 15:31:22,062:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 15:31:22,065:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 15:31:22,091:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,096:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,134:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 15:31:22,134:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 15:31:22,158:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,161:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,161:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-29 15:31:22,201:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 15:31:22,224:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,226:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,268:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 15:31:22,295:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,297:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,298:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-29 15:31:22,370:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,437:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,440:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,443:INFO:Preparing preprocessing pipeline...
2024-10-29 15:31:22,444:INFO:Set up label encoding.
2024-10-29 15:31:22,445:INFO:Set up simple imputation.
2024-10-29 15:31:22,481:INFO:Finished creating preprocessing pipeline.
2024-10-29 15:31:22,485:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-29 15:31:22,485:INFO:Creating final display dataframe.
2024-10-29 15:31:22,571:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (9613, 4)
5        Transformed data shape         (9613, 4)
6   Transformed train set shape         (6729, 4)
7    Transformed test set shape         (2884, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              e2a1
2024-10-29 15:31:22,639:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,707:INFO:Soft dependency imported: xgboost: 2.1.1
2024-10-29 15:31:22,710:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 15:31:22,712:INFO:setup() successfully completed in 0.75s...............
2024-10-29 15:31:28,884:INFO:Initializing compare_models()
2024-10-29 15:31:28,884:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-29 15:31:28,885:INFO:Checking exceptions
2024-10-29 15:31:28,891:INFO:Preparing display monitor
2024-10-29 15:31:28,896:INFO:Initializing Logistic Regression
2024-10-29 15:31:28,897:INFO:Total runtime is 1.6609827677408855e-05 minutes
2024-10-29 15:31:28,897:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:28,897:INFO:Initializing create_model()
2024-10-29 15:31:28,898:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:28,898:INFO:Checking exceptions
2024-10-29 15:31:28,898:INFO:Importing libraries
2024-10-29 15:31:28,898:INFO:Copying training dataset
2024-10-29 15:31:28,904:INFO:Defining folds
2024-10-29 15:31:28,904:INFO:Declaring metric variables
2024-10-29 15:31:28,905:INFO:Importing untrained model
2024-10-29 15:31:28,905:INFO:Logistic Regression Imported successfully
2024-10-29 15:31:28,906:INFO:Starting cross validation
2024-10-29 15:31:28,908:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:33,865:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,876:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,885:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,949:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,968:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,971:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,981:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,984:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,985:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,987:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,992:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,993:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,995:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,996:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,998:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:33,999:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,001:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,002:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,003:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,005:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,005:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,006:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,006:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,011:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,015:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,016:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,016:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,020:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,026:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,046:INFO:Calculating mean and std
2024-10-29 15:31:34,050:INFO:Creating metrics dataframe
2024-10-29 15:31:34,058:INFO:Uploading results into container
2024-10-29 15:31:34,060:INFO:Uploading model into container now
2024-10-29 15:31:34,062:INFO:_master_model_container: 1
2024-10-29 15:31:34,063:INFO:_display_container: 2
2024-10-29 15:31:34,065:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-29 15:31:34,065:INFO:create_model() successfully completed......................................
2024-10-29 15:31:34,267:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:34,267:INFO:Creating metrics dataframe
2024-10-29 15:31:34,270:INFO:Initializing K Neighbors Classifier
2024-10-29 15:31:34,270:INFO:Total runtime is 0.08956691026687623 minutes
2024-10-29 15:31:34,270:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:34,271:INFO:Initializing create_model()
2024-10-29 15:31:34,271:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:34,271:INFO:Checking exceptions
2024-10-29 15:31:34,271:INFO:Importing libraries
2024-10-29 15:31:34,271:INFO:Copying training dataset
2024-10-29 15:31:34,275:INFO:Defining folds
2024-10-29 15:31:34,275:INFO:Declaring metric variables
2024-10-29 15:31:34,276:INFO:Importing untrained model
2024-10-29 15:31:34,276:INFO:K Neighbors Classifier Imported successfully
2024-10-29 15:31:34,276:INFO:Starting cross validation
2024-10-29 15:31:34,277:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:34,451:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,451:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,451:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,462:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,462:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,463:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,463:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,473:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,473:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,473:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:34,473:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,671:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,678:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,683:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,686:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,686:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,691:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,691:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,699:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,700:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,704:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,705:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,706:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,713:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,715:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,715:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,721:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,723:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,728:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,742:INFO:Calculating mean and std
2024-10-29 15:31:37,744:INFO:Creating metrics dataframe
2024-10-29 15:31:37,748:INFO:Uploading results into container
2024-10-29 15:31:37,749:INFO:Uploading model into container now
2024-10-29 15:31:37,750:INFO:_master_model_container: 2
2024-10-29 15:31:37,750:INFO:_display_container: 2
2024-10-29 15:31:37,750:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-29 15:31:37,751:INFO:create_model() successfully completed......................................
2024-10-29 15:31:37,873:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:37,873:INFO:Creating metrics dataframe
2024-10-29 15:31:37,875:INFO:Initializing Naive Bayes
2024-10-29 15:31:37,876:INFO:Total runtime is 0.14966670672098797 minutes
2024-10-29 15:31:37,876:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:37,876:INFO:Initializing create_model()
2024-10-29 15:31:37,876:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:37,876:INFO:Checking exceptions
2024-10-29 15:31:37,876:INFO:Importing libraries
2024-10-29 15:31:37,876:INFO:Copying training dataset
2024-10-29 15:31:37,879:INFO:Defining folds
2024-10-29 15:31:37,880:INFO:Declaring metric variables
2024-10-29 15:31:37,880:INFO:Importing untrained model
2024-10-29 15:31:37,880:INFO:Naive Bayes Imported successfully
2024-10-29 15:31:37,880:INFO:Starting cross validation
2024-10-29 15:31:37,881:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:37,939:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,942:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,944:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,945:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,947:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,948:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,949:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,950:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,950:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,951:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,951:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,954:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,954:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,954:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,956:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,956:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,959:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,959:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,960:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,962:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,963:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,963:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,966:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,967:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,969:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:37,995:INFO:Calculating mean and std
2024-10-29 15:31:37,996:INFO:Creating metrics dataframe
2024-10-29 15:31:37,998:INFO:Uploading results into container
2024-10-29 15:31:37,998:INFO:Uploading model into container now
2024-10-29 15:31:37,999:INFO:_master_model_container: 3
2024-10-29 15:31:37,999:INFO:_display_container: 2
2024-10-29 15:31:37,999:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-29 15:31:37,999:INFO:create_model() successfully completed......................................
2024-10-29 15:31:38,080:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:38,081:INFO:Creating metrics dataframe
2024-10-29 15:31:38,083:INFO:Initializing Decision Tree Classifier
2024-10-29 15:31:38,083:INFO:Total runtime is 0.15311671098073326 minutes
2024-10-29 15:31:38,083:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:38,083:INFO:Initializing create_model()
2024-10-29 15:31:38,083:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:38,083:INFO:Checking exceptions
2024-10-29 15:31:38,083:INFO:Importing libraries
2024-10-29 15:31:38,083:INFO:Copying training dataset
2024-10-29 15:31:38,086:INFO:Defining folds
2024-10-29 15:31:38,087:INFO:Declaring metric variables
2024-10-29 15:31:38,087:INFO:Importing untrained model
2024-10-29 15:31:38,087:INFO:Decision Tree Classifier Imported successfully
2024-10-29 15:31:38,087:INFO:Starting cross validation
2024-10-29 15:31:38,088:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:38,145:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,147:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,149:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,154:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,154:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,155:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,156:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,156:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,157:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,157:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,158:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,159:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,160:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,162:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,163:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,163:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,164:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,165:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,165:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,166:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,167:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,167:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,169:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,172:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,173:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,174:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,175:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,178:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,202:INFO:Calculating mean and std
2024-10-29 15:31:38,203:INFO:Creating metrics dataframe
2024-10-29 15:31:38,205:INFO:Uploading results into container
2024-10-29 15:31:38,205:INFO:Uploading model into container now
2024-10-29 15:31:38,206:INFO:_master_model_container: 4
2024-10-29 15:31:38,206:INFO:_display_container: 2
2024-10-29 15:31:38,206:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-29 15:31:38,206:INFO:create_model() successfully completed......................................
2024-10-29 15:31:38,288:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:38,289:INFO:Creating metrics dataframe
2024-10-29 15:31:38,291:INFO:Initializing SVM - Linear Kernel
2024-10-29 15:31:38,291:INFO:Total runtime is 0.1565845847129822 minutes
2024-10-29 15:31:38,291:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:38,291:INFO:Initializing create_model()
2024-10-29 15:31:38,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:38,291:INFO:Checking exceptions
2024-10-29 15:31:38,292:INFO:Importing libraries
2024-10-29 15:31:38,292:INFO:Copying training dataset
2024-10-29 15:31:38,295:INFO:Defining folds
2024-10-29 15:31:38,295:INFO:Declaring metric variables
2024-10-29 15:31:38,295:INFO:Importing untrained model
2024-10-29 15:31:38,296:INFO:SVM - Linear Kernel Imported successfully
2024-10-29 15:31:38,296:INFO:Starting cross validation
2024-10-29 15:31:38,297:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:38,385:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,389:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,392:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,393:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,396:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,397:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,398:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,399:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,401:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,402:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,404:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,405:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,405:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,406:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,409:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,411:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,411:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,414:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,414:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,417:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,418:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:38,419:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,422:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,425:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,429:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,433:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,435:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,436:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,444:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,450:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,470:INFO:Calculating mean and std
2024-10-29 15:31:38,471:INFO:Creating metrics dataframe
2024-10-29 15:31:38,473:INFO:Uploading results into container
2024-10-29 15:31:38,473:INFO:Uploading model into container now
2024-10-29 15:31:38,474:INFO:_master_model_container: 5
2024-10-29 15:31:38,474:INFO:_display_container: 2
2024-10-29 15:31:38,474:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-29 15:31:38,475:INFO:create_model() successfully completed......................................
2024-10-29 15:31:38,561:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:38,561:INFO:Creating metrics dataframe
2024-10-29 15:31:38,564:INFO:Initializing Ridge Classifier
2024-10-29 15:31:38,564:INFO:Total runtime is 0.16114034255345663 minutes
2024-10-29 15:31:38,564:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:38,564:INFO:Initializing create_model()
2024-10-29 15:31:38,564:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:38,564:INFO:Checking exceptions
2024-10-29 15:31:38,564:INFO:Importing libraries
2024-10-29 15:31:38,564:INFO:Copying training dataset
2024-10-29 15:31:38,570:INFO:Defining folds
2024-10-29 15:31:38,570:INFO:Declaring metric variables
2024-10-29 15:31:38,571:INFO:Importing untrained model
2024-10-29 15:31:38,571:INFO:Ridge Classifier Imported successfully
2024-10-29 15:31:38,573:INFO:Starting cross validation
2024-10-29 15:31:38,574:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:38,630:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,631:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,632:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,633:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,637:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,637:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,639:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,640:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,640:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,641:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,642:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,643:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,645:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,647:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,648:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,648:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,648:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,651:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,651:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,651:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,653:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,654:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,655:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,657:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,658:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,659:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,660:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,662:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,665:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:38,691:INFO:Calculating mean and std
2024-10-29 15:31:38,693:INFO:Creating metrics dataframe
2024-10-29 15:31:38,696:INFO:Uploading results into container
2024-10-29 15:31:38,697:INFO:Uploading model into container now
2024-10-29 15:31:38,697:INFO:_master_model_container: 6
2024-10-29 15:31:38,698:INFO:_display_container: 2
2024-10-29 15:31:38,698:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-29 15:31:38,698:INFO:create_model() successfully completed......................................
2024-10-29 15:31:38,800:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:38,800:INFO:Creating metrics dataframe
2024-10-29 15:31:38,804:INFO:Initializing Random Forest Classifier
2024-10-29 15:31:38,804:INFO:Total runtime is 0.16514050960540771 minutes
2024-10-29 15:31:38,804:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:38,804:INFO:Initializing create_model()
2024-10-29 15:31:38,804:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:38,805:INFO:Checking exceptions
2024-10-29 15:31:38,805:INFO:Importing libraries
2024-10-29 15:31:38,805:INFO:Copying training dataset
2024-10-29 15:31:38,808:INFO:Defining folds
2024-10-29 15:31:38,808:INFO:Declaring metric variables
2024-10-29 15:31:38,808:INFO:Importing untrained model
2024-10-29 15:31:38,809:INFO:Random Forest Classifier Imported successfully
2024-10-29 15:31:38,810:INFO:Starting cross validation
2024-10-29 15:31:38,811:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:39,334:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,345:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,349:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,353:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,356:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,359:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,362:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,365:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,365:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,366:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,366:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,369:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,372:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,376:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,376:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,378:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,378:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,386:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,386:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,388:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,390:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,439:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,444:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,450:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,501:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,507:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,514:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,532:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,538:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,542:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,557:INFO:Calculating mean and std
2024-10-29 15:31:39,558:INFO:Creating metrics dataframe
2024-10-29 15:31:39,560:INFO:Uploading results into container
2024-10-29 15:31:39,561:INFO:Uploading model into container now
2024-10-29 15:31:39,561:INFO:_master_model_container: 7
2024-10-29 15:31:39,562:INFO:_display_container: 2
2024-10-29 15:31:39,563:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-29 15:31:39,563:INFO:create_model() successfully completed......................................
2024-10-29 15:31:39,650:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:39,651:INFO:Creating metrics dataframe
2024-10-29 15:31:39,653:INFO:Initializing Quadratic Discriminant Analysis
2024-10-29 15:31:39,653:INFO:Total runtime is 0.17929042180379232 minutes
2024-10-29 15:31:39,653:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:39,653:INFO:Initializing create_model()
2024-10-29 15:31:39,653:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:39,653:INFO:Checking exceptions
2024-10-29 15:31:39,653:INFO:Importing libraries
2024-10-29 15:31:39,654:INFO:Copying training dataset
2024-10-29 15:31:39,658:INFO:Defining folds
2024-10-29 15:31:39,658:INFO:Declaring metric variables
2024-10-29 15:31:39,659:INFO:Importing untrained model
2024-10-29 15:31:39,659:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 15:31:39,659:INFO:Starting cross validation
2024-10-29 15:31:39,660:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:39,695:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,698:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,699:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,700:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,704:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,705:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,707:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,707:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,713:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,714:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:39,715:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,718:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,719:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,720:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,721:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,723:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,724:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,724:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,726:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,727:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,728:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,729:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,732:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,733:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,733:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,733:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,733:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,735:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,735:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,735:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,739:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,739:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,739:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,739:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,742:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,743:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,743:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,744:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,748:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,754:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:39,775:INFO:Calculating mean and std
2024-10-29 15:31:39,776:INFO:Creating metrics dataframe
2024-10-29 15:31:39,778:INFO:Uploading results into container
2024-10-29 15:31:39,779:INFO:Uploading model into container now
2024-10-29 15:31:39,779:INFO:_master_model_container: 8
2024-10-29 15:31:39,780:INFO:_display_container: 2
2024-10-29 15:31:39,780:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 15:31:39,780:INFO:create_model() successfully completed......................................
2024-10-29 15:31:39,870:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:39,871:INFO:Creating metrics dataframe
2024-10-29 15:31:39,875:INFO:Initializing Ada Boost Classifier
2024-10-29 15:31:39,875:INFO:Total runtime is 0.18299150864283242 minutes
2024-10-29 15:31:39,875:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:39,876:INFO:Initializing create_model()
2024-10-29 15:31:39,876:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:39,876:INFO:Checking exceptions
2024-10-29 15:31:39,876:INFO:Importing libraries
2024-10-29 15:31:39,876:INFO:Copying training dataset
2024-10-29 15:31:39,879:INFO:Defining folds
2024-10-29 15:31:39,879:INFO:Declaring metric variables
2024-10-29 15:31:39,879:INFO:Importing untrained model
2024-10-29 15:31:39,880:INFO:Ada Boost Classifier Imported successfully
2024-10-29 15:31:39,880:INFO:Starting cross validation
2024-10-29 15:31:39,881:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:39,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,912:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,913:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,915:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,916:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,920:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,921:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,926:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:39,927:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 15:31:40,217:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,221:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,227:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,227:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,228:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,232:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,236:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,237:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,238:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,238:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,239:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,239:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,240:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,243:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,243:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,243:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,246:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,247:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,248:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,249:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,249:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,249:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,251:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,252:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,253:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,256:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,257:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,257:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,257:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,263:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:40,284:INFO:Calculating mean and std
2024-10-29 15:31:40,286:INFO:Creating metrics dataframe
2024-10-29 15:31:40,287:INFO:Uploading results into container
2024-10-29 15:31:40,288:INFO:Uploading model into container now
2024-10-29 15:31:40,288:INFO:_master_model_container: 9
2024-10-29 15:31:40,288:INFO:_display_container: 2
2024-10-29 15:31:40,289:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-29 15:31:40,289:INFO:create_model() successfully completed......................................
2024-10-29 15:31:40,376:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:40,376:INFO:Creating metrics dataframe
2024-10-29 15:31:40,379:INFO:Initializing Gradient Boosting Classifier
2024-10-29 15:31:40,379:INFO:Total runtime is 0.1913880109786987 minutes
2024-10-29 15:31:40,379:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:40,379:INFO:Initializing create_model()
2024-10-29 15:31:40,379:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:40,379:INFO:Checking exceptions
2024-10-29 15:31:40,379:INFO:Importing libraries
2024-10-29 15:31:40,380:INFO:Copying training dataset
2024-10-29 15:31:40,382:INFO:Defining folds
2024-10-29 15:31:40,382:INFO:Declaring metric variables
2024-10-29 15:31:40,383:INFO:Importing untrained model
2024-10-29 15:31:40,383:INFO:Gradient Boosting Classifier Imported successfully
2024-10-29 15:31:40,383:INFO:Starting cross validation
2024-10-29 15:31:40,384:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:41,038:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,046:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,047:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,055:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,055:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,056:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,057:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,057:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,061:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,063:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,065:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,065:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,065:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,069:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,071:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,073:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,075:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,076:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,076:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,077:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,078:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,078:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,083:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,088:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,092:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,093:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,101:INFO:Calculating mean and std
2024-10-29 15:31:41,102:INFO:Creating metrics dataframe
2024-10-29 15:31:41,104:INFO:Uploading results into container
2024-10-29 15:31:41,104:INFO:Uploading model into container now
2024-10-29 15:31:41,105:INFO:_master_model_container: 10
2024-10-29 15:31:41,105:INFO:_display_container: 2
2024-10-29 15:31:41,105:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-29 15:31:41,106:INFO:create_model() successfully completed......................................
2024-10-29 15:31:41,188:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:41,188:INFO:Creating metrics dataframe
2024-10-29 15:31:41,190:INFO:Initializing Linear Discriminant Analysis
2024-10-29 15:31:41,190:INFO:Total runtime is 0.204904568195343 minutes
2024-10-29 15:31:41,190:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:41,191:INFO:Initializing create_model()
2024-10-29 15:31:41,191:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:41,191:INFO:Checking exceptions
2024-10-29 15:31:41,191:INFO:Importing libraries
2024-10-29 15:31:41,191:INFO:Copying training dataset
2024-10-29 15:31:41,194:INFO:Defining folds
2024-10-29 15:31:41,194:INFO:Declaring metric variables
2024-10-29 15:31:41,194:INFO:Importing untrained model
2024-10-29 15:31:41,195:INFO:Linear Discriminant Analysis Imported successfully
2024-10-29 15:31:41,195:INFO:Starting cross validation
2024-10-29 15:31:41,196:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:41,249:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,251:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,252:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,253:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,253:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,255:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,255:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,258:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,259:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,259:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,259:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,260:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,261:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,262:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,262:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,264:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,265:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,266:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,267:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,267:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,268:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,269:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,271:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,272:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,273:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,275:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,276:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,277:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,280:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,309:INFO:Calculating mean and std
2024-10-29 15:31:41,311:INFO:Creating metrics dataframe
2024-10-29 15:31:41,313:INFO:Uploading results into container
2024-10-29 15:31:41,314:INFO:Uploading model into container now
2024-10-29 15:31:41,314:INFO:_master_model_container: 11
2024-10-29 15:31:41,314:INFO:_display_container: 2
2024-10-29 15:31:41,314:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-29 15:31:41,315:INFO:create_model() successfully completed......................................
2024-10-29 15:31:41,415:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:41,415:INFO:Creating metrics dataframe
2024-10-29 15:31:41,419:INFO:Initializing Extra Trees Classifier
2024-10-29 15:31:41,419:INFO:Total runtime is 0.2087117513020833 minutes
2024-10-29 15:31:41,419:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:41,419:INFO:Initializing create_model()
2024-10-29 15:31:41,419:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:41,419:INFO:Checking exceptions
2024-10-29 15:31:41,419:INFO:Importing libraries
2024-10-29 15:31:41,419:INFO:Copying training dataset
2024-10-29 15:31:41,423:INFO:Defining folds
2024-10-29 15:31:41,424:INFO:Declaring metric variables
2024-10-29 15:31:41,424:INFO:Importing untrained model
2024-10-29 15:31:41,424:INFO:Extra Trees Classifier Imported successfully
2024-10-29 15:31:41,424:INFO:Starting cross validation
2024-10-29 15:31:41,425:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:41,823:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,839:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,840:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,851:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,857:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,858:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,859:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,859:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,859:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,861:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,862:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,869:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,869:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,869:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,870:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,870:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,870:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,871:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,878:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,878:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,880:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,880:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,880:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,885:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,891:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,891:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,900:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:41,922:INFO:Calculating mean and std
2024-10-29 15:31:41,924:INFO:Creating metrics dataframe
2024-10-29 15:31:41,926:INFO:Uploading results into container
2024-10-29 15:31:41,927:INFO:Uploading model into container now
2024-10-29 15:31:41,928:INFO:_master_model_container: 12
2024-10-29 15:31:41,928:INFO:_display_container: 2
2024-10-29 15:31:41,929:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-29 15:31:41,929:INFO:create_model() successfully completed......................................
2024-10-29 15:31:42,016:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:42,016:INFO:Creating metrics dataframe
2024-10-29 15:31:42,019:INFO:Initializing Extreme Gradient Boosting
2024-10-29 15:31:42,019:INFO:Total runtime is 0.21871609290440874 minutes
2024-10-29 15:31:42,019:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:42,020:INFO:Initializing create_model()
2024-10-29 15:31:42,020:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:42,020:INFO:Checking exceptions
2024-10-29 15:31:42,020:INFO:Importing libraries
2024-10-29 15:31:42,020:INFO:Copying training dataset
2024-10-29 15:31:42,025:INFO:Defining folds
2024-10-29 15:31:42,025:INFO:Declaring metric variables
2024-10-29 15:31:42,026:INFO:Importing untrained model
2024-10-29 15:31:42,026:INFO:Extreme Gradient Boosting Imported successfully
2024-10-29 15:31:42,027:INFO:Starting cross validation
2024-10-29 15:31:42,028:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:42,614:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,622:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,627:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,859:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,865:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,867:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,876:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,877:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,879:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,887:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,892:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,893:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,897:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,900:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,901:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,902:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,902:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,907:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,908:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,909:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,915:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,915:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,916:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,917:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,922:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,922:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:42,942:INFO:Calculating mean and std
2024-10-29 15:31:42,944:INFO:Creating metrics dataframe
2024-10-29 15:31:42,948:INFO:Uploading results into container
2024-10-29 15:31:42,949:INFO:Uploading model into container now
2024-10-29 15:31:42,950:INFO:_master_model_container: 13
2024-10-29 15:31:42,950:INFO:_display_container: 2
2024-10-29 15:31:42,951:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-10-29 15:31:42,951:INFO:create_model() successfully completed......................................
2024-10-29 15:31:43,042:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:43,042:INFO:Creating metrics dataframe
2024-10-29 15:31:43,045:INFO:Initializing Light Gradient Boosting Machine
2024-10-29 15:31:43,045:INFO:Total runtime is 0.2358161131540934 minutes
2024-10-29 15:31:43,045:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:43,045:INFO:Initializing create_model()
2024-10-29 15:31:43,045:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:43,045:INFO:Checking exceptions
2024-10-29 15:31:43,045:INFO:Importing libraries
2024-10-29 15:31:43,045:INFO:Copying training dataset
2024-10-29 15:31:43,049:INFO:Defining folds
2024-10-29 15:31:43,049:INFO:Declaring metric variables
2024-10-29 15:31:43,049:INFO:Importing untrained model
2024-10-29 15:31:43,050:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-29 15:31:43,050:INFO:Starting cross validation
2024-10-29 15:31:43,051:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:43,893:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,902:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,905:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,912:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,915:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,916:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,921:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,922:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,925:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,927:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,937:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,937:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,986:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,991:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:43,996:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,001:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,007:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,013:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,024:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,034:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,034:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,043:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,044:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,053:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,059:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,070:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,080:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,135:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,143:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,150:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,170:INFO:Calculating mean and std
2024-10-29 15:31:44,171:INFO:Creating metrics dataframe
2024-10-29 15:31:44,173:INFO:Uploading results into container
2024-10-29 15:31:44,174:INFO:Uploading model into container now
2024-10-29 15:31:44,174:INFO:_master_model_container: 14
2024-10-29 15:31:44,175:INFO:_display_container: 2
2024-10-29 15:31:44,175:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-29 15:31:44,175:INFO:create_model() successfully completed......................................
2024-10-29 15:31:44,274:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:44,274:INFO:Creating metrics dataframe
2024-10-29 15:31:44,277:INFO:Initializing Dummy Classifier
2024-10-29 15:31:44,277:INFO:Total runtime is 0.25634938081105546 minutes
2024-10-29 15:31:44,277:INFO:SubProcess create_model() called ==================================
2024-10-29 15:31:44,277:INFO:Initializing create_model()
2024-10-29 15:31:44,277:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000266F20A00A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:44,277:INFO:Checking exceptions
2024-10-29 15:31:44,277:INFO:Importing libraries
2024-10-29 15:31:44,277:INFO:Copying training dataset
2024-10-29 15:31:44,282:INFO:Defining folds
2024-10-29 15:31:44,282:INFO:Declaring metric variables
2024-10-29 15:31:44,282:INFO:Importing untrained model
2024-10-29 15:31:44,282:INFO:Dummy Classifier Imported successfully
2024-10-29 15:31:44,282:INFO:Starting cross validation
2024-10-29 15:31:44,283:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 15:31:44,325:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,327:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,328:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,329:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,329:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,331:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,336:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,336:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,336:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,338:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,338:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,339:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,340:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,340:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,341:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,341:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,341:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,342:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,343:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,344:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,344:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,345:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,346:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,347:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,347:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,347:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,347:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,348:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,348:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,348:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,349:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,351:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,353:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,353:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,354:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,354:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 15:31:44,357:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,359:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 15:31:44,375:INFO:Calculating mean and std
2024-10-29 15:31:44,375:INFO:Creating metrics dataframe
2024-10-29 15:31:44,378:INFO:Uploading results into container
2024-10-29 15:31:44,378:INFO:Uploading model into container now
2024-10-29 15:31:44,379:INFO:_master_model_container: 15
2024-10-29 15:31:44,379:INFO:_display_container: 2
2024-10-29 15:31:44,379:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-29 15:31:44,379:INFO:create_model() successfully completed......................................
2024-10-29 15:31:44,494:INFO:SubProcess create_model() end ==================================
2024-10-29 15:31:44,495:INFO:Creating metrics dataframe
2024-10-29 15:31:44,499:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-29 15:31:44,501:INFO:Initializing create_model()
2024-10-29 15:31:44,502:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:44,502:INFO:Checking exceptions
2024-10-29 15:31:44,504:INFO:Importing libraries
2024-10-29 15:31:44,504:INFO:Copying training dataset
2024-10-29 15:31:44,508:INFO:Defining folds
2024-10-29 15:31:44,508:INFO:Declaring metric variables
2024-10-29 15:31:44,508:INFO:Importing untrained model
2024-10-29 15:31:44,508:INFO:Declaring custom model
2024-10-29 15:31:44,509:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 15:31:44,510:INFO:Cross validation set to False
2024-10-29 15:31:44,510:INFO:Fitting Model
2024-10-29 15:31:44,522:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:44,523:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 15:31:44,523:INFO:create_model() successfully completed......................................
2024-10-29 15:31:44,647:INFO:_master_model_container: 15
2024-10-29 15:31:44,647:INFO:_display_container: 2
2024-10-29 15:31:44,648:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 15:31:44,648:INFO:compare_models() successfully completed......................................
2024-10-29 15:31:54,056:INFO:Initializing finalize_model()
2024-10-29 15:31:54,057:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-29 15:31:54,057:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 15:31:54,060:INFO:Initializing create_model()
2024-10-29 15:31:54,061:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 15:31:54,061:INFO:Checking exceptions
2024-10-29 15:31:54,062:INFO:Importing libraries
2024-10-29 15:31:54,062:INFO:Copying training dataset
2024-10-29 15:31:54,062:INFO:Defining folds
2024-10-29 15:31:54,063:INFO:Declaring metric variables
2024-10-29 15:31:54,063:INFO:Importing untrained model
2024-10-29 15:31:54,063:INFO:Declaring custom model
2024-10-29 15:31:54,063:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 15:31:54,065:INFO:Cross validation set to False
2024-10-29 15:31:54,065:INFO:Fitting Model
2024-10-29 15:31:54,081:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 15:31:54,087:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 15:31:54,087:INFO:create_model() successfully completed......................................
2024-10-29 15:31:54,165:INFO:_master_model_container: 15
2024-10-29 15:31:54,165:INFO:_display_container: 2
2024-10-29 15:31:54,169:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 15:31:54,169:INFO:finalize_model() successfully completed......................................
2024-10-29 15:31:57,075:INFO:Initializing evaluate_model()
2024-10-29 15:31:57,076:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-29 15:31:57,094:INFO:Initializing plot_model()
2024-10-29 15:31:57,094:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, system=True)
2024-10-29 15:31:57,095:INFO:Checking exceptions
2024-10-29 15:31:57,098:INFO:Preloading libraries
2024-10-29 15:31:57,098:INFO:Copying training dataset
2024-10-29 15:31:57,098:INFO:Plot type: pipeline
2024-10-29 15:31:57,194:INFO:Visual Rendered Successfully
2024-10-29 15:31:57,281:INFO:plot_model() successfully completed......................................
2024-10-29 15:31:58,670:INFO:Initializing plot_model()
2024-10-29 15:31:58,671:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000266F2204040>, system=True)
2024-10-29 15:31:58,671:INFO:Checking exceptions
2024-10-29 15:31:58,674:INFO:Preloading libraries
2024-10-29 15:31:58,675:INFO:Copying training dataset
2024-10-29 15:31:58,675:INFO:Plot type: confusion_matrix
2024-10-29 15:31:58,760:INFO:Fitting Model
2024-10-29 15:31:58,760:WARNING:c:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-29 15:31:58,760:INFO:Scoring test/hold-out set
2024-10-29 15:31:58,867:INFO:Visual Rendered Successfully
2024-10-29 15:31:58,949:INFO:plot_model() successfully completed......................................
2024-10-29 15:32:10,410:INFO:Initializing save_model()
2024-10-29 15:32:10,410:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=jbest, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\KHAMBH~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-29 15:32:10,411:INFO:Adding model into prep_pipe
2024-10-29 15:32:10,411:WARNING:Only Model saved as it was a pipeline.
2024-10-29 15:32:10,415:INFO:jbest.pkl saved in current working directory
2024-10-29 15:32:10,420:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 15:32:10,420:INFO:save_model() successfully completed......................................
2024-10-29 15:34:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:34:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:34:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:34:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:34:12,262:INFO:Initializing load_model()
2024-10-29 15:34:12,262:INFO:load_model(model_name=bestzj, platform=None, authentication=None, verbose=True)
2024-10-29 15:35:09,584:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:35:09,584:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:35:09,584:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:35:09,584:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:35:10,570:INFO:Initializing load_model()
2024-10-29 15:35:10,570:INFO:load_model(model_name=cbest, platform=None, authentication=None, verbose=True)
2024-10-29 15:36:26,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:36:26,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:36:26,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:36:26,049:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 15:36:26,941:INFO:Initializing load_model()
2024-10-29 15:36:26,941:INFO:load_model(model_name=jbest, platform=None, authentication=None, verbose=True)
2024-10-29 23:07:07,675:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:07:07,676:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:07:07,676:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:07:07,676:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:02,669:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:02,670:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:02,670:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:02,670:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:03,189:INFO:PyCaret ClassificationExperiment
2024-10-29 23:34:03,189:INFO:Logging name: clf-default-name
2024-10-29 23:34:03,189:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-29 23:34:03,189:INFO:version 3.3.2
2024-10-29 23:34:03,189:INFO:Initializing setup()
2024-10-29 23:34:03,189:INFO:self.USI: 3179
2024-10-29 23:34:03,189:INFO:self._variable_keys: {'X', 'exp_name_log', 'idx', '_ml_usecase', 'target_param', 'fold_shuffle_param', 'logging_param', 'exp_id', 'y', 'fold_groups_param', 'y_train', 'fold_generator', 'log_plots_param', 'html_param', 'y_test', '_available_plots', 'memory', 'USI', 'data', 'X_test', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'X_train', 'gpu_param', 'seed', 'gpu_n_jobs_param', 'pipeline'}
2024-10-29 23:34:03,189:INFO:Checking environment
2024-10-29 23:34:03,189:INFO:python_version: 3.9.20
2024-10-29 23:34:03,189:INFO:python_build: ('main', 'Oct  3 2024 02:24:59')
2024-10-29 23:34:03,189:INFO:machine: arm64
2024-10-29 23:34:03,189:INFO:platform: macOS-15.1-arm64-arm-64bit
2024-10-29 23:34:03,190:INFO:Memory: svmem(total=8589934592, available=1292419072, percent=85.0, used=2952101888, free=51855360, active=1254522880, inactive=1119518720, wired=1697579008)
2024-10-29 23:34:03,190:INFO:Physical Core: 8
2024-10-29 23:34:03,190:INFO:Logical Core: 8
2024-10-29 23:34:03,190:INFO:Checking libraries
2024-10-29 23:34:03,190:INFO:System:
2024-10-29 23:34:03,190:INFO:    python: 3.9.20 (main, Oct  3 2024, 02:24:59)  [Clang 14.0.6 ]
2024-10-29 23:34:03,190:INFO:executable: /opt/anaconda3/envs/batey/bin/python
2024-10-29 23:34:03,190:INFO:   machine: macOS-15.1-arm64-arm-64bit
2024-10-29 23:34:03,190:INFO:PyCaret required dependencies:
2024-10-29 23:34:45,713:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:45,713:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:45,713:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:45,713:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:34:45,901:INFO:PyCaret ClassificationExperiment
2024-10-29 23:34:45,901:INFO:Logging name: clf-default-name
2024-10-29 23:34:45,901:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-29 23:34:45,901:INFO:version 3.3.2
2024-10-29 23:34:45,901:INFO:Initializing setup()
2024-10-29 23:34:45,901:INFO:self.USI: 8823
2024-10-29 23:34:45,901:INFO:self._variable_keys: {'seed', 'logging_param', 'fold_generator', 'X', 'html_param', 'USI', 'idx', 'memory', 'exp_name_log', 'X_test', '_ml_usecase', 'log_plots_param', 'gpu_n_jobs_param', 'y_train', 'is_multiclass', 'fold_groups_param', 'y_test', 'n_jobs_param', 'target_param', 'gpu_param', 'fold_shuffle_param', 'data', 'pipeline', 'y', 'exp_id', '_available_plots', 'X_train', 'fix_imbalance'}
2024-10-29 23:34:45,901:INFO:Checking environment
2024-10-29 23:34:45,901:INFO:python_version: 3.9.20
2024-10-29 23:34:45,901:INFO:python_build: ('main', 'Oct  3 2024 02:24:59')
2024-10-29 23:34:45,901:INFO:machine: arm64
2024-10-29 23:34:45,901:INFO:platform: macOS-15.1-arm64-arm-64bit
2024-10-29 23:34:45,902:INFO:Memory: svmem(total=8589934592, available=1432961024, percent=83.3, used=3094216704, free=58376192, active=1391394816, inactive=1311440896, wired=1702821888)
2024-10-29 23:34:45,902:INFO:Physical Core: 8
2024-10-29 23:34:45,902:INFO:Logical Core: 8
2024-10-29 23:34:45,902:INFO:Checking libraries
2024-10-29 23:34:45,902:INFO:System:
2024-10-29 23:34:45,902:INFO:    python: 3.9.20 (main, Oct  3 2024, 02:24:59)  [Clang 14.0.6 ]
2024-10-29 23:34:45,902:INFO:executable: /opt/anaconda3/envs/batey/bin/python
2024-10-29 23:34:45,902:INFO:   machine: macOS-15.1-arm64-arm-64bit
2024-10-29 23:34:45,902:INFO:PyCaret required dependencies:
2024-10-29 23:36:28,193:INFO:PyCaret ClassificationExperiment
2024-10-29 23:36:28,201:INFO:Logging name: clf-default-name
2024-10-29 23:36:28,205:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-10-29 23:36:28,205:INFO:version 3.3.2
2024-10-29 23:36:28,205:INFO:Initializing setup()
2024-10-29 23:36:28,206:INFO:self.USI: 67c1
2024-10-29 23:36:28,206:INFO:self._variable_keys: {'seed', 'logging_param', 'fold_generator', 'X', 'html_param', 'USI', 'idx', 'memory', 'exp_name_log', 'X_test', '_ml_usecase', 'log_plots_param', 'gpu_n_jobs_param', 'y_train', 'is_multiclass', 'fold_groups_param', 'y_test', 'n_jobs_param', 'target_param', 'gpu_param', 'fold_shuffle_param', 'data', 'pipeline', 'y', 'exp_id', '_available_plots', 'X_train', 'fix_imbalance'}
2024-10-29 23:36:28,206:INFO:Checking environment
2024-10-29 23:36:28,206:INFO:python_version: 3.9.20
2024-10-29 23:36:28,206:INFO:python_build: ('main', 'Oct  3 2024 02:24:59')
2024-10-29 23:36:28,206:INFO:machine: arm64
2024-10-29 23:36:28,206:INFO:platform: macOS-15.1-arm64-arm-64bit
2024-10-29 23:36:28,206:INFO:Memory: svmem(total=8589934592, available=1487290368, percent=82.7, used=3192389632, free=44597248, active=1460748288, inactive=1438203904, wired=1731641344)
2024-10-29 23:36:28,206:INFO:Physical Core: 8
2024-10-29 23:36:28,206:INFO:Logical Core: 8
2024-10-29 23:36:28,206:INFO:Checking libraries
2024-10-29 23:36:28,206:INFO:System:
2024-10-29 23:36:28,206:INFO:    python: 3.9.20 (main, Oct  3 2024, 02:24:59)  [Clang 14.0.6 ]
2024-10-29 23:36:28,206:INFO:executable: /opt/anaconda3/envs/batey/bin/python
2024-10-29 23:36:28,206:INFO:   machine: macOS-15.1-arm64-arm-64bit
2024-10-29 23:36:28,206:INFO:PyCaret required dependencies:
2024-10-29 23:36:28,628:INFO:                 pip: 24.2
2024-10-29 23:36:28,628:INFO:          setuptools: 75.1.0
2024-10-29 23:36:28,628:INFO:             pycaret: 3.3.2
2024-10-29 23:36:28,628:INFO:             IPython: 8.18.1
2024-10-29 23:36:28,628:INFO:          ipywidgets: 8.1.5
2024-10-29 23:36:28,629:INFO:                tqdm: 4.66.6
2024-10-29 23:36:28,629:INFO:               numpy: 1.26.4
2024-10-29 23:36:28,629:INFO:              pandas: 2.1.4
2024-10-29 23:36:28,629:INFO:              jinja2: 3.1.4
2024-10-29 23:36:28,629:INFO:               scipy: 1.11.4
2024-10-29 23:36:28,629:INFO:              joblib: 1.3.2
2024-10-29 23:36:28,629:INFO:             sklearn: 1.4.2
2024-10-29 23:36:28,629:INFO:                pyod: 2.0.2
2024-10-29 23:36:28,629:INFO:            imblearn: 0.12.4
2024-10-29 23:36:28,629:INFO:   category_encoders: 2.6.4
2024-10-29 23:36:28,629:INFO:            lightgbm: 4.5.0
2024-10-29 23:36:28,629:INFO:               numba: 0.60.0
2024-10-29 23:36:28,629:INFO:            requests: 2.32.3
2024-10-29 23:36:28,629:INFO:          matplotlib: 3.7.5
2024-10-29 23:36:28,629:INFO:          scikitplot: 0.3.7
2024-10-29 23:36:28,629:INFO:         yellowbrick: 1.5
2024-10-29 23:36:28,629:INFO:              plotly: 5.24.1
2024-10-29 23:36:28,629:INFO:    plotly-resampler: Not installed
2024-10-29 23:36:28,629:INFO:             kaleido: 0.2.1
2024-10-29 23:36:28,629:INFO:           schemdraw: 0.15
2024-10-29 23:36:28,629:INFO:         statsmodels: 0.14.4
2024-10-29 23:36:28,629:INFO:              sktime: 0.26.0
2024-10-29 23:36:28,629:INFO:               tbats: 1.1.3
2024-10-29 23:36:28,629:INFO:            pmdarima: 2.0.4
2024-10-29 23:36:28,629:INFO:              psutil: 6.1.0
2024-10-29 23:36:28,629:INFO:          markupsafe: 3.0.2
2024-10-29 23:36:28,629:INFO:             pickle5: Not installed
2024-10-29 23:36:28,629:INFO:         cloudpickle: 3.1.0
2024-10-29 23:36:28,629:INFO:         deprecation: 2.1.0
2024-10-29 23:36:28,629:INFO:              xxhash: 3.5.0
2024-10-29 23:36:28,629:INFO:           wurlitzer: 3.1.1
2024-10-29 23:36:28,629:INFO:PyCaret optional dependencies:
2024-10-29 23:36:28,635:INFO:                shap: Not installed
2024-10-29 23:36:28,635:INFO:           interpret: Not installed
2024-10-29 23:36:28,635:INFO:                umap: Not installed
2024-10-29 23:36:28,635:INFO:     ydata_profiling: Not installed
2024-10-29 23:36:28,635:INFO:  explainerdashboard: Not installed
2024-10-29 23:36:28,635:INFO:             autoviz: Not installed
2024-10-29 23:36:28,635:INFO:           fairlearn: Not installed
2024-10-29 23:36:28,635:INFO:          deepchecks: Not installed
2024-10-29 23:36:28,635:INFO:             xgboost: Not installed
2024-10-29 23:36:28,635:INFO:            catboost: Not installed
2024-10-29 23:36:28,635:INFO:              kmodes: Not installed
2024-10-29 23:36:28,635:INFO:             mlxtend: Not installed
2024-10-29 23:36:28,635:INFO:       statsforecast: Not installed
2024-10-29 23:36:28,635:INFO:        tune_sklearn: Not installed
2024-10-29 23:36:28,635:INFO:                 ray: Not installed
2024-10-29 23:36:28,635:INFO:            hyperopt: Not installed
2024-10-29 23:36:28,635:INFO:              optuna: Not installed
2024-10-29 23:36:28,635:INFO:               skopt: Not installed
2024-10-29 23:36:28,635:INFO:              mlflow: Not installed
2024-10-29 23:36:28,635:INFO:              gradio: Not installed
2024-10-29 23:36:28,635:INFO:             fastapi: Not installed
2024-10-29 23:36:28,635:INFO:             uvicorn: Not installed
2024-10-29 23:36:28,635:INFO:              m2cgen: Not installed
2024-10-29 23:36:28,635:INFO:           evidently: Not installed
2024-10-29 23:36:28,635:INFO:               fugue: Not installed
2024-10-29 23:36:28,635:INFO:           streamlit: Not installed
2024-10-29 23:36:28,635:INFO:             prophet: Not installed
2024-10-29 23:36:28,635:INFO:None
2024-10-29 23:36:28,635:INFO:Set up data.
2024-10-29 23:36:28,645:INFO:Set up folding strategy.
2024-10-29 23:36:28,645:INFO:Set up train/test split.
2024-10-29 23:36:28,924:INFO:Set up index.
2024-10-29 23:36:28,925:INFO:Assigning column types.
2024-10-29 23:36:28,927:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-10-29 23:36:28,947:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 23:36:28,953:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 23:36:28,979:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:28,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:28,997:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-10-29 23:36:28,998:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 23:36:29,010:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,011:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,011:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-10-29 23:36:29,031:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 23:36:29,044:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,044:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,067:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-10-29 23:36:29,080:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,080:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-10-29 23:36:29,114:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,114:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,148:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,148:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,151:INFO:Preparing preprocessing pipeline...
2024-10-29 23:36:29,152:INFO:Set up label encoding.
2024-10-29 23:36:29,152:INFO:Set up simple imputation.
2024-10-29 23:36:29,163:INFO:Finished creating preprocessing pipeline.
2024-10-29 23:36:29,166:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-10-29 23:36:29,166:INFO:Creating final display dataframe.
2024-10-29 23:36:29,193:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Label
2                   Target type            Binary
3                Target mapping     NO: 0, YES: 1
4           Original data shape         (6035, 4)
5        Transformed data shape         (6035, 4)
6   Transformed train set shape         (4224, 4)
7    Transformed test set shape         (1811, 4)
8              Numeric features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              67c1
2024-10-29 23:36:29,223:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,224:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,252:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,252:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-10-29 23:36:29,253:INFO:setup() successfully completed in 1.07s...............
2024-10-29 23:36:42,980:INFO:Initializing compare_models()
2024-10-29 23:36:42,981:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-10-29 23:36:42,981:INFO:Checking exceptions
2024-10-29 23:36:42,989:INFO:Preparing display monitor
2024-10-29 23:36:43,303:INFO:Initializing Logistic Regression
2024-10-29 23:36:43,304:INFO:Total runtime is 8.614857991536458e-06 minutes
2024-10-29 23:36:43,304:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:43,305:INFO:Initializing create_model()
2024-10-29 23:36:43,305:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:43,305:INFO:Checking exceptions
2024-10-29 23:36:43,305:INFO:Importing libraries
2024-10-29 23:36:43,305:INFO:Copying training dataset
2024-10-29 23:36:43,311:INFO:Defining folds
2024-10-29 23:36:43,311:INFO:Declaring metric variables
2024-10-29 23:36:43,311:INFO:Importing untrained model
2024-10-29 23:36:43,312:INFO:Logistic Regression Imported successfully
2024-10-29 23:36:43,312:INFO:Starting cross validation
2024-10-29 23:36:43,313:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:46,214:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,216:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,216:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,217:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,218:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,218:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,220:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,222:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,227:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,227:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,230:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,231:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,233:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,236:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,238:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,243:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,250:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,257:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,270:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,277:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,282:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,299:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,303:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,306:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,307:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,312:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,316:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,330:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,332:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,334:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,343:INFO:Calculating mean and std
2024-10-29 23:36:46,346:INFO:Creating metrics dataframe
2024-10-29 23:36:46,349:INFO:Uploading results into container
2024-10-29 23:36:46,349:INFO:Uploading model into container now
2024-10-29 23:36:46,350:INFO:_master_model_container: 1
2024-10-29 23:36:46,350:INFO:_display_container: 2
2024-10-29 23:36:46,350:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-10-29 23:36:46,350:INFO:create_model() successfully completed......................................
2024-10-29 23:36:46,454:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:46,454:INFO:Creating metrics dataframe
2024-10-29 23:36:46,455:INFO:Initializing K Neighbors Classifier
2024-10-29 23:36:46,455:INFO:Total runtime is 0.052530948321024576 minutes
2024-10-29 23:36:46,455:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:46,455:INFO:Initializing create_model()
2024-10-29 23:36:46,455:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:46,455:INFO:Checking exceptions
2024-10-29 23:36:46,455:INFO:Importing libraries
2024-10-29 23:36:46,455:INFO:Copying training dataset
2024-10-29 23:36:46,457:INFO:Defining folds
2024-10-29 23:36:46,457:INFO:Declaring metric variables
2024-10-29 23:36:46,457:INFO:Importing untrained model
2024-10-29 23:36:46,457:INFO:K Neighbors Classifier Imported successfully
2024-10-29 23:36:46,457:INFO:Starting cross validation
2024-10-29 23:36:46,458:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:46,513:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,514:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,515:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,515:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,516:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,517:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,517:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,518:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,518:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,518:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,520:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,522:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,525:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,525:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,526:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,527:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,528:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,529:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,529:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,530:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,531:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,532:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,534:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,536:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,559:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,560:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,561:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,562:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,562:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,564:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,569:INFO:Calculating mean and std
2024-10-29 23:36:46,570:INFO:Creating metrics dataframe
2024-10-29 23:36:46,570:INFO:Uploading results into container
2024-10-29 23:36:46,571:INFO:Uploading model into container now
2024-10-29 23:36:46,571:INFO:_master_model_container: 2
2024-10-29 23:36:46,571:INFO:_display_container: 2
2024-10-29 23:36:46,571:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-10-29 23:36:46,571:INFO:create_model() successfully completed......................................
2024-10-29 23:36:46,624:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:46,624:INFO:Creating metrics dataframe
2024-10-29 23:36:46,626:INFO:Initializing Naive Bayes
2024-10-29 23:36:46,626:INFO:Total runtime is 0.05537131627400716 minutes
2024-10-29 23:36:46,626:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:46,626:INFO:Initializing create_model()
2024-10-29 23:36:46,626:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:46,626:INFO:Checking exceptions
2024-10-29 23:36:46,626:INFO:Importing libraries
2024-10-29 23:36:46,626:INFO:Copying training dataset
2024-10-29 23:36:46,627:INFO:Defining folds
2024-10-29 23:36:46,627:INFO:Declaring metric variables
2024-10-29 23:36:46,627:INFO:Importing untrained model
2024-10-29 23:36:46,627:INFO:Naive Bayes Imported successfully
2024-10-29 23:36:46,627:INFO:Starting cross validation
2024-10-29 23:36:46,628:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:46,643:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,646:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,647:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,647:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,648:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,648:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,650:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,651:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,653:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,653:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,655:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,657:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,657:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,659:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,661:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,662:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,664:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,666:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,666:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,668:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,670:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,670:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,671:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,672:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,672:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,672:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,674:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,674:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,676:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,676:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,690:INFO:Calculating mean and std
2024-10-29 23:36:46,691:INFO:Creating metrics dataframe
2024-10-29 23:36:46,692:INFO:Uploading results into container
2024-10-29 23:36:46,692:INFO:Uploading model into container now
2024-10-29 23:36:46,692:INFO:_master_model_container: 3
2024-10-29 23:36:46,692:INFO:_display_container: 2
2024-10-29 23:36:46,692:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-10-29 23:36:46,692:INFO:create_model() successfully completed......................................
2024-10-29 23:36:46,748:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:46,748:INFO:Creating metrics dataframe
2024-10-29 23:36:46,749:INFO:Initializing Decision Tree Classifier
2024-10-29 23:36:46,749:INFO:Total runtime is 0.05743086338043213 minutes
2024-10-29 23:36:46,749:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:46,749:INFO:Initializing create_model()
2024-10-29 23:36:46,749:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:46,749:INFO:Checking exceptions
2024-10-29 23:36:46,749:INFO:Importing libraries
2024-10-29 23:36:46,749:INFO:Copying training dataset
2024-10-29 23:36:46,751:INFO:Defining folds
2024-10-29 23:36:46,751:INFO:Declaring metric variables
2024-10-29 23:36:46,751:INFO:Importing untrained model
2024-10-29 23:36:46,751:INFO:Decision Tree Classifier Imported successfully
2024-10-29 23:36:46,751:INFO:Starting cross validation
2024-10-29 23:36:46,751:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:46,773:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,774:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,777:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,777:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,777:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,780:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,780:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,781:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,784:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,785:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,786:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,786:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,787:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,788:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,788:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,788:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,790:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,791:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,793:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,796:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,796:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,797:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,798:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,799:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,799:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,801:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,803:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,804:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,805:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,807:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,821:INFO:Calculating mean and std
2024-10-29 23:36:46,821:INFO:Creating metrics dataframe
2024-10-29 23:36:46,822:INFO:Uploading results into container
2024-10-29 23:36:46,822:INFO:Uploading model into container now
2024-10-29 23:36:46,823:INFO:_master_model_container: 4
2024-10-29 23:36:46,823:INFO:_display_container: 2
2024-10-29 23:36:46,823:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-10-29 23:36:46,823:INFO:create_model() successfully completed......................................
2024-10-29 23:36:46,873:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:46,873:INFO:Creating metrics dataframe
2024-10-29 23:36:46,874:INFO:Initializing SVM - Linear Kernel
2024-10-29 23:36:46,874:INFO:Total runtime is 0.059511081377665205 minutes
2024-10-29 23:36:46,874:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:46,874:INFO:Initializing create_model()
2024-10-29 23:36:46,874:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:46,874:INFO:Checking exceptions
2024-10-29 23:36:46,874:INFO:Importing libraries
2024-10-29 23:36:46,874:INFO:Copying training dataset
2024-10-29 23:36:46,875:INFO:Defining folds
2024-10-29 23:36:46,875:INFO:Declaring metric variables
2024-10-29 23:36:46,875:INFO:Importing untrained model
2024-10-29 23:36:46,876:INFO:SVM - Linear Kernel Imported successfully
2024-10-29 23:36:46,876:INFO:Starting cross validation
2024-10-29 23:36:46,876:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:46,908:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,910:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,911:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,912:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,913:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:46,913:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,914:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,915:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,917:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,918:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,920:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,920:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:46,921:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:46,922:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,922:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,923:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,925:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,927:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,927:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,932:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,934:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:46,936:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,943:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,945:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,945:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,946:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:46,946:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,947:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,947:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,948:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:46,948:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,948:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,949:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,950:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,951:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,952:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:46,964:INFO:Calculating mean and std
2024-10-29 23:36:46,965:INFO:Creating metrics dataframe
2024-10-29 23:36:46,965:INFO:Uploading results into container
2024-10-29 23:36:46,966:INFO:Uploading model into container now
2024-10-29 23:36:46,966:INFO:_master_model_container: 5
2024-10-29 23:36:46,966:INFO:_display_container: 2
2024-10-29 23:36:46,966:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-10-29 23:36:46,966:INFO:create_model() successfully completed......................................
2024-10-29 23:36:47,017:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:47,017:INFO:Creating metrics dataframe
2024-10-29 23:36:47,018:INFO:Initializing Ridge Classifier
2024-10-29 23:36:47,018:INFO:Total runtime is 0.06190918286641439 minutes
2024-10-29 23:36:47,018:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:47,018:INFO:Initializing create_model()
2024-10-29 23:36:47,018:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:47,018:INFO:Checking exceptions
2024-10-29 23:36:47,018:INFO:Importing libraries
2024-10-29 23:36:47,018:INFO:Copying training dataset
2024-10-29 23:36:47,019:INFO:Defining folds
2024-10-29 23:36:47,019:INFO:Declaring metric variables
2024-10-29 23:36:47,019:INFO:Importing untrained model
2024-10-29 23:36:47,019:INFO:Ridge Classifier Imported successfully
2024-10-29 23:36:47,020:INFO:Starting cross validation
2024-10-29 23:36:47,020:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:47,039:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,039:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,039:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,041:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,041:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,041:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,043:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,043:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,043:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,043:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,045:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,047:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,051:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,053:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,053:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,054:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,054:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,055:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,056:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,056:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,057:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,058:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,059:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,059:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,061:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,061:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,063:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,063:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,064:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,066:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,076:INFO:Calculating mean and std
2024-10-29 23:36:47,076:INFO:Creating metrics dataframe
2024-10-29 23:36:47,077:INFO:Uploading results into container
2024-10-29 23:36:47,077:INFO:Uploading model into container now
2024-10-29 23:36:47,077:INFO:_master_model_container: 6
2024-10-29 23:36:47,077:INFO:_display_container: 2
2024-10-29 23:36:47,078:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-10-29 23:36:47,078:INFO:create_model() successfully completed......................................
2024-10-29 23:36:47,127:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:47,127:INFO:Creating metrics dataframe
2024-10-29 23:36:47,129:INFO:Initializing Random Forest Classifier
2024-10-29 23:36:47,129:INFO:Total runtime is 0.0637545625368754 minutes
2024-10-29 23:36:47,129:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:47,129:INFO:Initializing create_model()
2024-10-29 23:36:47,129:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:47,129:INFO:Checking exceptions
2024-10-29 23:36:47,129:INFO:Importing libraries
2024-10-29 23:36:47,129:INFO:Copying training dataset
2024-10-29 23:36:47,130:INFO:Defining folds
2024-10-29 23:36:47,130:INFO:Declaring metric variables
2024-10-29 23:36:47,130:INFO:Importing untrained model
2024-10-29 23:36:47,130:INFO:Random Forest Classifier Imported successfully
2024-10-29 23:36:47,130:INFO:Starting cross validation
2024-10-29 23:36:47,131:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:47,432:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,434:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,436:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,452:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,454:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,456:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,458:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,458:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,460:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,461:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,462:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,463:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,463:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,465:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,466:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,492:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,494:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,496:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,505:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,506:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,508:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,531:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,533:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,535:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,603:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,606:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,609:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,618:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,620:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,621:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,633:INFO:Calculating mean and std
2024-10-29 23:36:47,634:INFO:Creating metrics dataframe
2024-10-29 23:36:47,634:INFO:Uploading results into container
2024-10-29 23:36:47,635:INFO:Uploading model into container now
2024-10-29 23:36:47,635:INFO:_master_model_container: 7
2024-10-29 23:36:47,635:INFO:_display_container: 2
2024-10-29 23:36:47,635:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-10-29 23:36:47,635:INFO:create_model() successfully completed......................................
2024-10-29 23:36:47,688:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:47,688:INFO:Creating metrics dataframe
2024-10-29 23:36:47,689:INFO:Initializing Quadratic Discriminant Analysis
2024-10-29 23:36:47,690:INFO:Total runtime is 0.07310328483581544 minutes
2024-10-29 23:36:47,690:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:47,690:INFO:Initializing create_model()
2024-10-29 23:36:47,690:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:47,690:INFO:Checking exceptions
2024-10-29 23:36:47,690:INFO:Importing libraries
2024-10-29 23:36:47,690:INFO:Copying training dataset
2024-10-29 23:36:47,691:INFO:Defining folds
2024-10-29 23:36:47,691:INFO:Declaring metric variables
2024-10-29 23:36:47,691:INFO:Importing untrained model
2024-10-29 23:36:47,691:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 23:36:47,691:INFO:Starting cross validation
2024-10-29 23:36:47,691:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:47,722:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,722:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,722:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,722:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,725:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,726:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,727:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,729:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,729:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,729:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,730:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,730:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,731:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,731:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,731:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,732:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,733:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,733:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,733:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,734:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,739:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,739:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,740:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,741:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,743:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,743:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,745:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,745:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,745:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,746:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:47,747:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,747:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,747:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,747:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,748:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,749:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,750:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,751:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,752:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,754:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,761:INFO:Calculating mean and std
2024-10-29 23:36:47,761:INFO:Creating metrics dataframe
2024-10-29 23:36:47,762:INFO:Uploading results into container
2024-10-29 23:36:47,763:INFO:Uploading model into container now
2024-10-29 23:36:47,763:INFO:_master_model_container: 8
2024-10-29 23:36:47,763:INFO:_display_container: 2
2024-10-29 23:36:47,763:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 23:36:47,763:INFO:create_model() successfully completed......................................
2024-10-29 23:36:47,813:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:47,813:INFO:Creating metrics dataframe
2024-10-29 23:36:47,814:INFO:Initializing Ada Boost Classifier
2024-10-29 23:36:47,814:INFO:Total runtime is 0.07517973184585572 minutes
2024-10-29 23:36:47,814:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:47,814:INFO:Initializing create_model()
2024-10-29 23:36:47,814:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:47,814:INFO:Checking exceptions
2024-10-29 23:36:47,814:INFO:Importing libraries
2024-10-29 23:36:47,814:INFO:Copying training dataset
2024-10-29 23:36:47,816:INFO:Defining folds
2024-10-29 23:36:47,816:INFO:Declaring metric variables
2024-10-29 23:36:47,816:INFO:Importing untrained model
2024-10-29 23:36:47,816:INFO:Ada Boost Classifier Imported successfully
2024-10-29 23:36:47,816:INFO:Starting cross validation
2024-10-29 23:36:47,816:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:47,828:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,828:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,833:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,835:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,842:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,851:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,853:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,859:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,934:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,936:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,938:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,960:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,963:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,966:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,966:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,967:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,967:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,968:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,969:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,970:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,970:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,970:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,970:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,971:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,972:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,974:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,975:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,978:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,981:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,981:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-10-29 23:36:47,983:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,985:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,987:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:47,988:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,052:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,054:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,056:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,064:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,065:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,067:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,082:INFO:Calculating mean and std
2024-10-29 23:36:48,083:INFO:Creating metrics dataframe
2024-10-29 23:36:48,083:INFO:Uploading results into container
2024-10-29 23:36:48,083:INFO:Uploading model into container now
2024-10-29 23:36:48,084:INFO:_master_model_container: 9
2024-10-29 23:36:48,084:INFO:_display_container: 2
2024-10-29 23:36:48,084:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-10-29 23:36:48,084:INFO:create_model() successfully completed......................................
2024-10-29 23:36:48,136:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:48,136:INFO:Creating metrics dataframe
2024-10-29 23:36:48,137:INFO:Initializing Gradient Boosting Classifier
2024-10-29 23:36:48,137:INFO:Total runtime is 0.08056335051854452 minutes
2024-10-29 23:36:48,137:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:48,137:INFO:Initializing create_model()
2024-10-29 23:36:48,137:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:48,137:INFO:Checking exceptions
2024-10-29 23:36:48,137:INFO:Importing libraries
2024-10-29 23:36:48,137:INFO:Copying training dataset
2024-10-29 23:36:48,139:INFO:Defining folds
2024-10-29 23:36:48,139:INFO:Declaring metric variables
2024-10-29 23:36:48,139:INFO:Importing untrained model
2024-10-29 23:36:48,139:INFO:Gradient Boosting Classifier Imported successfully
2024-10-29 23:36:48,139:INFO:Starting cross validation
2024-10-29 23:36:48,139:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:48,493:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,495:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,499:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,500:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,502:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,503:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,503:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,505:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,507:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,532:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,534:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,535:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,540:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,541:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,543:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,547:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,549:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,550:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,551:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,551:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,553:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,575:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,577:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,579:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,768:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,770:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,772:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,776:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,777:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,779:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,790:INFO:Calculating mean and std
2024-10-29 23:36:48,791:INFO:Creating metrics dataframe
2024-10-29 23:36:48,792:INFO:Uploading results into container
2024-10-29 23:36:48,793:INFO:Uploading model into container now
2024-10-29 23:36:48,793:INFO:_master_model_container: 10
2024-10-29 23:36:48,793:INFO:_display_container: 2
2024-10-29 23:36:48,793:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-10-29 23:36:48,793:INFO:create_model() successfully completed......................................
2024-10-29 23:36:48,843:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:48,843:INFO:Creating metrics dataframe
2024-10-29 23:36:48,845:INFO:Initializing Linear Discriminant Analysis
2024-10-29 23:36:48,845:INFO:Total runtime is 0.09235453208287557 minutes
2024-10-29 23:36:48,845:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:48,845:INFO:Initializing create_model()
2024-10-29 23:36:48,845:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:48,845:INFO:Checking exceptions
2024-10-29 23:36:48,845:INFO:Importing libraries
2024-10-29 23:36:48,845:INFO:Copying training dataset
2024-10-29 23:36:48,846:INFO:Defining folds
2024-10-29 23:36:48,846:INFO:Declaring metric variables
2024-10-29 23:36:48,846:INFO:Importing untrained model
2024-10-29 23:36:48,846:INFO:Linear Discriminant Analysis Imported successfully
2024-10-29 23:36:48,846:INFO:Starting cross validation
2024-10-29 23:36:48,847:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:48,868:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,868:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,870:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,870:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,871:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,871:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,872:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,872:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,872:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,873:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,874:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,875:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,875:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,877:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,880:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,884:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,885:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,886:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,886:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,887:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,887:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,888:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,888:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,889:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,889:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,889:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,889:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,891:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,891:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,892:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:48,902:INFO:Calculating mean and std
2024-10-29 23:36:48,903:INFO:Creating metrics dataframe
2024-10-29 23:36:48,903:INFO:Uploading results into container
2024-10-29 23:36:48,904:INFO:Uploading model into container now
2024-10-29 23:36:48,904:INFO:_master_model_container: 11
2024-10-29 23:36:48,904:INFO:_display_container: 2
2024-10-29 23:36:48,904:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-10-29 23:36:48,904:INFO:create_model() successfully completed......................................
2024-10-29 23:36:48,954:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:48,954:INFO:Creating metrics dataframe
2024-10-29 23:36:48,955:INFO:Initializing Extra Trees Classifier
2024-10-29 23:36:48,955:INFO:Total runtime is 0.09420299927393595 minutes
2024-10-29 23:36:48,956:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:48,956:INFO:Initializing create_model()
2024-10-29 23:36:48,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:48,956:INFO:Checking exceptions
2024-10-29 23:36:48,956:INFO:Importing libraries
2024-10-29 23:36:48,956:INFO:Copying training dataset
2024-10-29 23:36:48,957:INFO:Defining folds
2024-10-29 23:36:48,957:INFO:Declaring metric variables
2024-10-29 23:36:48,957:INFO:Importing untrained model
2024-10-29 23:36:48,957:INFO:Extra Trees Classifier Imported successfully
2024-10-29 23:36:48,957:INFO:Starting cross validation
2024-10-29 23:36:48,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:49,151:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,154:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,157:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,159:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,161:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,164:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,168:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,172:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,178:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,182:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,183:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,184:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,190:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,197:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,200:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,201:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,202:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,204:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,205:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,206:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,207:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,209:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,209:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,212:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,293:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,296:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,298:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,303:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,305:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,307:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:49,311:INFO:Calculating mean and std
2024-10-29 23:36:49,312:INFO:Creating metrics dataframe
2024-10-29 23:36:49,313:INFO:Uploading results into container
2024-10-29 23:36:49,313:INFO:Uploading model into container now
2024-10-29 23:36:49,313:INFO:_master_model_container: 12
2024-10-29 23:36:49,314:INFO:_display_container: 2
2024-10-29 23:36:49,314:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-10-29 23:36:49,314:INFO:create_model() successfully completed......................................
2024-10-29 23:36:49,381:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:49,381:INFO:Creating metrics dataframe
2024-10-29 23:36:49,382:INFO:Initializing Light Gradient Boosting Machine
2024-10-29 23:36:49,382:INFO:Total runtime is 0.10131804943084717 minutes
2024-10-29 23:36:49,382:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:49,383:INFO:Initializing create_model()
2024-10-29 23:36:49,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:49,383:INFO:Checking exceptions
2024-10-29 23:36:49,383:INFO:Importing libraries
2024-10-29 23:36:49,383:INFO:Copying training dataset
2024-10-29 23:36:49,384:INFO:Defining folds
2024-10-29 23:36:49,384:INFO:Declaring metric variables
2024-10-29 23:36:49,384:INFO:Importing untrained model
2024-10-29 23:36:49,384:INFO:Light Gradient Boosting Machine Imported successfully
2024-10-29 23:36:49,384:INFO:Starting cross validation
2024-10-29 23:36:49,385:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:51,292:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,294:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,296:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,346:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,352:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,357:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,384:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,386:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,388:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,397:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,398:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,398:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,400:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,401:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,402:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,402:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,403:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,403:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,479:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,482:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,484:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,502:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,504:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,506:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,958:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,960:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,962:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,965:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,967:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,969:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:51,975:INFO:Calculating mean and std
2024-10-29 23:36:51,977:INFO:Creating metrics dataframe
2024-10-29 23:36:51,980:INFO:Uploading results into container
2024-10-29 23:36:51,980:INFO:Uploading model into container now
2024-10-29 23:36:51,981:INFO:_master_model_container: 13
2024-10-29 23:36:51,981:INFO:_display_container: 2
2024-10-29 23:36:51,982:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-10-29 23:36:51,982:INFO:create_model() successfully completed......................................
2024-10-29 23:36:52,080:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:52,080:INFO:Creating metrics dataframe
2024-10-29 23:36:52,081:INFO:Initializing Dummy Classifier
2024-10-29 23:36:52,081:INFO:Total runtime is 0.1462973475456238 minutes
2024-10-29 23:36:52,081:INFO:SubProcess create_model() called ==================================
2024-10-29 23:36:52,081:INFO:Initializing create_model()
2024-10-29 23:36:52,081:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x106475d60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:52,081:INFO:Checking exceptions
2024-10-29 23:36:52,081:INFO:Importing libraries
2024-10-29 23:36:52,081:INFO:Copying training dataset
2024-10-29 23:36:52,083:INFO:Defining folds
2024-10-29 23:36:52,083:INFO:Declaring metric variables
2024-10-29 23:36:52,084:INFO:Importing untrained model
2024-10-29 23:36:52,084:INFO:Dummy Classifier Imported successfully
2024-10-29 23:36:52,084:INFO:Starting cross validation
2024-10-29 23:36:52,085:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-10-29 23:36:52,101:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,104:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,105:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,105:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,107:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,107:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,108:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,109:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,109:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,111:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,111:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,113:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,119:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,121:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,122:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,123:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,125:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,125:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,125:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,127:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,128:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,129:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,129:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,129:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,129:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,130:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,131:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,131:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,131:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,132:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,132:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,133:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,133:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,133:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,134:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,134:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,136:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,136:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,137:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-10-29 23:36:52,138:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'YES') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-10-29 23:36:52,150:INFO:Calculating mean and std
2024-10-29 23:36:52,151:INFO:Creating metrics dataframe
2024-10-29 23:36:52,151:INFO:Uploading results into container
2024-10-29 23:36:52,152:INFO:Uploading model into container now
2024-10-29 23:36:52,152:INFO:_master_model_container: 14
2024-10-29 23:36:52,152:INFO:_display_container: 2
2024-10-29 23:36:52,152:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-10-29 23:36:52,152:INFO:create_model() successfully completed......................................
2024-10-29 23:36:52,213:INFO:SubProcess create_model() end ==================================
2024-10-29 23:36:52,213:INFO:Creating metrics dataframe
2024-10-29 23:36:52,218:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-10-29 23:36:52,218:INFO:Initializing create_model()
2024-10-29 23:36:52,219:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:52,219:INFO:Checking exceptions
2024-10-29 23:36:52,219:INFO:Importing libraries
2024-10-29 23:36:52,219:INFO:Copying training dataset
2024-10-29 23:36:52,220:INFO:Defining folds
2024-10-29 23:36:52,220:INFO:Declaring metric variables
2024-10-29 23:36:52,220:INFO:Importing untrained model
2024-10-29 23:36:52,220:INFO:Declaring custom model
2024-10-29 23:36:52,221:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 23:36:52,221:INFO:Cross validation set to False
2024-10-29 23:36:52,221:INFO:Fitting Model
2024-10-29 23:36:52,226:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:52,226:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 23:36:52,226:INFO:create_model() successfully completed......................................
2024-10-29 23:36:52,295:INFO:_master_model_container: 14
2024-10-29 23:36:52,296:INFO:_display_container: 2
2024-10-29 23:36:52,296:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 23:36:52,296:INFO:compare_models() successfully completed......................................
2024-10-29 23:36:56,636:INFO:Initializing finalize_model()
2024-10-29 23:36:56,636:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-10-29 23:36:56,637:INFO:Finalizing QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-10-29 23:36:56,640:INFO:Initializing create_model()
2024-10-29 23:36:56,640:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-10-29 23:36:56,640:INFO:Checking exceptions
2024-10-29 23:36:56,642:INFO:Importing libraries
2024-10-29 23:36:56,643:INFO:Copying training dataset
2024-10-29 23:36:56,643:INFO:Defining folds
2024-10-29 23:36:56,644:INFO:Declaring metric variables
2024-10-29 23:36:56,644:INFO:Importing untrained model
2024-10-29 23:36:56,644:INFO:Declaring custom model
2024-10-29 23:36:56,645:INFO:Quadratic Discriminant Analysis Imported successfully
2024-10-29 23:36:56,646:INFO:Cross validation set to False
2024-10-29 23:36:56,646:INFO:Fitting Model
2024-10-29 23:36:56,654:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-10-29 23:36:56,656:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 23:36:56,656:INFO:create_model() successfully completed......................................
2024-10-29 23:36:56,730:INFO:_master_model_container: 14
2024-10-29 23:36:56,730:INFO:_display_container: 2
2024-10-29 23:36:56,732:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 23:36:56,732:INFO:finalize_model() successfully completed......................................
2024-10-29 23:37:00,712:INFO:Initializing evaluate_model()
2024-10-29 23:37:00,712:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-10-29 23:37:00,729:INFO:Initializing plot_model()
2024-10-29 23:37:00,729:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, system=True)
2024-10-29 23:37:00,729:INFO:Checking exceptions
2024-10-29 23:37:00,732:INFO:Preloading libraries
2024-10-29 23:37:00,732:INFO:Copying training dataset
2024-10-29 23:37:00,732:INFO:Plot type: pipeline
2024-10-29 23:37:01,493:INFO:Visual Rendered Successfully
2024-10-29 23:37:01,558:INFO:plot_model() successfully completed......................................
2024-10-29 23:37:08,755:INFO:Initializing plot_model()
2024-10-29 23:37:08,755:INFO:plot_model(plot=pr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, system=True)
2024-10-29 23:37:08,756:INFO:Checking exceptions
2024-10-29 23:37:08,767:INFO:Preloading libraries
2024-10-29 23:37:08,768:INFO:Copying training dataset
2024-10-29 23:37:08,768:INFO:Plot type: pr
2024-10-29 23:37:08,798:INFO:Fitting Model
2024-10-29 23:37:08,800:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-29 23:37:08,800:INFO:Scoring test/hold-out set
2024-10-29 23:37:08,883:INFO:Visual Rendered Successfully
2024-10-29 23:37:08,984:INFO:plot_model() successfully completed......................................
2024-10-29 23:37:15,934:INFO:Initializing plot_model()
2024-10-29 23:37:15,935:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x15acd8b50>, system=True)
2024-10-29 23:37:15,935:INFO:Checking exceptions
2024-10-29 23:37:15,941:INFO:Preloading libraries
2024-10-29 23:37:15,941:INFO:Copying training dataset
2024-10-29 23:37:15,941:INFO:Plot type: confusion_matrix
2024-10-29 23:37:15,977:INFO:Fitting Model
2024-10-29 23:37:15,977:WARNING:/opt/anaconda3/envs/batey/lib/python3.9/site-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but QuadraticDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-10-29 23:37:15,977:INFO:Scoring test/hold-out set
2024-10-29 23:37:16,044:INFO:Visual Rendered Successfully
2024-10-29 23:37:16,173:INFO:plot_model() successfully completed......................................
2024-10-29 23:37:37,881:INFO:Initializing save_model()
2024-10-29 23:37:37,882:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False), model_name=nbest, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/0j/8s23v_h569nfcs43k8n8y9pc0000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-10-29 23:37:37,882:INFO:Adding model into prep_pipe
2024-10-29 23:37:37,883:WARNING:Only Model saved as it was a pipeline.
2024-10-29 23:37:37,886:INFO:nbest.pkl saved in current working directory
2024-10-29 23:37:37,888:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Timestamp', 'Raw_EMG',
                                             'Independent_Component'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('actual_estimator',
                 QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                                               store_covariance=False,
                                               tol=0.0001))],
         verbose=False)
2024-10-29 23:37:37,888:INFO:save_model() successfully completed......................................
2024-10-29 23:37:52,204:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:37:52,204:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:37:52,204:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:37:52,204:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:37:52,741:INFO:Initializing load_model()
2024-10-29 23:37:52,741:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-29 23:38:59,346:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:38:59,346:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:38:59,346:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:38:59,346:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:38:59,789:INFO:Initializing load_model()
2024-10-29 23:38:59,789:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-29 23:41:10,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:41:10,528:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:41:10,528:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:41:10,528:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:41:11,103:INFO:Initializing load_model()
2024-10-29 23:41:11,103:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-29 23:42:05,408:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:42:05,408:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:42:05,409:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:42:05,409:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-29 23:42:05,822:INFO:Initializing load_model()
2024-10-29 23:42:05,822:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:04:03,133:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:03,134:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:03,134:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:03,134:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:03,891:INFO:Initializing load_model()
2024-10-30 00:04:03,891:INFO:load_model(model_name=cbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:04:41,181:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:41,182:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:41,182:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:41,182:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:41,766:INFO:Initializing load_model()
2024-10-30 00:04:41,766:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:04:52,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:52,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:52,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:52,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:04:52,729:INFO:Initializing load_model()
2024-10-30 00:04:52,729:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:05:45,317:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:05:45,317:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:05:45,317:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:05:45,317:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:05:45,812:INFO:Initializing load_model()
2024-10-30 00:05:45,812:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:06:14,123:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:06:14,123:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:06:14,123:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:06:14,123:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:06:14,598:INFO:Initializing load_model()
2024-10-30 00:06:14,598:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:08:39,637:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:08:39,637:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:08:39,637:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:08:39,637:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:08:40,253:INFO:Initializing load_model()
2024-10-30 00:08:40,253:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:12:24,705:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:12:24,706:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:12:24,706:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:12:24,706:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:12:25,418:INFO:Initializing load_model()
2024-10-30 00:12:25,418:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:13:02,241:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:02,241:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:02,241:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:02,241:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:02,651:INFO:Initializing load_model()
2024-10-30 00:13:02,651:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:13:47,326:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:47,326:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:47,326:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:47,326:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:47,784:INFO:Initializing load_model()
2024-10-30 00:13:47,784:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:13:52,919:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:52,919:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:52,919:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:52,919:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:13:53,303:INFO:Initializing load_model()
2024-10-30 00:13:53,303:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 00:14:01,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:14:01,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:14:01,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:14:01,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 00:14:02,055:INFO:Initializing load_model()
2024-10-30 00:14:02,055:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 01:19:21,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:21,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:21,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:21,687:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:22,631:INFO:Initializing load_model()
2024-10-30 01:19:22,631:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 01:19:22,671:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.18.1', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': '3.1.1'}, 'python': {'version': '3.9.20', 'machine': 'arm64'}}
  warnings.warn(

2024-10-30 01:19:40,236:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:40,244:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:40,244:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:40,244:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-10-30 01:19:41,316:INFO:Initializing load_model()
2024-10-30 01:19:41,316:INFO:load_model(model_name=nbest, platform=None, authentication=None, verbose=True)
2024-10-30 01:19:41,348:WARNING:C:\Users\Khambhati\anaconda3\envs\brainwave\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.29.0', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.23.3', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.14', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.18.1', 'ipywidgets': '8.1.5', 'tqdm': '4.66.6', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': '3.1.1'}, 'python': {'version': '3.9.20', 'machine': 'arm64'}}
  warnings.warn(

